grf{
    grfid: "ZM\07\01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 4;
    min_compatible_version: 1;
//Purchase Cost Parameter
    param {
        param_purchase_cost {
            type: int;
            name: string(STR_PARAM_PURCHASE_COST);
            desc: string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Running Cost Parameter
     param {
        param_running_cost {
            type: int;
            name: string(STR_PARAM_RUNNING_COST);
            desc: string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Carry Capacity Parameter
    param {
                param_capacities {
                        type: int;
                        name: string(STR_PARAM_NAME_CAPACITY);
                        desc: string(STR_PARAM_DESC_CAPACITY);
                        min_value: 0;
                        max_value: 1;
                        def_value: 0;
                        names: {
                                                0: string(STR_PARAM_REAL_CAPACITY);
                                                1: string(STR_PARAM_NORMAL_REDUCED);
                        };
                }
        }
}


//Carry Capacity Variables
if (param_capacities == 0) {
    param_capacity_mod = 0;
}

if (param_capacities == 1) {
    param_capacity_mod = 2;
}

railtypetable {
    RAIL, SAA3: [ MTRO, SBA3, SCA3, SDA3, "3RDR", "3RDC", MTRO, ELRL], ELRL
}

cargotable {
PASS, COAL, MAIL, OIL_, LVST, EOIL, COKE, VBOD, SULP, SASH, MNO2, BOOM, IRON, QLME, PHOS, VPTS, SLAG, PIPE, CASS, NUTS, METL, GOOD, GRAI, WOOD, IORE, STEL, VALU, PAPR, WHEA, FOOD, GOLD, RUBR, FRUT, MAIZ, CORE, WATR, DIAM, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BEER, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, DYES, ENSP, FERT, FICR, FISH, FMSP, FRVG, GLAS, GRVL, JAVA, LIME, MILK, MNSP, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, TOUR, VEHI, WDPR, WOOL, URAN, YETI, YETY, BEAN, NITR
}

//Basecost Paramater Variables
basecost {
 PR_BUILD_VEHICLE_TRAIN: 1 + param_purchase_cost - 4;
 PR_BUILD_VEHICLE_WAGON: 3 + param_purchase_cost - 4;
 PR_RUNNING_TRAIN_STEAM: 4 + param_running_cost - 4;
 PR_RUNNING_TRAIN_DIESEL: 3 + param_running_cost - 4;
 PR_RUNNING_TRAIN_ELECTRIC: 2 + param_running_cost - 4;
}

// Fix depot view
traininfo_y_offset = 2;
train_width_32_px = 1;


// Purchase Sprite
template template_purchase(x, y) {
    //[left_x, upper_y, width, height, offset_x, offset_y]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x     , y, 88, 15, -60, -11, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
}


// 4 Template
template template_4(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -19]
    [ x+9,      y,        22,        20,        -8,        -15]
    [ x+32,     y,        33,        16,        0,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -12,        -15]
}

template template_4_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89,     y,        8,        24,        -3,            -20]
    [ x+98,     y,        22,        20,        -8,        -15]
    [ x+121,    y,        33,        16,        0,        -12]
    [ x+155,    y,        22,        20,        -4,            -11]
    
    [ x,        y,        8,        24,        -3,            -13]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -12,        -15]
}

// 5 Template
template template_5(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -19]
    [ x+9,      y,        22,        20,        -10,        -14]
    [ x+32,     y,        33,        16,        -4,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -10,        -14]
}

// 6 Template
template template_6(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -17]
    [ x+9,      y,        22,        20,        -12,        -13]
    [ x+32,     y,        33,        16,        -8,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -8,        -13]
}

template template_6_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -8,        -13]
    
    [ x,        y,        8,        24,        -3,            -17]
    [ x+9,      y,        22,        20,        -12,        -13]
    [ x+32,     y,        33,        16,        -8,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

//7 Template
template template_7(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -15]
    [ x+9,      y,        22,        20,        -14,        -12]
    [ x+32,     y,        33,        16,        -12,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -6,        -12]
}

//7 Template Reversed
template template_7_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89 , y, 8 , 24,  -3, -15]
    [ x+98 , y, 22, 20, -14, -12]
    [ x+121, y, 33, 16, -12, -12]
    [ x+155, y, 22, 20,  -4, -11]

    [ x    , y, 8 , 24,  -3, -13]
    [ x+9  , y, 22, 20, -16, -11]
    [ x+32 , y, 33, 16, -16, -12]
    [ x+66 , y, 22, 20,  -6, -12]
}

// 8 Template
template template_8(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -12]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -12]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]
}

template template_8_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up

    [ x+89,     y,        8,        24,        -3,            -12]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]

    [ x,        y,        8,        24,        -3,            -12]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

spriteset(spriteset_MU_purchase,   "gfx/El_MUDC.png") {template_purchase(7, 21)}
spriteset(spriteset_MU_trailer,   "gfx/El_MUDC.png") {template_7(7, 89)}

//Vehicle
item (FEAT_TRAINS, ITEM_MU_TRAILER, 0) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        SAA3;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_MU_TRAILER);
        introduction_date:                date(1890,1,1);
        vehicle_life:                     30;
        model_life:                        36;
        length:                            7;

        weight:                         28 ton;
        speed:                            80 mph;
        cost_factor:                     7;
        running_cost_factor:             10;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    100;
        loading_speed: 30;

    }
    graphics {
        default:                        spriteset_MU_trailer;
        purchase:                        spriteset_MU_purchase;
        additional_text: string(STR_MU_TRAILER_INFO);

}
}

//BrooklynGateCar
spriteset(spriteset_BrooklynGateCar_Purchase,   "gfx/BrooklynGateCar.png") {template_purchase(7, 21)}
spriteset(spriteset_BrooklynGateCar,   "gfx/BrooklynGateCar.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab

switch(FEAT_TRAINS, SELF, sw_BrooklynGateCar_attach, vehicle_type_id){
    Item_BrooklynGateCar    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_BrooklynGateCar_Lined    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

item(FEAT_TRAINS, Item_BrooklynGateCar, 100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_BROOKLYNGATECAR);
        introduction_date:                date(1890,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                        35 ton;
        speed:                            35 mph;
        power:                            120 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             120;
        cargo_capacity:                  70/param_capacity_mod;
        loading_speed: 20;

     //   variant_group: Item_BrooklynGateCar;
     //   extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_BrooklynGateCar;
        can_attach_wagon: sw_BrooklynGateCar_attach;
        purchase: spriteset_BrooklynGateCar_Purchase;
        additional_text: string(STR_INFO_BROOKLYNGATECAR);
		reverse_build_probability: return 50;
}
}

//BrooklynGateCar_Lined
spriteset(spriteset_BrooklynGateCar_Lined_Purchase,   "gfx/BrooklynGateCar_Lined.png") {template_purchase(7, 21)}
spriteset(spriteset_BrooklynGateCar_Lined,   "gfx/BrooklynGateCar_Lined.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_BrooklynGateCar_Lined, 101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_BROOKLYNGATECAR);
        introduction_date:                date(1890,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                        35 ton;
        speed:                            35 mph;
        power:                            120 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             120;
        cargo_capacity:                  70/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_BrooklynGateCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_BrooklynGateCar_Lined;
        can_attach_wagon: sw_BrooklynGateCar_attach;
        purchase: spriteset_BrooklynGateCar_Lined_Purchase;
        additional_text: string(STR_INFO_BROOKLYNGATECAR);
		reverse_build_probability: return 50;
}
}

// Elevated MBTA No.1 Car
spriteset(spriteset_El_1Car_Purchase,   "gfx/El_1car.png") {template_purchase(7, 21)}
spriteset(spriteset_El_1Car,   "gfx/El_1car.png") {template_7(7, 39)} // <- Define a wagon
spriteset(spriteset_El_1Car_Headlights,   "gfx/El_1car_Headlights.png") {template_7(7, 39)} // <- Define headlights
spriteset(spriteset_El_1Car_Markerlights,   "gfx/El_1car_Markerlights.png") {template_7(7, 39)} // <- Define markerlights

switch(FEAT_TRAINS, SELF, sw_El_1car_attach, vehicle_type_id){
    item_el_1Car     : return CB_RESULT_ATTACH_ALLOW  ;
    item_el_1Car_Orange      : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// Headlight stacker
switch (FEAT_TRAINS, SELF, sw_El_1Car_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_1Car;    // Return the base sprite
    1: return spriteset_El_1Car_Headlights;    // Return the overlay
}

// Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_El_1Car_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_1Car;    // Return the base sprite
    1: return spriteset_El_1Car_Markerlights;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_El_1car_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_1Car;    // Return the base sprite
    1: return spriteset_El_1Car_Headlights;    // Return the headlight overlay
    return spriteset_El_1Car_Markerlights; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_El_1Car_rear, position_in_consist_from_end){
    0 : return sw_El_1Car_markerlight_stack;
    return spriteset_El_1Car;
}

switch (FEAT_TRAINS, SELF, sw_El_1Car_lead, position_in_consist) {
    0: sw_El_1Car_headlight_stack;
    return sw_El_1Car_rear;
}

switch(FEAT_TRAINS, SELF, sw_E1_1Car_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: sw_El_1car_headlight_and_marker_stack;
return sw_El_1Car_lead;
}

item(FEAT_TRAINS, item_el_1Car, 200) {
    property {
        /* Common properties */
        name: string(STR_NAME_EL_1CAR);
        climates_available: ALL_CLIMATES;
        introduction_date: date(1900, 01, 01);
        model_life:    40;
        vehicle_life: 40;
        reliability_decay: 20;
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit:                [PASS, TOUR];
        cargo_capacity: 75/param_capacity_mod;
        loading_speed: 25;
        /* Train-specific properties */
        sprite_id: SPRITE_ID_NEW_TRAIN; //enable new graphics
        speed: 35 mph;
        misc_flags: bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_AUTOREFIT, TRAIN_FLAG_SPRITE_STACK);
        refit_cost: 0;
        track_type:    SAA3;
        ai_special_flag: AI_FLAG_PASSENGER;
        running_cost_base: RUNNING_COST_ELECTRIC;
        engine_class: ENGINE_CLASS_ELECTRIC;
        power: 134 hp;
        weight: 36 ton;
        tractive_effort_coefficient: 0.3;
        length: 7;
        cost_factor:                     10;
        running_cost_factor:             3;
        loading_speed: 20;
    }
    graphics {
        default: sw_E1_1Car_solo;
        can_attach_wagon    : sw_El_1car_attach;
        purchase: spriteset_El_1Car_Purchase;
        additional_text: string(STR_ROLE_EL_1CAR);
    }
}

// Elevated MBTA No.1 Car Orange line Livery
spriteset(spriteset_El_1Car_Orange_Purchase,   "gfx/El_1car_Orange.png") {template_purchase(7, 21)}
spriteset(spriteset_El_1Car_Orange,   "gfx/El_1car_Orange.png") {template_7(7, 39)} // <- Define a wagon


// Headlight stacker
switch (FEAT_TRAINS, SELF, sw_El_1Car_Orange_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_1Car_Orange;    // Return the base sprite
    1: return spriteset_El_1Car_Headlights;    // Return the overlay
}

// Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_El_1Car_Orange_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_1Car_Orange;    // Return the base sprite
    1: return spriteset_El_1Car_Markerlights;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_El_1car_Orange_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_1Car_Orange;    // Return the base sprite
    1: return spriteset_El_1Car_Headlights;    // Return the headlight overlay
    return spriteset_El_1Car_Markerlights; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_El_1Car_Orange_rear, position_in_consist_from_end){
    0 : return sw_El_1Car_Orange_markerlight_stack;
    return spriteset_El_1Car_Orange;
}

switch (FEAT_TRAINS, SELF, sw_El_1Car_Orange_lead, position_in_consist) {
    0: sw_El_1Car_Orange_headlight_stack;
    return sw_El_1Car_Orange_rear;
}

switch(FEAT_TRAINS, SELF, sw_E1_1Car_Orange_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: sw_El_1car_Orange_headlight_and_marker_stack;
return sw_El_1Car_Orange_lead;
}

item(FEAT_TRAINS, item_el_1Car_Orange, 201) {
    property {
        /* Common properties */
        name: string(STR_NAME_EL_1CAR);
        climates_available: ALL_CLIMATES;
        introduction_date: date(1900, 01, 01);
        model_life:    40;
        vehicle_life: 40;
        reliability_decay: 20;
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit:                [PASS, TOUR];
        cargo_capacity: 75/param_capacity_mod;
        loading_speed: 25;
        /* Train-specific properties */
        sprite_id: SPRITE_ID_NEW_TRAIN; //enable new graphics
        speed: 35 mph;
        misc_flags: bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_AUTOREFIT, TRAIN_FLAG_SPRITE_STACK);
        refit_cost: 0;
        track_type:    SAA3;
        ai_special_flag: AI_FLAG_PASSENGER;
        running_cost_base: RUNNING_COST_ELECTRIC;
        engine_class: ENGINE_CLASS_ELECTRIC;
        power: 134 hp;
        weight: 36 ton;
        tractive_effort_coefficient: 0.3;
        length: 7;

        variant_group: item_el_1Car;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        cost_factor:                     10;
        running_cost_factor:             3;
        loading_speed: 20;
    }
    graphics {
        default: sw_E1_1Car_Orange_solo;
        can_attach_wagon    : sw_El_1car_attach;
        purchase: spriteset_El_1Car_Orange_Purchase;
        additional_text: string(STR_ROLE_EL_1CAR);
    }
}


// Elevated CTA 4000 Series
// 1cc sprite
spriteset(spriteset_El_4000Series_Purchase,   "gfx/El_4000Series.png") {template_purchase(7, 21)}
spriteset(spriteset_El_4000Series,   "gfx/El_4000Series.png") {template_7(7, 39)} // <- Define a wagon
spriteset(spriteset_El_4000Series_Headlights,   "gfx/El_4000Series_Headlights.png") {template_7(7, 39)} // <- Define headlights
spriteset(spriteset_El_4000Series_Markerlights,   "gfx/El_4000Series_Markerlights.png") {template_7(7, 39)} // <- Define markerlights

switch(FEAT_TRAINS, SELF, sw_El_4000Series_attach, vehicle_type_id){
    item_el_4000Series      : return CB_RESULT_ATTACH_ALLOW  ;
    item_el_4000Series_CTA        : return CB_RESULT_ATTACH_ALLOW  ;
    item_el_4000Series_Brown  : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// Headlight stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series;    // Return the base sprite
    1: return spriteset_El_4000Series_Headlights;    // Return the overlay
}

// Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series;    // Return the base sprite
    1: return spriteset_El_4000Series_Markerlights;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series;    // Return the base sprite
    1: return spriteset_El_4000Series_Headlights;    // Return the headlight overlay
    return spriteset_El_4000Series_Markerlights; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_El_4000Series_rear, position_in_consist_from_end){
    0 : return sw_El_4000Series_markerlight_stack;
    return spriteset_El_4000Series;
}

switch (FEAT_TRAINS, SELF, sw_El_4000Series_lead, position_in_consist) {
    0: sw_El_4000Series_headlight_stack;
    return sw_El_4000Series_rear;
}

switch(FEAT_TRAINS, SELF, sw_E1_4000Series_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: sw_El_4000Series_headlight_and_marker_stack;
return sw_El_4000Series_lead;
}

item(FEAT_TRAINS, item_el_4000Series, 300) {
    property {
        /* Common properties */
        name: string(STR_NAME_EL_4000SERIES);
        climates_available: ALL_CLIMATES;
        introduction_date: date(1914, 01, 01);
        model_life:    40;
        vehicle_life: 40;
        reliability_decay: 20;
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit:                [PASS, TOUR];
        cargo_capacity: 80/param_capacity_mod;
        loading_speed: 20;
        /* Train-specific properties */
        sprite_id: SPRITE_ID_NEW_TRAIN; //enable new graphics
        speed: 35 mph;
        misc_flags: bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_AUTOREFIT, TRAIN_FLAG_SPRITE_STACK);
        refit_cost: 0;
        track_type:    SAA3;
        ai_special_flag: AI_FLAG_PASSENGER;
        running_cost_base: RUNNING_COST_ELECTRIC;
        engine_class: ENGINE_CLASS_ELECTRIC;
        power: 134 hp;
        weight: 24 ton;
        tractive_effort_coefficient: 0.3;
        length: 7;
        cost_factor:                     11;
        running_cost_factor:             4;
        loading_speed: 20;
    }
    graphics {
        default: sw_E1_4000Series_solo;
        can_attach_wagon    : sw_El_4000Series_attach;
        purchase: spriteset_El_4000Series_Purchase;
        additional_text: string(STR_ROLE_EL_4000SERIES);
    }
}

//CTA Livery
spriteset(spriteset_El_4000Series_CTA_Purchase,   "gfx/El_4000Series_CTA.png") {template_purchase(7, 21)}
spriteset(spriteset_El_4000Series_CTA,   "gfx/El_4000Series_CTA.png") {template_7(7, 39)} // <- Define a wagon

// Headlight stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_CTA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series_CTA;    // Return the base sprite
    1: return spriteset_El_4000Series_Headlights;    // Return the overlay
}

// Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_CTA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series_CTA;    // Return the base sprite
    1: return spriteset_El_4000Series_Markerlights;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_CTA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series_CTA;    // Return the base sprite
    1: return spriteset_El_4000Series_Headlights;    // Return the headlight overlay
    return spriteset_El_4000Series_Markerlights; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_El_4000Series_CTA_rear, position_in_consist_from_end){
    0 : return sw_El_4000Series_CTA_markerlight_stack;
    return spriteset_El_4000Series_CTA;
}

switch (FEAT_TRAINS, SELF, sw_El_4000Series_CTA_lead, position_in_consist) {
    0: sw_El_4000Series_CTA_headlight_stack;
    return sw_El_4000Series_CTA_rear;
}

switch(FEAT_TRAINS, SELF, sw_E1_4000Series_CTA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: sw_El_4000Series_CTA_headlight_and_marker_stack;
return sw_El_4000Series_CTA_lead;
}

item(FEAT_TRAINS, item_el_4000Series_CTA, 301) {
    property {
        /* Common properties */
        name: string(STR_NAME_EL_4000SERIES);
        climates_available: ALL_CLIMATES;
        introduction_date: date(1914, 01, 01);
        model_life:    40;
        vehicle_life: 40;
        reliability_decay: 20;
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit:                [PASS, TOUR];
        cargo_capacity: 80/param_capacity_mod;
        loading_speed: 20;
        /* Train-specific properties */
        sprite_id: SPRITE_ID_NEW_TRAIN; //enable new graphics
        speed: 35 mph;
        misc_flags: bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_AUTOREFIT, TRAIN_FLAG_SPRITE_STACK);
        refit_cost: 0;
        track_type:    SAA3;
        ai_special_flag: AI_FLAG_PASSENGER;
        running_cost_base: RUNNING_COST_ELECTRIC;
        engine_class: ENGINE_CLASS_ELECTRIC;
        power: 134 hp;
        weight: 24 ton;
        tractive_effort_coefficient: 0.3;
        length: 7;
        cost_factor:                     11;
        running_cost_factor:             4;
        loading_speed: 20;

        variant_group: item_el_4000Series;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_E1_4000Series_CTA_solo;
        can_attach_wagon    : sw_El_4000Series_attach;
        purchase: spriteset_El_4000Series_CTA_Purchase;
        additional_text: string(STR_ROLE_EL_4000SERIES);
    }
}

//4000 Series Brown Livery
spriteset(spriteset_El_4000Series_Brown_Purchase,   "gfx/El_4000Series_brown.png") {template_purchase(7, 21)}
spriteset(spriteset_El_4000Series_Brown,   "gfx/El_4000Series_brown.png") {template_7(7, 39)} // <- Define a wagon

// Headlight stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_Brown_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series_Brown;    // Return the base sprite
    1: return spriteset_El_4000Series_Headlights;    // Return the overlay
}

// Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_Brown_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series_Brown;    // Return the base sprite
    1: return spriteset_El_4000Series_Markerlights;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_El_4000Series_Brown_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_El_4000Series_Brown;    // Return the base sprite
    1: return spriteset_El_4000Series_Headlights;    // Return the headlight overlay
    return spriteset_El_4000Series_Markerlights; // Return the marker light overlay
}

/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_El_4000Series_Brown_rear, position_in_consist_from_end){
    0 : return sw_El_4000Series_Brown_markerlight_stack;
    return spriteset_El_4000Series_Brown;
}

switch (FEAT_TRAINS, SELF, sw_El_4000Series_Brown_lead, position_in_consist) {
    0: sw_El_4000Series_Brown_headlight_stack;
    return sw_El_4000Series_Brown_rear;
}

switch(FEAT_TRAINS, SELF, sw_E1_4000Series_Brown_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: sw_El_4000Series_Brown_headlight_and_marker_stack;
return sw_El_4000Series_Brown_lead;
}

item(FEAT_TRAINS, item_el_4000Series_Brown, 302) {
    property {
        /* Common properties */
        name: string(STR_NAME_EL_4000SERIES);
        climates_available: ALL_CLIMATES;
        introduction_date: date(1914, 01, 01);
        model_life:    40;
        vehicle_life: 40;
        reliability_decay: 20;
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit:                [PASS, TOUR];
        cargo_capacity: 80/param_capacity_mod;
        loading_speed: 20;
        /* Train-specific properties */
        sprite_id: SPRITE_ID_NEW_TRAIN; //enable new graphics
        speed: 35 mph;
        misc_flags: bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_AUTOREFIT, TRAIN_FLAG_SPRITE_STACK);
        refit_cost: 0;
        track_type:    SAA3;
        ai_special_flag: AI_FLAG_PASSENGER;
        running_cost_base: RUNNING_COST_ELECTRIC;
        engine_class: ENGINE_CLASS_ELECTRIC;
        power: 134 hp;
        weight: 24 ton;
        tractive_effort_coefficient: 0.3;
        length: 7;
        cost_factor:                     11;
        running_cost_factor:             4;
        loading_speed: 20;
        variant_group: item_el_4000Series;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_E1_4000Series_Brown_solo;
        can_attach_wagon    : sw_El_4000Series_attach;
        purchase: spriteset_El_4000Series_Brown_Purchase;
        additional_text: string(STR_ROLE_EL_4000SERIES);
    }
}


//MUDC/C-Type
spriteset(spriteset_MUDC_purchase,   "gfx/El_MUDC.png") {template_purchase(7, 21)}
spriteset(spriteset_MUDC_lead,   "gfx/El_MUDC.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_MUDC_rear,   "gfx/El_MUDC.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_MUDC_trailer,   "gfx/El_MUDC.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_MUDC_attach, vehicle_type_id){
    ITEM_El_MUDC        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_MUDC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_MUDC_rear;
    spriteset_MUDC_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_MUDC, 400 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_MUDC);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            40 mph;
        power:                            200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             2;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (88/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_MUDC_last;
        can_attach_wagon    :    sw_MUDC_attach;
        purchase:                        spriteset_MUDC_purchase;
        additional_text: string(STR_ROLE_MUDC);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_MUDC_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (88/param_capacity_mod);
        power:                            600;
        speed:                             40;
    }
}

//NYC Queens Car
spriteset(spriteset_Queen_purchase,   "gfx/El_Queen.png") {template_purchase(7, 21)}
spriteset(spriteset_Queen_lead,   "gfx/El_Queen.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Queen_rear,   "gfx/El_Queen.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Queen_trailer,   "gfx/El_Queen.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Queen_attach, vehicle_type_id){
    ITEM_El_Queen        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Queen_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Queen_rear;
    spriteset_Queen_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_Queen, 500 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_QUEEN);
        introduction_date:                date(1935,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         25 ton;
        speed:                            50 mph;
        power:                            200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             3;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (90/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_Queen_last;
        can_attach_wagon    :    sw_Queen_attach;
        purchase:                        spriteset_Queen_purchase;
        additional_text: string(STR_ROLE_QUEEN);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Queen_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (90/param_capacity_mod);
        power:                            120;
        speed:                             40;
    }
}

//NYC Queens Car
spriteset(spriteset_Queen_BMT_purchase,   "gfx/El_Queen_BMT.png") {template_purchase(7, 21)}
spriteset(spriteset_Queen_BMT_lead,   "gfx/El_Queen_BMT.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Queen_BMT_rear,   "gfx/El_Queen_BMT.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Queen_BMT_trailer,   "gfx/El_Queen_BMT.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Queen_BMT_attach, vehicle_type_id){
    ITEM_El_Queen       : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_Queen_BMT        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Queen_BMT_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Queen_BMT_rear;
    spriteset_Queen_BMT_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_Queen_BMT, 501 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_QUEEN);
        introduction_date:                date(1935,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         25 ton;
        speed:                            50 mph;
        power:                            200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             3;

        variant_group: ITEM_El_Queen;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (90/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_Queen_BMT_last;
        can_attach_wagon    :    sw_Queen_BMT_attach;
        purchase:                        spriteset_Queen_BMT_purchase;
        additional_text: string(STR_ROLE_QUEEN);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Queen_BMT_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (90/param_capacity_mod);
        power:                            120;
        speed:                             40;
    }
}

//CTA 5000 Series
//CC1 Livery
spriteset(spriteset_5000_purchase,   "gfx/El_5000.png") {template_purchase(7, 21)}
spriteset(spriteset_5000_lead,   "gfx/El_5000.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_5000_rear,   "gfx/El_5000.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_5000_trailer,   "gfx/El_5000.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_5000_attach, vehicle_type_id){
    ITEM_El_5000        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_5000_CRTC        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_5000_TwoTone        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_5000_RedandBlue        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_5000_RedandBlue2        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_5000_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_5000_rear;
    spriteset_5000_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_5000, 600 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_5000);
        introduction_date:                date(1947,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            75 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (85/param_capacity_mod);
        loading_speed: 15;

    }
    graphics {
        default:                        sw_5000_last;
        can_attach_wagon    :    sw_5000_attach;
        purchase:                        spriteset_5000_purchase;
        additional_text: string(STR_ROLE_5000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_5000_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 5000 Series
//CRTC Livery
spriteset(spriteset_5000_CRTC_purchase,   "gfx/El_5000_CRTC.png") {template_purchase(7, 21)}
spriteset(spriteset_5000_CRTC_lead,   "gfx/El_5000_CRTC.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_5000_CRTC_rear,   "gfx/El_5000_CRTC.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_5000_CRTC_trailer,   "gfx/El_5000_CRTC.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_5000_CRTC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_5000_CRTC_rear;
    spriteset_5000_CRTC_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_5000_CRTC, 601 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_5000);
        introduction_date:                date(1947,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            75 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_5000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (85/param_capacity_mod);
        loading_speed: 15;

    }
    graphics {
        default:                        sw_5000_CRTC_last;
        can_attach_wagon    :    sw_5000_attach;
        purchase:                        spriteset_5000_CRTC_purchase;
        additional_text: string(STR_ROLE_5000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_5000_CRTC_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 5000 Series
//Two Tone Livery
spriteset(spriteset_5000_TwoTone_purchase,   "gfx/El_5000_Twotone.png") {template_purchase(7, 21)}
spriteset(spriteset_5000_TwoTone_lead,   "gfx/El_5000_Twotone.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_5000_TwoTone_rear,   "gfx/El_5000_Twotone.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_5000_TwoTone_trailer,   "gfx/El_5000_Twotone.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_5000_TwoTone_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_5000_TwoTone_rear;
    spriteset_5000_TwoTone_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_5000_TwoTone, 602 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_5000);
        introduction_date:                date(1947,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            75 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_5000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (85/param_capacity_mod);
        loading_speed: 15;

    }
    graphics {
        default:                        sw_5000_TwoTone_last;
        can_attach_wagon    :    sw_5000_attach;
        purchase:                        spriteset_5000_TwoTone_purchase;
        additional_text: string(STR_ROLE_5000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_5000_TwoTone_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}


//CTA 5000 Series
//Red and Blue Livery
spriteset(spriteset_5000_RedandBlue_purchase,   "gfx/El_5000_Red&Blue.png") {template_purchase(7, 21)}
spriteset(spriteset_5000_RedandBlue_lead,   "gfx/El_5000_Red&Blue.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_5000_RedandBlue_rear,   "gfx/El_5000_Red&Blue.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_5000_RedandBlue_trailer,   "gfx/El_5000_Red&Blue.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_5000_RedandBlue_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_5000_RedandBlue_rear;
    spriteset_5000_RedandBlue_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_5000_RedandBlue, 603 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_5000);
        introduction_date:                date(1947,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            75 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_5000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (85/param_capacity_mod);
        loading_speed: 15;

    }
    graphics {
        default:                        sw_5000_RedandBlue_last;
        can_attach_wagon    :    sw_5000_attach;
        purchase:                        spriteset_5000_RedandBlue_purchase;
        additional_text: string(STR_ROLE_5000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_5000_RedandBlue_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 5000 Series
//2nd Red and Blue Livery
spriteset(spriteset_5000_RedandBlue2_purchase,   "gfx/El_5000_Red&Blue2.png") {template_purchase(7, 21)}
spriteset(spriteset_5000_RedandBlue2_lead,   "gfx/El_5000_Red&Blue2.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_5000_RedandBlue2_rear,   "gfx/El_5000_Red&Blue2.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_5000_RedandBlue2_trailer,   "gfx/El_5000_Red&Blue2.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_5000_RedandBlue2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_5000_RedandBlue2_rear;
    spriteset_5000_RedandBlue2_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_5000_RedandBlue2, 604 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_5000);
        introduction_date:                date(1947,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            75 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_5000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (85/param_capacity_mod);
        loading_speed: 15;

    }
    graphics {
        default:                        sw_5000_RedandBlue2_last;
        can_attach_wagon    :    sw_5000_attach;
        purchase:                        spriteset_5000_RedandBlue2_purchase;
        additional_text: string(STR_ROLE_5000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_5000_RedandBlue2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 6000 Series
spriteset(spriteset_6000_purchase,   "gfx/El_6000.png") {template_purchase(7, 21)}
spriteset(spriteset_6000_lead,   "gfx/El_6000.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_6000_rear,   "gfx/El_6000.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_6000_trailer,   "gfx/El_6000.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_6000_attach, vehicle_type_id){
    ITEM_El_6000        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_6000_Croydon        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_6000_TwoTone        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_6000_RedandBlue       : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_6000_RedandBlue2        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_6000_SEPTA        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_6000_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_6000_rear;
    spriteset_6000_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_6000, 700 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_6000);
        introduction_date:                date(1952,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             4;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (95/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_6000_last;
        can_attach_wagon    :    sw_6000_attach;
        purchase:                        spriteset_6000_purchase;
        additional_text: string(STR_ROLE_6000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_6000_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (95/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 6000 Series
//Croydon Livery
spriteset(spriteset_6000_Croydon_purchase,   "gfx/El_6000_Croydon.png") {template_purchase(7, 21)}
spriteset(spriteset_6000_Croydon_lead,   "gfx/El_6000_Croydon.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_6000_Croydon_rear,   "gfx/El_6000_Croydon.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_6000_Croydon_trailer,   "gfx/El_6000_Croydon.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_6000_Croydon_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_6000_Croydon_rear;
    spriteset_6000_Croydon_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_6000_Croydon, 701 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_6000);
        introduction_date:                date(1952,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             4;

        variant_group: ITEM_El_6000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (95/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_6000_Croydon_last;
        can_attach_wagon    :    sw_6000_attach;
        purchase:                        spriteset_6000_Croydon_purchase;
        additional_text: string(STR_ROLE_6000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_6000_Croydon_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (95/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 6000 Series
//TwoTone Livery
spriteset(spriteset_6000_TwoTone_purchase,   "gfx/El_6000_TwoTone.png") {template_purchase(7, 21)}
spriteset(spriteset_6000_TwoTone_lead,   "gfx/El_6000_TwoTone.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_6000_TwoTone_rear,   "gfx/El_6000_TwoTone.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_6000_TwoTone_trailer,   "gfx/El_6000_TwoTone.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_6000_TwoTone_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_6000_TwoTone_rear;
    spriteset_6000_TwoTone_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_6000_TwoTone, 702 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_6000);
        introduction_date:                date(1952,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             4;

        variant_group: ITEM_El_6000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (95/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_6000_TwoTone_last;
        can_attach_wagon    :    sw_6000_attach;
        purchase:                        spriteset_6000_TwoTone_purchase;
        additional_text: string(STR_ROLE_6000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_6000_TwoTone_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (95/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 6000 Series
//RedandBlue Livery
spriteset(spriteset_6000_RedandBlue_purchase,   "gfx/El_6000_RedandBlue.png") {template_purchase(7, 21)}
spriteset(spriteset_6000_RedandBlue_lead,   "gfx/El_6000_RedandBlue.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_6000_RedandBlue_rear,   "gfx/El_6000_RedandBlue.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_6000_RedandBlue_trailer,   "gfx/El_6000_RedandBlue.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_6000_RedandBlue_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_6000_RedandBlue_rear;
    spriteset_6000_RedandBlue_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_6000_RedandBlue, 703 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_6000);
        introduction_date:                date(1952,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             4;

        variant_group: ITEM_El_6000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (95/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_6000_RedandBlue_last;
        can_attach_wagon    :    sw_6000_attach;
        purchase:                        spriteset_6000_RedandBlue_purchase;
        additional_text: string(STR_ROLE_6000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_6000_RedandBlue_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (95/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 6000 Series
//RedandBlue2 Livery
spriteset(spriteset_6000_RedandBlue2_purchase,   "gfx/El_6000_RedandBlue2.png") {template_purchase(7, 21)}
spriteset(spriteset_6000_RedandBlue2_lead,   "gfx/El_6000_RedandBlue2.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_6000_RedandBlue2_rear,   "gfx/El_6000_RedandBlue2.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_6000_RedandBlue2_trailer,   "gfx/El_6000_RedandBlue2.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_6000_RedandBlue2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_6000_RedandBlue2_rear;
    spriteset_6000_RedandBlue2_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_6000_RedandBlue2, 704 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_6000);
        introduction_date:                date(1952,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             4;

        variant_group: ITEM_El_6000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (95/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_6000_RedandBlue2_last;
        can_attach_wagon    :    sw_6000_attach;
        purchase:                        spriteset_6000_RedandBlue2_purchase;
        additional_text: string(STR_ROLE_6000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_6000_RedandBlue2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (95/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}

//CTA 6000 Series
//SEPTA Livery
spriteset(spriteset_6000_SEPTA_purchase,   "gfx/El_6000_SEPTA.png") {template_purchase(7, 21)}
spriteset(spriteset_6000_SEPTA_lead,   "gfx/El_6000_SEPTA.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_6000_SEPTA_rear,   "gfx/El_6000_SEPTA.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_6000_SEPTA_trailer,   "gfx/El_6000_SEPTA.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_6000_SEPTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_6000_SEPTA_rear;
    spriteset_6000_SEPTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_6000_SEPTA, 705 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_6000);
        introduction_date:                date(1952,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            440 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             4;

        variant_group: ITEM_El_6000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (95/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_6000_SEPTA_last;
        can_attach_wagon    :    sw_6000_attach;
        purchase:                        spriteset_6000_SEPTA_purchase;
        additional_text: string(STR_ROLE_6000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_6000_SEPTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (95/param_capacity_mod);
        power:                            220;
        speed:                             40;
    }
}



//CTA 2000 Series
spriteset(spriteset_2000_purchase,   "gfx/El_2000.png") {template_purchase(7, 21)}
spriteset(spriteset_2000_lead,   "gfx/El_2000.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2000_rear,   "gfx/El_2000.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2000_trailer,   "gfx/El_2000.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2000_attach, vehicle_type_id){
    ITEM_El_2000        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2000_TwoTone        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2000_RedandBlue        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2000_RedandBlue2        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2000_Dark        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_2000_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2000_rear;
    spriteset_2000_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2000, 800 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2000);
        introduction_date:                date(1964,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             4;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (98/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2000_last;
        can_attach_wagon    :    sw_2000_attach;
        purchase:                        spriteset_2000_purchase;
        additional_text: string(STR_ROLE_2000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2000_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            400;
        speed:                             40;
    }
}

//CTA 2000 Series
//TwoTone
spriteset(spriteset_2000_TwoTone_purchase,   "gfx/El_2000_TwoTone.png") {template_purchase(7, 21)}
spriteset(spriteset_2000_TwoTone_lead,   "gfx/El_2000_TwoTone.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2000_TwoTone_rear,   "gfx/El_2000_TwoTone.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2000_TwoTone_trailer,   "gfx/El_2000_TwoTone.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2000_TwoTone_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2000_TwoTone_rear;
    spriteset_2000_TwoTone_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2000_TwoTone, 801 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2000);
        introduction_date:                date(1964,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             4;

        variant_group: ITEM_El_2000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (98/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2000_TwoTone_last;
        can_attach_wagon    :    sw_2000_attach;
        purchase:                        spriteset_2000_TwoTone_purchase;
        additional_text: string(STR_ROLE_2000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2000_TwoTone_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            400;
        speed:                             40;
    }
}

//CTA 2000 Series
//RedandBlue
spriteset(spriteset_2000_RedandBlue_purchase,   "gfx/El_2000_RedandBlue.png") {template_purchase(7, 21)}
spriteset(spriteset_2000_RedandBlue_lead,   "gfx/El_2000_RedandBlue.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2000_RedandBlue_rear,   "gfx/El_2000_RedandBlue.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2000_RedandBlue_trailer,   "gfx/El_2000_RedandBlue.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2000_RedandBlue_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2000_RedandBlue_rear;
    spriteset_2000_RedandBlue_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2000_RedandBlue, 802 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2000);
        introduction_date:                date(1964,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             4;

        variant_group: ITEM_El_2000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (98/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2000_RedandBlue_last;
        can_attach_wagon    :    sw_2000_attach;
        purchase:                        spriteset_2000_RedandBlue_purchase;
        additional_text: string(STR_ROLE_2000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2000_RedandBlue_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            400;
        speed:                             40;
    }
}

//CTA 2000 Series
//RedandBlue
spriteset(spriteset_2000_RedandBlue2_purchase,   "gfx/El_2000_RedandBlue2.png") {template_purchase(7, 21)}
spriteset(spriteset_2000_RedandBlue2_lead,   "gfx/El_2000_RedandBlue2.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2000_RedandBlue2_rear,   "gfx/El_2000_RedandBlue2.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2000_RedandBlue2_trailer,   "gfx/El_2000_RedandBlue2.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2000_RedandBlue2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2000_RedandBlue2_rear;
    spriteset_2000_RedandBlue2_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2000_RedandBlue2, 803 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2000);
        introduction_date:                date(1964,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             4;

        variant_group: ITEM_El_2000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (98/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2000_RedandBlue2_last;
        can_attach_wagon    :    sw_2000_attach;
        purchase:                        spriteset_2000_RedandBlue2_purchase;
        additional_text: string(STR_ROLE_2000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2000_RedandBlue2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            400;
        speed:                             40;
    }
}

//CTA 2000 Series
//Dark
spriteset(spriteset_2000_Dark_purchase,   "gfx/El_2000_Dark.png") {template_purchase(7, 21)}
spriteset(spriteset_2000_Dark_lead,   "gfx/El_2000_Dark.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2000_Dark_rear,   "gfx/El_2000_Dark.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2000_Dark_trailer,   "gfx/El_2000_Dark.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2000_Dark_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2000_Dark_rear;
    spriteset_2000_Dark_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2000_Dark, 804 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2000);
        introduction_date:                date(1964,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            50 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             4;

        variant_group: ITEM_El_2000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (98/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2000_Dark_last;
        can_attach_wagon    :    sw_2000_attach;
        purchase:                        spriteset_2000_Dark_purchase;
        additional_text: string(STR_ROLE_2000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2000_Dark_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            400;
        speed:                             40;
    }
}

//CTA 2300 Series
//CC1
spriteset(spriteset_2300_purchase,   "gfx/El_2300.png") {template_purchase(7, 21)}
spriteset(spriteset_2300_lead,   "gfx/El_2300.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2300_rear,   "gfx/El_2300.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2300_trailer,   "gfx/El_2300.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2300_attach, vehicle_type_id){
    ITEM_El_2300        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2300_Silver        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2300_Early        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2300_RedandBlue        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2300_RedandBlue2        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2300_CTA        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_2300_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2300_rear;
    spriteset_2300_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2300, 900 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2300);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         21 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             5;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2300_last;
        can_attach_wagon    :    sw_2300_attach;
        purchase:                        spriteset_2300_purchase;
        additional_text: string(STR_ROLE_2300);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2300_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2300 Series
//Silver
spriteset(spriteset_2300_Silver_purchase,   "gfx/El_2300_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_2300_Silver_lead,   "gfx/El_2300_Silver.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2300_Silver_rear,   "gfx/El_2300_Silver.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2300_Silver_trailer,   "gfx/El_2300_Silver.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2300_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2300_Silver_rear;
    spriteset_2300_Silver_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2300_Silver, 901 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2300);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         21 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             5;

        variant_group: ITEM_El_2300;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2300_Silver_last;
        can_attach_wagon    :    sw_2300_attach;
        purchase:                        spriteset_2300_Silver_purchase;
        additional_text: string(STR_ROLE_2300);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2300_Silver_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2300 Series
//Early
spriteset(spriteset_2300_Early_purchase,   "gfx/El_2300_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_2300_Early_lead,   "gfx/El_2300_Early.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2300_Early_rear,   "gfx/El_2300_Early.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2300_Early_trailer,   "gfx/El_2300_Early.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2300_Early_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2300_Early_rear;
    spriteset_2300_Early_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2300_Early, 902 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2300);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         21 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             5;

        variant_group: ITEM_El_2300;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2300_Early_last;
        can_attach_wagon    :    sw_2300_attach;
        purchase:                        spriteset_2300_Early_purchase;
        additional_text: string(STR_ROLE_2300);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2300_Early_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2300 Series
//Red and Blue
spriteset(spriteset_2300_RedandBlue_purchase,   "gfx/El_2300_RedandBlue.png") {template_purchase(7, 21)}
spriteset(spriteset_2300_RedandBlue_lead,   "gfx/El_2300_RedandBlue.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2300_RedandBlue_rear,   "gfx/El_2300_RedandBlue.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2300_RedandBlue_trailer,   "gfx/El_2300_RedandBlue.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2300_RedandBlue_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2300_RedandBlue_rear;
    spriteset_2300_RedandBlue_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2300_RedandBlue, 903 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2300);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         21 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             5;

        variant_group: ITEM_El_2300;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2300_RedandBlue_last;
        can_attach_wagon    :    sw_2300_attach;
        purchase:                        spriteset_2300_RedandBlue_purchase;
        additional_text: string(STR_ROLE_2300);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2300_RedandBlue_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2300 Series
//Red and Blue 2
spriteset(spriteset_2300_RedandBlue2_purchase,   "gfx/El_2300_RedandBlue2.png") {template_purchase(7, 21)}
spriteset(spriteset_2300_RedandBlue2_lead,   "gfx/El_2300_RedandBlue2.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2300_RedandBlue2_rear,   "gfx/El_2300_RedandBlue2.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2300_RedandBlue2_trailer,   "gfx/El_2300_RedandBlue2.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2300_RedandBlue2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2300_RedandBlue2_rear;
    spriteset_2300_RedandBlue2_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2300_RedandBlue2, 904 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2300);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         21 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             5;

        variant_group: ITEM_El_2300;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2300_RedandBlue2_last;
        can_attach_wagon    :    sw_2300_attach;
        purchase:                        spriteset_2300_RedandBlue2_purchase;
        additional_text: string(STR_ROLE_2300);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2300_RedandBlue2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2300 Series
//CTA
spriteset(spriteset_2300_CTA_purchase,   "gfx/El_2300_CTA.png") {template_purchase(7, 21)}
spriteset(spriteset_2300_CTA_lead,   "gfx/El_2300_CTA.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2300_CTA_rear,   "gfx/El_2300_CTA.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2300_CTA_trailer,   "gfx/El_2300_CTA.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2300_CTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2300_CTA_rear;
    spriteset_2300_CTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2300_CTA, 905 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2300);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         21 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             5;

        variant_group: ITEM_El_2300;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2300_CTA_last;
        can_attach_wagon    :    sw_2300_attach;
        purchase:                        spriteset_2300_CTA_purchase;
        additional_text: string(STR_ROLE_2300);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2300_CTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2600 Series
//CC1 Livery
spriteset(spriteset_2600_purchase,   "gfx/El_2600.png") {template_purchase(7, 21)}
spriteset(spriteset_2600_lead,   "gfx/El_2600.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2600_rear,   "gfx/El_2600.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2600_trailer,   "gfx/El_2600.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2600_attach, vehicle_type_id){
    ITEM_El_2600        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2600_RedandBlue        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_2600_CTA        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_2600_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2600_rear;
    spriteset_2600_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2600, 1000 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2600);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         24 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             5;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (108/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2600_last;
        can_attach_wagon    :    sw_2600_attach;
        purchase:                        spriteset_2600_purchase;
        additional_text: string(STR_ROLE_2600);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2600_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2600 Series
//RedandBlue Livery
spriteset(spriteset_2600_RedandBlue_purchase,   "gfx/El_2600_RedandBlue.png") {template_purchase(7, 21)}
spriteset(spriteset_2600_RedandBlue_lead,   "gfx/El_2600_RedandBlue.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2600_RedandBlue_rear,   "gfx/El_2600_RedandBlue.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2600_RedandBlue_trailer,   "gfx/El_2600_RedandBlue.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2600_RedandBlue_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2600_RedandBlue_rear;
    spriteset_2600_RedandBlue_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2600_RedandBlue, 1001 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2600);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         24 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             5;

        variant_group: ITEM_El_2600;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (108/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2600_RedandBlue_last;
        can_attach_wagon    :    sw_2600_attach;
        purchase:                        spriteset_2600_RedandBlue_purchase;
        additional_text: string(STR_ROLE_2600);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2600_RedandBlue_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 2600 Series
//CTA Livery
spriteset(spriteset_2600_CTA_purchase,   "gfx/El_2600_CTA.png") {template_purchase(7, 21)}
spriteset(spriteset_2600_CTA_lead,   "gfx/El_2600_CTA.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_2600_CTA_rear,   "gfx/El_2600_CTA.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_2600_CTA_trailer,   "gfx/El_2600_CTA.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_2600_CTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_2600_CTA_rear;
    spriteset_2600_CTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_2600_CTA, 1002 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_2600);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         24 ton;
        speed:                            55 mph;
        power:                            880 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             5;

        variant_group: ITEM_El_2600;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (108/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_2600_CTA_last;
        can_attach_wagon    :    sw_2600_attach;
        purchase:                        spriteset_2600_CTA_purchase;
        additional_text: string(STR_ROLE_2600);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_2600_CTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//Budd UTVS Series
//CC1
spriteset(spriteset_UTVS_purchase,   "gfx/El_UTVS.png") {template_purchase(7, 21)}
spriteset(spriteset_UTVS_lead,   "gfx/El_UTVS.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_UTVS_rear,   "gfx/El_UTVS.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_UTVS_trailer,   "gfx/El_UTVS.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_UTVS_attach, vehicle_type_id){
    ITEM_El_UTVS        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_UTVS_Miami        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_UTVS_Baltimore        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_UTVS_SCTD        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_UTVS_LAMetro        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_UTVS_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_UTVS_rear;
    spriteset_UTVS_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_UTVS, 1100 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_UTVS);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         29 ton;
        speed:                            70 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (115/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_UTVS_last;
        can_attach_wagon    :    sw_UTVS_attach;
        purchase:                        spriteset_UTVS_purchase;
        additional_text: string(STR_ROLE_UTVS);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_UTVS_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (115/param_capacity_mod);
        power:                            450;
        speed:                             40;
    }
}

//Budd UTVS Series
//Miami
spriteset(spriteset_UTVS_Miami_purchase,   "gfx/El_UTVS_Miami.png") {template_purchase(7, 21)}
spriteset(spriteset_UTVS_Miami_lead,   "gfx/El_UTVS_Miami.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_UTVS_Miami_rear,   "gfx/El_UTVS_Miami.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_UTVS_Miami_trailer,   "gfx/El_UTVS_Miami.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_UTVS_Miami_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_UTVS_Miami_rear;
    spriteset_UTVS_Miami_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_UTVS_Miami, 1101 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_UTVS);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         29 ton;
        speed:                            70 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_UTVS;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (115/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_UTVS_Miami_last;
        can_attach_wagon    :    sw_UTVS_attach;
        purchase:                        spriteset_UTVS_Miami_purchase;
        additional_text: string(STR_ROLE_UTVS);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_UTVS_Miami_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (115/param_capacity_mod);
        power:                            450;
        speed:                             40;
    }
}

//Budd UTVS Series
//Baltimore
spriteset(spriteset_UTVS_Baltimore_purchase,   "gfx/El_UTVS_Baltimore.png") {template_purchase(7, 21)}
spriteset(spriteset_UTVS_Baltimore_lead,   "gfx/El_UTVS_Baltimore.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_UTVS_Baltimore_rear,   "gfx/El_UTVS_Baltimore.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_UTVS_Baltimore_trailer,   "gfx/El_UTVS_Baltimore.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_UTVS_Baltimore_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_UTVS_Baltimore_rear;
    spriteset_UTVS_Baltimore_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_UTVS_Baltimore, 1102 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_UTVS);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         29 ton;
        speed:                            70 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_UTVS;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (115/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_UTVS_Baltimore_last;
        can_attach_wagon    :    sw_UTVS_attach;
        purchase:                        spriteset_UTVS_Baltimore_purchase;
        additional_text: string(STR_ROLE_UTVS);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_UTVS_Baltimore_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (115/param_capacity_mod);
        power:                            450;
        speed:                             40;
    }
}

//Budd UTVS Series
//SCTD
spriteset(spriteset_UTVS_SCTD_purchase,   "gfx/El_UTVS_SCTD.png") {template_purchase(7, 21)}
spriteset(spriteset_UTVS_SCTD_lead,   "gfx/El_UTVS_SCTD.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_UTVS_SCTD_rear,   "gfx/El_UTVS_SCTD.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_UTVS_SCTD_trailer,   "gfx/El_UTVS_SCTD.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_UTVS_SCTD_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_UTVS_SCTD_rear;
    spriteset_UTVS_SCTD_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_UTVS_SCTD, 1103 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_UTVS);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         29 ton;
        speed:                            70 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_UTVS;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (115/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_UTVS_SCTD_last;
        can_attach_wagon    :    sw_UTVS_attach;
        purchase:                        spriteset_UTVS_SCTD_purchase;
        additional_text: string(STR_ROLE_UTVS);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_UTVS_SCTD_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (115/param_capacity_mod);
        power:                            450;
        speed:                             40;
    }
}

//Budd UTVS Series
//LA Metro
spriteset(spriteset_UTVS_LAMetro_purchase,   "gfx/El_UTVS_LAMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_UTVS_LAMetro_lead,   "gfx/El_UTVS_LAMetro.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_UTVS_LAMetro_rear,   "gfx/El_UTVS_LAMetro.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_UTVS_LAMetro_trailer,   "gfx/El_UTVS_LAMetro.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_UTVS_LAMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_UTVS_LAMetro_rear;
    spriteset_UTVS_LAMetro_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_UTVS_LAMetro, 1104 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_UTVS);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         29 ton;
        speed:                            70 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             5;

        variant_group: ITEM_El_UTVS;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (115/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_UTVS_LAMetro_last;
        can_attach_wagon    :    sw_UTVS_attach;
        purchase:                        spriteset_UTVS_LAMetro_purchase;
        additional_text: string(STR_ROLE_UTVS);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_UTVS_LAMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (115/param_capacity_mod);
        power:                            450;
        speed:                             40;
    }
}

//CTA 4200 Series
//CC1
spriteset(spriteset_4200_purchase,   "gfx/El_4200.png") {template_purchase(7, 21)}
spriteset(spriteset_4200_lead,   "gfx/El_4200.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_4200_rear,   "gfx/El_4200.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_4200_trailer,   "gfx/El_4200.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_4200_attach, vehicle_type_id){
    ITEM_El_4200        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_4200_RedandBlue        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_4200_CTA        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_4200_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_4200_rear;
    spriteset_4200_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_4200, 1200 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_4200);
        introduction_date:                date(2009,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         26 ton;
        speed:                            70 mph;
        power:                            1048 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (123/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_4200_last;
        can_attach_wagon    :    sw_4200_attach;
        purchase:                        spriteset_4200_purchase;
        additional_text: string(STR_ROLE_4200);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_4200_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (123/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 4200 Series
//RedandBlue
spriteset(spriteset_4200_RedandBlue_purchase,   "gfx/El_4200_RedandBlue.png") {template_purchase(7, 21)}
spriteset(spriteset_4200_RedandBlue_lead,   "gfx/El_4200_RedandBlue.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_4200_RedandBlue_rear,   "gfx/El_4200_RedandBlue.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_4200_RedandBlue_trailer,   "gfx/El_4200_RedandBlue.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_4200_RedandBlue_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_4200_RedandBlue_rear;
    spriteset_4200_RedandBlue_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_4200_RedandBlue, 1201 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_4200);
        introduction_date:                date(2009,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         26 ton;
        speed:                            70 mph;
        power:                            1048 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             6;

        variant_group: ITEM_El_4200;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (123/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_4200_RedandBlue_last;
        can_attach_wagon    :    sw_4200_attach;
        purchase:                        spriteset_4200_RedandBlue_purchase;
        additional_text: string(STR_ROLE_4200);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_4200_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (123/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//CTA 4200 Series
//CTA
spriteset(spriteset_4200_CTA_purchase,   "gfx/El_4200_CTA.png") {template_purchase(7, 21)}
spriteset(spriteset_4200_CTA_lead,   "gfx/El_4200_CTA.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_4200_CTA_rear,   "gfx/El_4200_CTA.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_4200_CTA_trailer,   "gfx/El_4200_CTA.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_4200_CTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_4200_CTA_rear;
    spriteset_4200_CTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_4200_CTA, 1202 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_4200);
        introduction_date:                date(2009,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         26 ton;
        speed:                            70 mph;
        power:                            1048 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             6;

        variant_group: ITEM_El_4200;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (123/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_4200_CTA_last;
        can_attach_wagon    :    sw_4200_attach;
        purchase:                        spriteset_4200_CTA_purchase;
        additional_text: string(STR_ROLE_4200);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_4200_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (123/param_capacity_mod);
        power:                            440;
        speed:                             40;
    }
}

//Miami Metrorail
//CC1
spriteset(spriteset_MiamiMetrorail_purchase,   "gfx/El_MiamiMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_MiamiMetrorail_lead,   "gfx/El_MiamiMetro.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_MiamiMetrorail_rear,   "gfx/El_MiamiMetro.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_MiamiMetrorail_trailer,   "gfx/El_MiamiMetro.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_MiamiMetrorail_attach, vehicle_type_id){
    ITEM_El_MiamiMetrorail        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_MiamiMetrorail_Miami        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_MiamiMetrorail_LAMetro        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_MiamiMetrorail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_MiamiMetrorail_rear;
    spriteset_MiamiMetrorail_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_MiamiMetrorail, 1300 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_MIAMIMETRORAIL);
        introduction_date:                date(2017,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            70 mph;
        power:                            1080 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (128/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_MiamiMetrorail_last;
        can_attach_wagon    :    sw_MiamiMetrorail_attach;
        purchase:                        spriteset_MiamiMetrorail_purchase;
        additional_text: string(STR_ROLE_MIAMIMETRORAIL);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_MiamiMetrorail_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (128/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

//Miami Metrorail
//Miami Metro
spriteset(spriteset_MiamiMetrorail_Miami_purchase,   "gfx/El_MiamiMetro_Miami.png") {template_purchase(7, 21)}
spriteset(spriteset_MiamiMetrorail_Miami_lead,   "gfx/El_MiamiMetro_Miami.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_MiamiMetrorail_Miami_rear,   "gfx/El_MiamiMetro_Miami.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_MiamiMetrorail_Miami_trailer,   "gfx/El_MiamiMetro_Miami.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_MiamiMetrorail_Miami_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_MiamiMetrorail_Miami_rear;
    spriteset_MiamiMetrorail_Miami_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_MiamiMetrorail_Miami, 1301 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_MIAMIMETRORAIL);
        introduction_date:                date(2017,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            70 mph;
        power:                            1080 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             6;

        variant_group: ITEM_El_MiamiMetrorail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (128/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_MiamiMetrorail_Miami_last;
        can_attach_wagon    :    sw_MiamiMetrorail_attach;
        purchase:                        spriteset_MiamiMetrorail_Miami_purchase;
        additional_text: string(STR_ROLE_MIAMIMETRORAIL);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_MiamiMetrorail_Miami_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (128/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

//Miami Metrorail
//LaMetro
spriteset(spriteset_MiamiMetrorail_LAMetro_purchase,   "gfx/El_MiamiMetro_LAMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_MiamiMetrorail_LAMetro_lead,   "gfx/El_MiamiMetro_LAMetro.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_MiamiMetrorail_LAMetro_rear,   "gfx/El_MiamiMetro_LAMetro.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_MiamiMetrorail_LAMetro_trailer,   "gfx/El_MiamiMetro_LAMetro.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_MiamiMetrorail_LAMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_MiamiMetrorail_LAMetro_rear;
    spriteset_MiamiMetrorail_LAMetro_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_MiamiMetrorail_LAMetro, 1302 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_MIAMIMETRORAIL);
        introduction_date:                date(2017,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            70 mph;
        power:                            1080 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             6;

        variant_group: ITEM_El_MiamiMetrorail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (128/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_MiamiMetrorail_LAMetro_last;
        can_attach_wagon    :    sw_MiamiMetrorail_attach;
        purchase:                        spriteset_MiamiMetrorail_LAMetro_purchase;
        additional_text: string(STR_ROLE_MIAMIMETRORAIL);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_MiamiMetrorail_LAMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (128/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

//7000
spriteset(spriteset_7000_purchase,   "gfx/El_7000.png") {template_purchase(7, 21)}
spriteset(spriteset_7000_lead,   "gfx/El_7000.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_7000_rear,   "gfx/El_7000.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_7000_trailer,   "gfx/El_7000.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_7000_attach, vehicle_type_id){
    ITEM_El_7000       : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_El_7000_CTA       : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_7000_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_7000_rear;
    spriteset_7000_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_7000, 1400 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_7000);
        introduction_date:                date(2021,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            70 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (140/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_7000_last;
        can_attach_wagon    :    sw_7000_attach;
        purchase:                        spriteset_7000_purchase;
        additional_text: string(STR_ROLE_7000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_7000_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (140/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

//7000 Series
//CTA
spriteset(spriteset_7000_CTA_purchase,   "gfx/El_7000_CTA.png") {template_purchase(7, 21)}
spriteset(spriteset_7000_CTA_lead,   "gfx/El_7000_CTA.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_7000_CTA_rear,   "gfx/El_7000_CTA.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_7000_CTA_trailer,   "gfx/El_7000_CTA.png") {template_7(7, 89)}

switch(FEAT_TRAINS, SELF, sw_7000_CTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_7000_CTA_rear;
    spriteset_7000_CTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_7000_CTA, 1401 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_7000);
        introduction_date:                date(2021,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         28 ton;
        speed:                            70 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;

        variant_group: ITEM_El_7000;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (140/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_7000_CTA_last;
        can_attach_wagon    :    sw_7000_attach;
        purchase:                        spriteset_7000_CTA_purchase;
        additional_text: string(STR_ROLE_7000);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_7000_CTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (140/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

//M5
spriteset(spriteset_M5_purchase,   "gfx/El_M5.png") {template_purchase(7, 21)}
spriteset(spriteset_M5_lead,   "gfx/El_M5.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_M5_rear,   "gfx/El_M5.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_M5_trailer,   "gfx/El_M5.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_M5_attach, vehicle_type_id){
    ITEM_El_M5       : return CB_RESULT_ATTACH_ALLOW  ;
	ITEM_El_M5_SEPTA       : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_M5_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_M5_rear;
    spriteset_M5_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_M5, 1420 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_M5);
        introduction_date:                date(2029,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         24 ton;
        speed:                            70 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;
		
		//variant_group: ITEM_El_M5;
        //extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (140/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_M5_last;
        can_attach_wagon    :    sw_M5_attach;
        purchase:                        spriteset_M5_purchase;
        additional_text: string(STR_ROLE_M5);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_M5_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (140/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

//M5_SEPTA
spriteset(spriteset_M5_SEPTA_purchase,   "gfx/El_M5_SEPTA.png") {template_purchase(7, 21)}
spriteset(spriteset_M5_SEPTA_lead,   "gfx/El_M5_SEPTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_M5_SEPTA_rear,   "gfx/El_M5_SEPTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_M5_SEPTA_trailer,   "gfx/El_M5_SEPTA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_M5_SEPTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_M5_SEPTA_rear;
    spriteset_M5_SEPTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_El_M5_SEPTA, 1421 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_M5);
        introduction_date:                date(2029,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         24 ton;
        speed:                            70 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;
		
		variant_group: ITEM_El_M5;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (140/param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_M5_SEPTA_last;
        can_attach_wagon    :    sw_M5_attach;
        purchase:                        spriteset_M5_SEPTA_purchase;
        additional_text: string(STR_ROLE_M5);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_M5_SEPTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            7;
        cargo_capacity:                   (140/param_capacity_mod);
        power:                            540;
        speed:                             40;
    }
}

///////////////
//Subway Cars//
///////////////

// Subway Composite Car
// 1cc sprite
spriteset(spriteset_Subway_HiV_Purchase,   "gfx/Subway_Hi-V.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HiV,   "gfx/Subway_Hi-V.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_Subway_HiV_Headlights,   "gfx/Subway_Hi-V_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_Subway_HiV_Markerlights,   "gfx/Subway_Hi-V_Markerlights.png") {template_8(7, 39)} // <- Define markerlights

switch(FEAT_TRAINS, SELF, sw_Subway_HiV_attach, vehicle_type_id){
    item_Subway_HiV      : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// Headlight stacker
switch (FEAT_TRAINS, SELF, sw_Subway_HiV_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_Subway_HiV;    // Return the base sprite
    1: return spriteset_Subway_HiV_Headlights;    // Return the overlay
}

// Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_Subway_HiV_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_Subway_HiV;    // Return the base sprite
    1: return spriteset_Subway_HiV_Markerlights;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_Subway_HiV_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return spriteset_Subway_HiV;    // Return the base sprite
    1: return spriteset_Subway_HiV_Headlights;    // Return the headlight overlay
    return spriteset_Subway_HiV_Markerlights; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_Subway_HiV_rear, position_in_consist_from_end){
    0 : return sw_Subway_HiV_markerlight_stack;
    return spriteset_Subway_HiV;
}

switch (FEAT_TRAINS, SELF, sw_Subway_HiV_lead, position_in_consist) {
    0: sw_Subway_HiV_headlight_stack;
    return sw_Subway_HiV_rear;
}

switch(FEAT_TRAINS, SELF, sw_Subway_HiV_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: sw_Subway_HiV_headlight_and_marker_stack;
return sw_Subway_HiV_lead;
}

item(FEAT_TRAINS, item_Subway_HiV, 5000) {
    property {
        /* Common properties */
        name: string(STR_NAME_SUBWAY_HIV);
        climates_available: ALL_CLIMATES;
        introduction_date: date(1904, 01, 01);
        model_life:    40;
        vehicle_life: 40;
        reliability_decay: 20;
        refittable_cargo_classes: bitmask(CC_PASSENGERS);
        cargo_allow_refit:                [PASS, TOUR];
        cargo_capacity: 90/param_capacity_mod;
        loading_speed: 20;
        /* Train-specific properties */
        sprite_id: SPRITE_ID_NEW_TRAIN; //enable new graphics
        speed: 35 mph;
        misc_flags: bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_MU, TRAIN_FLAG_AUTOREFIT, TRAIN_FLAG_SPRITE_STACK);
        refit_cost: 0;
        track_type:    SAA3;
        ai_special_flag: AI_FLAG_PASSENGER;
        running_cost_base: RUNNING_COST_ELECTRIC;
        engine_class: ENGINE_CLASS_ELECTRIC;
        power: 200 hp;
        weight: 27 ton;
        tractive_effort_coefficient: 0.3;
        length: 8;
        cost_factor:                     11;
        running_cost_factor:             4;
        loading_speed: 40;
    }
    graphics {
        default: sw_Subway_HiV_solo;
        can_attach_wagon    : sw_Subway_HiV_attach;
        purchase: spriteset_Subway_HiV_Purchase;
        additional_text: string(STR_ROLE_SUBWAY_HIV);
    }
}

//AB Standard
//CC1
spriteset(spriteset_Subway_ABStandard_purchase,   "gfx/Subway_ABStandard.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_ABStandard_lead,   "gfx/Subway_ABStandard.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_ABStandard_rear,   "gfx/Subway_ABStandard.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_ABStandard_trailer,   "gfx/Subway_ABStandard.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_ABStandard_attach, vehicle_type_id){
    ITEM_Subway_ABStandard      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_ABStandard_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_ABStandard_rear;
    spriteset_Subway_ABStandard_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_ABStandard, 5100 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ABSTANDARD);
        introduction_date:                date(1915,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         43 ton;
        speed:                            45 mph;
        power:                            480 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             5;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (130/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_ABStandard_last;
        can_attach_wagon    :    sw_Subway_ABStandard_attach;
        purchase:                        spriteset_Subway_ABStandard_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ABSTANDARD);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_ABStandard_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            240;
        speed:                             40;
    }
}

//Triplex
//CC1
spriteset(spriteset_Subway_Triplex_purchase,   "gfx/Subway_Triplex.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Triplex_lead,   "gfx/Subway_Triplex.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Triplex_rear,   "gfx/Subway_Triplex.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Triplex_trailer,   "gfx/Subway_Triplex.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Triplex_attach, vehicle_type_id){
    ITEM_Subway_Triplex      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_Triplex_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Triplex_rear;
    spriteset_Subway_Triplex_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Triplex, 5200 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_TRIPLEX);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         43 ton;
        speed:                            45 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (137/param_capacity_mod);
        loading_speed: 20;

    }
    graphics {
        default:                        sw_Subway_Triplex_last;
        can_attach_wagon    :    sw_Subway_Triplex_attach;
        purchase:                        spriteset_Subway_Triplex_purchase;
        additional_text: string(STR_ROLE_SUBWAY_TRIPLEX);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Triplex_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (137/param_capacity_mod);
        power:                            400;
        speed:                             40;
    }
}

//Arnine
//CC1
spriteset(spriteset_Subway_Arnine_purchase,   "gfx/Subway_Arnine.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Arnine_lead,   "gfx/Subway_Arnine.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Arnine_rear,   "gfx/Subway_Arnine.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Arnine_trailer,   "gfx/Subway_Arnine.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_attach, vehicle_type_id){
    ITEM_Subway_Arnine      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Arnine_FakeSRA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Arnine_MTA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Arnine_TriTone      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Arnine_TwoTone      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Arnine_Work      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Arnine_rear;
    spriteset_Subway_Arnine_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Arnine, 5300 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ARNINE);
        introduction_date:                date(1931,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            760 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (145/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Arnine_last;
        can_attach_wagon    :    sw_Subway_Arnine_attach;
        purchase:                        spriteset_Subway_Arnine_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ARNINE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Arnine_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (145/param_capacity_mod);
        power:                            380;
        speed:                             40;
    }
}

//Arnine
//Fake SRA
spriteset(spriteset_Subway_Arnine_FakeSRA_purchase,   "gfx/Subway_Arnine_FakeSRA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Arnine_FakeSRA_lead,   "gfx/Subway_Arnine_FakeSRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Arnine_FakeSRA_rear,   "gfx/Subway_Arnine_FakeSRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Arnine_FakeSRA_trailer,   "gfx/Subway_Arnine_FakeSRA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_FakeSRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Arnine_FakeSRA_rear;
    spriteset_Subway_Arnine_FakeSRA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Arnine_FakeSRA, 5301 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ARNINE);
        introduction_date:                date(1931,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            760 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_Arnine;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (145/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Arnine_FakeSRA_last;
        can_attach_wagon    :    sw_Subway_Arnine_attach;
        purchase:                        spriteset_Subway_Arnine_FakeSRA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ARNINE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Arnine_FakeSRA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (145/param_capacity_mod);
        power:                            380;
        speed:                             40;
    }
}

//Arnine
//MTA
spriteset(spriteset_Subway_Arnine_MTA_purchase,   "gfx/Subway_Arnine_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Arnine_MTA_lead,   "gfx/Subway_Arnine_MTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Arnine_MTA_rear,   "gfx/Subway_Arnine_MTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Arnine_MTA_trailer,   "gfx/Subway_Arnine_MTA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_MTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Arnine_MTA_rear;
    spriteset_Subway_Arnine_MTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Arnine_MTA, 5302 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ARNINE);
        introduction_date:                date(1931,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            760 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_Arnine;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (145/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Arnine_MTA_last;
        can_attach_wagon    :    sw_Subway_Arnine_attach;
        purchase:                        spriteset_Subway_Arnine_MTA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ARNINE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Arnine_MTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (145/param_capacity_mod);
        power:                            380;
        speed:                             40;
    }
}

//Arnine
//TriTone
spriteset(spriteset_Subway_Arnine_TriTone_purchase,   "gfx/Subway_Arnine_TriTone.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Arnine_TriTone_lead,   "gfx/Subway_Arnine_TriTone.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Arnine_TriTone_rear,   "gfx/Subway_Arnine_TriTone.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Arnine_TriTone_trailer,   "gfx/Subway_Arnine_TriTone.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_TriTone_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Arnine_TriTone_rear;
    spriteset_Subway_Arnine_TriTone_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Arnine_TriTone, 5303 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ARNINE);
        introduction_date:                date(1931,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            760 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_Arnine;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (145/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Arnine_TriTone_last;
        can_attach_wagon    :    sw_Subway_Arnine_attach;
        purchase:                        spriteset_Subway_Arnine_TriTone_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ARNINE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Arnine_TriTone_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (145/param_capacity_mod);
        power:                            380;
        speed:                             40;
    }
}

//Arnine
//TwoTone
spriteset(spriteset_Subway_Arnine_TwoTone_purchase,   "gfx/Subway_Arnine_TwoTone.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Arnine_TwoTone_lead,   "gfx/Subway_Arnine_TwoTone.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Arnine_TwoTone_rear,   "gfx/Subway_Arnine_TwoTone.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Arnine_TwoTone_trailer,   "gfx/Subway_Arnine_TwoTone.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_TwoTone_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Arnine_TwoTone_rear;
    spriteset_Subway_Arnine_TwoTone_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Arnine_TwoTone, 5304 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ARNINE);
        introduction_date:                date(1931,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            760 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_Arnine;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (145/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Arnine_TwoTone_last;
        can_attach_wagon    :    sw_Subway_Arnine_attach;
        purchase:                        spriteset_Subway_Arnine_TwoTone_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ARNINE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Arnine_TwoTone_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (145/param_capacity_mod);
        power:                            380;
        speed:                             40;
    }
}

//Arnine
//Work
spriteset(spriteset_Subway_Arnine_Work_purchase,   "gfx/Subway_Arnine_Work.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Arnine_Work_lead,   "gfx/Subway_Arnine_Work.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Arnine_Work_rear,   "gfx/Subway_Arnine_Work.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Arnine_Work_trailer,   "gfx/Subway_Arnine_Work.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Arnine_Work_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Arnine_Work_rear;
    spriteset_Subway_Arnine_Work_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Arnine_Work, 5305 ) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ARNINE);
        introduction_date:                date(1931,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            760 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_Arnine;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (145/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Arnine_Work_last;
        can_attach_wagon    :    sw_Subway_Arnine_attach;
        purchase:                        spriteset_Subway_Arnine_Work_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ARNINE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Arnine_Work_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (145/param_capacity_mod);
        power:                            380;
        speed:                             40;
    }
}

//R11
//CC1
spriteset(spriteset_Subway_R11_purchase,   "gfx/Subway_R11.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R11_lead,   "gfx/Subway_R11.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R11_rear,   "gfx/Subway_R11.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R11_trailer,   "gfx/Subway_R11.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R11_attach, vehicle_type_id){
    ITEM_Subway_R11      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R11_Silver      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R11_MTA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R11_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R11_rear;
    spriteset_Subway_R11_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R11, 5400) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R11);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         37 ton;
        speed:                            55 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (152/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R11_last;
        can_attach_wagon    :    sw_Subway_R11_attach;
        purchase:                        spriteset_Subway_R11_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R11);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R11_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (152/param_capacity_mod);
        power:                            400;
    }
}

//R11
//Silver
spriteset(spriteset_Subway_R11_Silver_purchase,   "gfx/Subway_R11_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R11_Silver_lead,   "gfx/Subway_R11_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R11_Silver_rear,   "gfx/Subway_R11_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R11_Silver_trailer,   "gfx/Subway_R11_Silver.png") {template_8(7, 89)}


switch(FEAT_TRAINS, SELF, sw_Subway_R11_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R11_Silver_rear;
    spriteset_Subway_R11_Silver_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R11_Silver, 5401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R11);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         37 ton;
        speed:                            55 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R11;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (152/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R11_Silver_last;
        can_attach_wagon    :    sw_Subway_R11_attach;
        purchase:                        spriteset_Subway_R11_Silver_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R11);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R11_Silver_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (152/param_capacity_mod);
        power:                            400;
    }
}

//R11
//MTA
spriteset(spriteset_Subway_R11_MTA_purchase,   "gfx/Subway_R11_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R11_MTA_lead,   "gfx/Subway_R11_MTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R11_MTA_rear,   "gfx/Subway_R11_MTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R11_MTA_trailer,   "gfx/Subway_R11_MTA.png") {template_8(7, 89)}


switch(FEAT_TRAINS, SELF, sw_Subway_R11_MTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R11_MTA_rear;
    spriteset_Subway_R11_MTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R11_MTA, 5402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R11);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         37 ton;
        speed:                            55 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R11;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (152/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R11_MTA_last;
        can_attach_wagon    :    sw_Subway_R11_attach;
        purchase:                        spriteset_Subway_R11_MTA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R11);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R11_MTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (152/param_capacity_mod);
        power:                            400;
    }
}


//G Series
//CC1
spriteset(spriteset_Subway_GSeries_purchase,   "gfx/Subway_GSeries.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_GSeries_lead,   "gfx/Subway_GSeries.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_GSeries_rear,   "gfx/Subway_GSeries.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_GSeries_trailer,   "gfx/Subway_GSeries.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_GSeries_attach, vehicle_type_id){
    ITEM_Subway_GSeries      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_GSeries_RedRocket      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_GSeries_Aluminium      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_GSeries_Late      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_GSeries_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_GSeries_rear;
    spriteset_Subway_GSeries_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_GSeries, 5500) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_GSERIES);
        introduction_date:                date(1954,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (160/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_GSeries_last;
        can_attach_wagon    :    sw_Subway_GSeries_attach;
        purchase:                        spriteset_Subway_GSeries_purchase;
        additional_text: string(STR_ROLE_SUBWAY_GSERIES);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_GSeries_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (160/param_capacity_mod);
        power:                            340;
    }
}

//G Series
//RedRocket
spriteset(spriteset_Subway_GSeries_RedRocket_purchase,   "gfx/Subway_GSeries_RedRocket.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_GSeries_RedRocket_lead,   "gfx/Subway_GSeries_RedRocket.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_GSeries_RedRocket_rear,   "gfx/Subway_GSeries_RedRocket.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_GSeries_RedRocket_trailer,   "gfx/Subway_GSeries_RedRocket.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_GSeries_RedRocket_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_GSeries_RedRocket_rear;
    spriteset_Subway_GSeries_RedRocket_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_GSeries_RedRocket, 5501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_GSERIES);
        introduction_date:                date(1954,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_GSeries;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (160/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_GSeries_RedRocket_last;
        can_attach_wagon    :    sw_Subway_GSeries_attach;
        purchase:                        spriteset_Subway_GSeries_RedRocket_purchase;
        additional_text: string(STR_ROLE_SUBWAY_GSERIES);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_GSeries_RedRocket_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (160/param_capacity_mod);
        power:                            340;
    }
}

//G Series
//Aluminium
spriteset(spriteset_Subway_GSeries_Aluminium_purchase,   "gfx/Subway_GSeries_Aluminium.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_GSeries_Aluminium_lead,   "gfx/Subway_GSeries_Aluminium.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_GSeries_Aluminium_rear,   "gfx/Subway_GSeries_Aluminium.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_GSeries_Aluminium_trailer,   "gfx/Subway_GSeries_Aluminium.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_GSeries_Aluminium_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_GSeries_Aluminium_rear;
    spriteset_Subway_GSeries_Aluminium_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_GSeries_Aluminium, 5502) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_GSERIES);
        introduction_date:                date(1954,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_GSeries;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (160/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_GSeries_Aluminium_last;
        can_attach_wagon    :    sw_Subway_GSeries_attach;
        purchase:                        spriteset_Subway_GSeries_Aluminium_purchase;
        additional_text: string(STR_ROLE_SUBWAY_GSERIES);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_GSeries_Aluminium_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (160/param_capacity_mod);
        power:                            340;
    }
}

//G Series
//Late
spriteset(spriteset_Subway_GSeries_Late_purchase,   "gfx/Subway_GSeries_Late.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_GSeries_Late_lead,   "gfx/Subway_GSeries_Late.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_GSeries_Late_rear,   "gfx/Subway_GSeries_Late.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_GSeries_Late_trailer,   "gfx/Subway_GSeries_Late.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_GSeries_Late_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_GSeries_Late_rear;
    spriteset_Subway_GSeries_Late_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_GSeries_Late, 5503) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_GSERIES);
        introduction_date:                date(1954,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_GSeries;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (160/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_GSeries_Late_last;
        can_attach_wagon    :    sw_Subway_GSeries_attach;
        purchase:                        spriteset_Subway_GSeries_Late_purchase;
        additional_text: string(STR_ROLE_SUBWAY_GSERIES);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_GSeries_Late_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (160/param_capacity_mod);
        power:                            340;
    }
}

//R16
//CC1
spriteset(spriteset_Subway_R16_purchase,   "gfx/Subway_R16.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R16_lead,   "gfx/Subway_R16.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R16_rear,   "gfx/Subway_R16.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R16_trailer,   "gfx/Subway_R16.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R16_attach, vehicle_type_id){
    ITEM_Subway_R16      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R16_MTA1      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R16_MTA2      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R16_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R16_rear;
    spriteset_Subway_R16_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R16, 5600) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R16);
        introduction_date:                date(1956,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (164/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R16_last;
        can_attach_wagon    :    sw_Subway_R16_attach;
        purchase:                        spriteset_Subway_R16_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R16);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R16_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (164/param_capacity_mod);
        power:                            400;
    }
}

//R16
//MTA 1
spriteset(spriteset_Subway_R16_MTA1_purchase,   "gfx/Subway_R16_MTA1.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R16_MTA1_lead,   "gfx/Subway_R16_MTA1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R16_MTA1_rear,   "gfx/Subway_R16_MTA1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R16_MTA1_trailer,   "gfx/Subway_R16_MTA1.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R16_MTA1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R16_MTA1_rear;
    spriteset_Subway_R16_MTA1_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R16_MTA1, 5601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R16);
        introduction_date:                date(1956,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R16;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (164/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R16_MTA1_last;
        can_attach_wagon    :    sw_Subway_R16_attach;
        purchase:                        spriteset_Subway_R16_MTA1_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R16);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R16_MTA1_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (164/param_capacity_mod);
        power:                            400;
    }
}

//R16
//MTA 1
spriteset(spriteset_Subway_R16_MTA2_purchase,   "gfx/Subway_R16_MTA2.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R16_MTA2_lead,   "gfx/Subway_R16_MTA2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R16_MTA2_rear,   "gfx/Subway_R16_MTA2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R16_MTA2_trailer,   "gfx/Subway_R16_MTA2.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R16_MTA2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R16_MTA2_rear;
    spriteset_Subway_R16_MTA2_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R16_MTA2, 5602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R16);
        introduction_date:                date(1956,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R16;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (164/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R16_MTA2_last;
        can_attach_wagon    :    sw_Subway_R16_attach;
        purchase:                        spriteset_Subway_R16_MTA2_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R16);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R16_MTA2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (164/param_capacity_mod);
        power:                            400;
    }
}

//R32
//CC1
spriteset(spriteset_Subway_R32_purchase,   "gfx/Subway_R32.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R32_lead,   "gfx/Subway_R32.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R32_rear,   "gfx/Subway_R32.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R32_trailer,   "gfx/Subway_R32.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R32_attach, vehicle_type_id){
    ITEM_Subway_R32      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R32_Silver      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R32_MTA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R32_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R32_rear;
    spriteset_Subway_R32_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R32, 5700) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R32);
        introduction_date:                date(1965,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         35 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (170/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R32_last;
        can_attach_wagon    :    sw_Subway_R32_attach;
        purchase:                        spriteset_Subway_R32_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R32);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R32_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (170/param_capacity_mod);
        power:                            460;
    }
}

//R32
//Silver
spriteset(spriteset_Subway_R32_Silver_purchase,   "gfx/Subway_R32_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R32_Silver_lead,   "gfx/Subway_R32_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R32_Silver_rear,   "gfx/Subway_R32_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R32_Silver_trailer,   "gfx/Subway_R32_Silver.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R32_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R32_Silver_rear;
    spriteset_Subway_R32_Silver_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R32_Silver, 5701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R32);
        introduction_date:                date(1965,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         35 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R32;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (170/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R32_Silver_last;
        can_attach_wagon    :    sw_Subway_R32_attach;
        purchase:                        spriteset_Subway_R32_Silver_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R32);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R32_Silver_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (170/param_capacity_mod);
        power:                            460;
    }
}

//R32
//MTA
spriteset(spriteset_Subway_R32_MTA_purchase,   "gfx/Subway_R32_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R32_MTA_lead,   "gfx/Subway_R32_MTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R32_MTA_rear,   "gfx/Subway_R32_MTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R32_MTA_trailer,   "gfx/Subway_R32_MTA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R32_MTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R32_MTA_rear;
    spriteset_Subway_R32_MTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R32_MTA, 5702) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R32);
        introduction_date:                date(1965,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         35 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R32;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (170/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R32_MTA_last;
        can_attach_wagon    :    sw_Subway_R32_attach;
        purchase:                        spriteset_Subway_R32_MTA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R32);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R32_MTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (170/param_capacity_mod);
        power:                            460;
    }
}

//R40
//CC1
spriteset(spriteset_Subway_R40_purchase,   "gfx/Subway_R40.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R40_lead,   "gfx/Subway_R40.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R40_rear,   "gfx/Subway_R40.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R40_trailer,   "gfx/Subway_R40.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R40_attach, vehicle_type_id){
    ITEM_Subway_R40      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R40_Silver      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R40_Stripe      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R40_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R40_rear;
    spriteset_Subway_R40_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R40, 5800) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R40);
        introduction_date:                date(1969,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         35 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (170/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R40_last;
        can_attach_wagon    :    sw_Subway_R40_attach;
        purchase:                        spriteset_Subway_R40_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R40);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R40_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (170/param_capacity_mod);
        power:                            460;
    }
}

//R40
//Silver
spriteset(spriteset_Subway_R40_Silver_purchase,   "gfx/Subway_R40_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R40_Silver_lead,   "gfx/Subway_R40_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R40_Silver_rear,   "gfx/Subway_R40_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R40_Silver_trailer,   "gfx/Subway_R40_Silver.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R40_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R40_Silver_rear;
    spriteset_Subway_R40_Silver_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R40_Silver, 5801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R40);
        introduction_date:                date(1969,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         35 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R40;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (170/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R40_Silver_last;
        can_attach_wagon    :    sw_Subway_R40_attach;
        purchase:                        spriteset_Subway_R40_Silver_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R40);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R40_Silver_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (170/param_capacity_mod);
        power:                            460;
    }
}

//R40
//Stripe
spriteset(spriteset_Subway_R40_Stripe_purchase,   "gfx/Subway_R40_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R40_Stripe_lead,   "gfx/Subway_R40_Stripe.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R40_Stripe_rear,   "gfx/Subway_R40_Stripe.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R40_Stripe_trailer,   "gfx/Subway_R40_Stripe.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R40_Stripe_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R40_Stripe_rear;
    spriteset_Subway_R40_Stripe_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R40_Stripe, 5802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R40);
        introduction_date:                date(1969,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         35 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R40;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (170/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R40_Stripe_last;
        can_attach_wagon    :    sw_Subway_R40_attach;
        purchase:                        spriteset_Subway_R40_Stripe_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R40);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R40_Stripe_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (170/param_capacity_mod);
        power:                            460;
    }
}

//R44
//CC1
spriteset(spriteset_Subway_R44_purchase,   "gfx/Subway_R44.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R44_lead,   "gfx/Subway_R44.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R44_rear,   "gfx/Subway_R44.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R44_trailer,   "gfx/Subway_R44.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R44_attach, vehicle_type_id){
    ITEM_Subway_R44      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R44_MTA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R44_1776      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R44_Silver      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R44_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R44_rear;
    spriteset_Subway_R44_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R44, 5900) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R44);
        introduction_date:                date(1973,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (177/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R44_last;
        can_attach_wagon    :    sw_Subway_R44_attach;
        purchase:                        spriteset_Subway_R44_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R44);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R44_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (177/param_capacity_mod);
        power:                            460;
    }
}

//R44
//MTA
spriteset(spriteset_Subway_R44_MTA_purchase,   "gfx/Subway_R44_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R44_MTA_lead,   "gfx/Subway_R44_MTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R44_MTA_rear,   "gfx/Subway_R44_MTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R44_MTA_trailer,   "gfx/Subway_R44_MTA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R44_MTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R44_MTA_rear;
    spriteset_Subway_R44_MTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R44_MTA, 5901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R44);
        introduction_date:                date(1973,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R44;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (177/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R44_MTA_last;
        can_attach_wagon    :    sw_Subway_R44_attach;
        purchase:                        spriteset_Subway_R44_MTA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R44);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R44_MTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (177/param_capacity_mod);
        power:                            460;
    }
}

//R44
//1776
spriteset(spriteset_Subway_R44_1776_purchase,   "gfx/Subway_R44_1776.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R44_1776_lead,   "gfx/Subway_R44_1776.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R44_1776_rear,   "gfx/Subway_R44_1776.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R44_1776_trailer,   "gfx/Subway_R44_1776.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R44_1776_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R44_1776_rear;
    spriteset_Subway_R44_1776_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R44_1776, 5902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R44);
        introduction_date:                date(1973,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R44;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (177/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R44_1776_last;
        can_attach_wagon    :    sw_Subway_R44_attach;
        purchase:                        spriteset_Subway_R44_1776_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R44);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R44_1776_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (177/param_capacity_mod);
        power:                            460;
    }
}

//R44
//Silver
spriteset(spriteset_Subway_R44_Silver_purchase,   "gfx/Subway_R44_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R44_Silver_lead,   "gfx/Subway_R44_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R44_Silver_rear,   "gfx/Subway_R44_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R44_Silver_trailer,   "gfx/Subway_R44_Silver.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R44_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R44_Silver_rear;
    spriteset_Subway_R44_Silver_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R44_Silver, 5903) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R44);
        introduction_date:                date(1973,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            55 mph;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             6;

        variant_group: ITEM_Subway_R44;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (177/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R44_Silver_last;
        can_attach_wagon    :    sw_Subway_R44_attach;
        purchase:                        spriteset_Subway_R44_Silver_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R44);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R44_Silver_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (177/param_capacity_mod);
        power:                            460;
    }
}

//Budd UTV
//CC1
spriteset(spriteset_Subway_UTV_purchase,   "gfx/Subway_UTV.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_lead,   "gfx/Subway_UTV.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_rear,   "gfx/Subway_UTV.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_trailer,   "gfx/Subway_UTV.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_attach, vehicle_type_id){
    ITEM_Subway_UTV      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_UTV_MiamiMetro      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_UTV_BaltimoreMetro      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_UTV_SCTD      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_UTV_LAMetro      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_UTV_BroadStreet1      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_UTV_BroadStreet2        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_rear;
    spriteset_Subway_UTV_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV, 6000) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//Budd UTV
//Miami Metro
spriteset(spriteset_Subway_UTV_MiamiMetro_purchase,   "gfx/Subway_UTV_MiamiMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_MiamiMetro_lead,   "gfx/Subway_UTV_MiamiMetro.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_MiamiMetro_rear,   "gfx/Subway_UTV_MiamiMetro.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_MiamiMetro_trailer,   "gfx/Subway_UTV_MiamiMetro.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_MiamiMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_MiamiMetro_rear;
    spriteset_Subway_UTV_MiamiMetro_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV_MiamiMetro, 6001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_UTV;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_MiamiMetro_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_MiamiMetro_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_MiamiMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//Budd UTV
//Baltimore Metro
spriteset(spriteset_Subway_UTV_BaltimoreMetro_purchase,   "gfx/Subway_UTV_BaltimoreMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_BaltimoreMetro_lead,   "gfx/Subway_UTV_BaltimoreMetro.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_BaltimoreMetro_rear,   "gfx/Subway_UTV_BaltimoreMetro.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_BaltimoreMetro_trailer,   "gfx/Subway_UTV_BaltimoreMetro.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_BaltimoreMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_BaltimoreMetro_rear;
    spriteset_Subway_UTV_BaltimoreMetro_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV_BaltimoreMetro, 6002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_UTV;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_BaltimoreMetro_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_BaltimoreMetro_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_BaltimoreMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//Budd UTV
//SCTD
spriteset(spriteset_Subway_UTV_SCTD_purchase,   "gfx/Subway_UTV_SCTD.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_SCTD_lead,   "gfx/Subway_UTV_SCTD.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_SCTD_rear,   "gfx/Subway_UTV_SCTD.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_SCTD_trailer,   "gfx/Subway_UTV_SCTD.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_SCTD_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_SCTD_rear;
    spriteset_Subway_UTV_SCTD_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV_SCTD, 6003) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_UTV;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_SCTD_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_SCTD_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_SCTD_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//Budd UTV
//LA Metro
spriteset(spriteset_Subway_UTV_LAMetro_purchase,   "gfx/Subway_UTV_LAMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_LAMetro_lead,   "gfx/Subway_UTV_LAMetro.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_LAMetro_rear,   "gfx/Subway_UTV_LAMetro.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_LAMetro_trailer,   "gfx/Subway_UTV_LAMetro.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_LAMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_LAMetro_rear;
    spriteset_Subway_UTV_LAMetro_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV_LAMetro, 6004) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_UTV;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_LAMetro_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_LAMetro_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_LAMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//Budd UTV
//Broad Street 1
spriteset(spriteset_Subway_UTV_BroadStreet1_purchase,   "gfx/Subway_UTV_BroadStreet1.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_BroadStreet1_lead,   "gfx/Subway_UTV_BroadStreet1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_BroadStreet1_rear,   "gfx/Subway_UTV_BroadStreet1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_BroadStreet1_trailer,   "gfx/Subway_UTV_BroadStreet1.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_BroadStreet1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_BroadStreet1_rear;
    spriteset_Subway_UTV_BroadStreet1_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV_BroadStreet1, 6005) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_UTV;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_BroadStreet1_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_BroadStreet1_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_BroadStreet1_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//Budd UTV
//Broad Street 2
spriteset(spriteset_Subway_UTV_BroadStreet2_purchase,   "gfx/Subway_UTV_BroadStreet2.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_UTV_BroadStreet2_lead,   "gfx/Subway_UTV_BroadStreet2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_UTV_BroadStreet2_rear,   "gfx/Subway_UTV_BroadStreet2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_UTV_BroadStreet2_trailer,   "gfx/Subway_UTV_BroadStreet2.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_UTV_BroadStreet2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_UTV_BroadStreet2_rear;
    spriteset_Subway_UTV_BroadStreet2_lead;
}

//Vehicle

item (FEAT_TRAINS, ITEM_Subway_UTV_BroadStreet2, 6006) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_UTV);
        introduction_date:                date(1983,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         36 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_UTV;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (183/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_UTV_BroadStreet2_last;
        can_attach_wagon    :    sw_Subway_UTV_attach;
        purchase:                        spriteset_Subway_UTV_BroadStreet2_purchase;
        additional_text: string(STR_ROLE_SUBWAY_UTV);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_UTV_BroadStreet2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (183/param_capacity_mod);
        power:                            350;
    }
}

//MBTA Hawker-Siddely Cars
//Orange-CC1
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_purchase,   "gfx/Subway_HawkerSiddelyCar_Orange.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_lead,   "gfx/Subway_HawkerSiddelyCar_Orange.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_rear,   "gfx/Subway_HawkerSiddelyCar_Orange.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_trailer,   "gfx/Subway_HawkerSiddelyCar_Orange.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_attach, vehicle_type_id){
    ITEM_Subway_HawkerSiddelyCar_Orange      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_HawkerSiddelyCar_Orange_OrangeLine      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_HawkerSiddelyCar_Orange_RedLine      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_HawkerSiddelyCar_Red      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_HawkerSiddelyCar_Red_OrangeLine      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_HawkerSiddelyCar_Red_RedLine      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_Orange_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_HawkerSiddelyCar_Orange_rear;
    spriteset_Subway_HawkerSiddelyCar_Orange_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_HawkerSiddelyCar_Orange, 6100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_HSC_ORANGE);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (188/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_HawkerSiddelyCar_Orange_last;
        can_attach_wagon    :    sw_Subway_HawkerSiddelyCar_attach;
        purchase:                        spriteset_Subway_HawkerSiddelyCar_Orange_purchase;
        additional_text: string(STR_ROLE_SUBWAY_HSC_ORANGE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_HawkerSiddelyCar_Orange_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (188/param_capacity_mod);
        power:                            450;
    }
}

//Orange Line
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_purchase,   "gfx/Subway_HawkerSiddelyCar_Orange_OrangeLine.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_lead,   "gfx/Subway_HawkerSiddelyCar_Orange_OrangeLine.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_rear,   "gfx/Subway_HawkerSiddelyCar_Orange_OrangeLine.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_trailer,   "gfx/Subway_HawkerSiddelyCar_Orange_OrangeLine.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_Orange_OrangeLine_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_rear;
    spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_HawkerSiddelyCar_Orange_OrangeLine, 6101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_HSC_ORANGE);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_HawkerSiddelyCar_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (188/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_HawkerSiddelyCar_Orange_OrangeLine_last;
        can_attach_wagon    :    sw_Subway_HawkerSiddelyCar_attach;
        purchase:                        spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_purchase;
        additional_text: string(STR_ROLE_SUBWAY_HSC_ORANGE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_HawkerSiddelyCar_Orange_OrangeLine_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (188/param_capacity_mod);
        power:                            450;
    }
}

//Red Line
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_purchase,   "gfx/Subway_HawkerSiddelyCar_Orange_RedLine.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_lead,   "gfx/Subway_HawkerSiddelyCar_Orange_RedLine.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_rear,   "gfx/Subway_HawkerSiddelyCar_Orange_RedLine.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_trailer,   "gfx/Subway_HawkerSiddelyCar_Orange_RedLine.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_Orange_RedLine_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_rear;
    spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_HawkerSiddelyCar_Orange_RedLine, 6102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_HSC_ORANGE);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_HawkerSiddelyCar_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (188/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_HawkerSiddelyCar_Orange_RedLine_last;
        can_attach_wagon    :    sw_Subway_HawkerSiddelyCar_attach;
        purchase:                        spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_purchase;
        additional_text: string(STR_ROLE_SUBWAY_HSC_ORANGE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_HawkerSiddelyCar_Orange_RedLine_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (188/param_capacity_mod);
        power:                            450;
    }
}

//Red-CC1
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_purchase,   "gfx/Subway_HawkerSiddelyCar_Red.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_lead,   "gfx/Subway_HawkerSiddelyCar_Red.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_rear,   "gfx/Subway_HawkerSiddelyCar_Red.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_trailer,   "gfx/Subway_HawkerSiddelyCar_Red.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_Red_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_HawkerSiddelyCar_Red_rear;
    spriteset_Subway_HawkerSiddelyCar_Red_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_HawkerSiddelyCar_Red, 6150) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_HSC_RED);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_HawkerSiddelyCar_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (188/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_HawkerSiddelyCar_Red_last;
        can_attach_wagon    :    sw_Subway_HawkerSiddelyCar_attach;
        purchase:                        spriteset_Subway_HawkerSiddelyCar_Red_purchase;
        additional_text: string(STR_ROLE_SUBWAY_HSC_RED);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_HawkerSiddelyCar_Red_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (188/param_capacity_mod);
        power:                            450;
    }
}

//Orange Line
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_purchase,   "gfx/Subway_HawkerSiddelyCar_Red_OrangeLine.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_lead,   "gfx/Subway_HawkerSiddelyCar_Red_OrangeLine.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_rear,   "gfx/Subway_HawkerSiddelyCar_Red_OrangeLine.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_trailer,   "gfx/Subway_HawkerSiddelyCar_Red_OrangeLine.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_Red_OrangeLine_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_rear;
    spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_HawkerSiddelyCar_Red_OrangeLine, 6151) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_HSC_RED);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_HawkerSiddelyCar_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (188/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_HawkerSiddelyCar_Red_OrangeLine_last;
        can_attach_wagon    :    sw_Subway_HawkerSiddelyCar_attach;
        purchase:                        spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_purchase;
        additional_text: string(STR_ROLE_SUBWAY_HSC_RED);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_HawkerSiddelyCar_Red_OrangeLine_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (188/param_capacity_mod);
        power:                            450;
    }
}

//Red Line
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_RedLine_purchase,   "gfx/Subway_HawkerSiddelyCar_Red_RedLine.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_RedLine_lead,   "gfx/Subway_HawkerSiddelyCar_Red_RedLine.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_RedLine_rear,   "gfx/Subway_HawkerSiddelyCar_Red_RedLine.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_HawkerSiddelyCar_Red_RedLine_trailer,   "gfx/Subway_HawkerSiddelyCar_Red_RedLine.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_HawkerSiddelyCar_Red_RedLine_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_HawkerSiddelyCar_Red_RedLine_rear;
    spriteset_Subway_HawkerSiddelyCar_Red_RedLine_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_HawkerSiddelyCar_Red_RedLine, 6152) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_HSC_RED);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_HawkerSiddelyCar_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (188/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_HawkerSiddelyCar_Red_RedLine_last;
        can_attach_wagon    :    sw_Subway_HawkerSiddelyCar_attach;
        purchase:                        spriteset_Subway_HawkerSiddelyCar_Red_RedLine_purchase;
        additional_text: string(STR_ROLE_SUBWAY_HSC_RED);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_HawkerSiddelyCar_Red_RedLine_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (188/param_capacity_mod);
        power:                            450;
    }
}

//SEPTA M4
//CC1
spriteset(spriteset_Subway_M4_purchase,   "gfx/Subway_M4.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_M4_lead,   "gfx/Subway_M4.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_M4_rear,   "gfx/Subway_M4.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_M4_trailer,   "gfx/Subway_M4.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_M4_attach, vehicle_type_id){
    ITEM_Subway_M4      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_M4_MFL      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_M4_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_M4_rear;
    spriteset_Subway_M4_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_M4, 6250) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_M4);
        introduction_date:                date(1997,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (195/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_M4_last;
        can_attach_wagon    :    sw_Subway_M4_attach;
        purchase:                        spriteset_Subway_M4_purchase;
        additional_text: string(STR_ROLE_SUBWAY_M4);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_M4_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (195/param_capacity_mod);
        power:                            500;
    }
}

//SEPTA M4
//Market Frankford Line
spriteset(spriteset_Subway_M4_MFL_purchase,   "gfx/Subway_M4_MFL.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_M4_MFL_lead,   "gfx/Subway_M4_MFL.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_M4_MFL_rear,   "gfx/Subway_M4_MFL.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_M4_MFL_trailer,   "gfx/Subway_M4_MFL.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_M4_MFL_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_M4_MFL_rear;
    spriteset_Subway_M4_MFL_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_M4_MFL, 6251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_M4);
        introduction_date:                date(1997,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_M4;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (195/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_M4_MFL_last;
        can_attach_wagon    :    sw_Subway_M4_attach;
        purchase:                        spriteset_Subway_M4_MFL_purchase;
        additional_text: string(STR_ROLE_SUBWAY_M4);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_M4_MFL_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (195/param_capacity_mod);
        power:                            500;
    }
}

//NYC R143
//CC1
spriteset(spriteset_Subway_R143_purchase,   "gfx/Subway_R143.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R143_lead,   "gfx/Subway_R143.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R143_rear,   "gfx/Subway_R143.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R143_trailer,   "gfx/Subway_R143.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R143_attach, vehicle_type_id){
    ITEM_Subway_R143      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R143_MTA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R143_PATH      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R143_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R143_rear;
    spriteset_Subway_R143_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R143, 6300) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R143);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (201/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_R143_last;
        can_attach_wagon    :    sw_Subway_R143_attach;
        purchase:                        spriteset_Subway_R143_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R143);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R143_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (201/param_capacity_mod);
        power:                            600;
    }
}

//NYC R143
//MTA
spriteset(spriteset_Subway_R143_MTA_purchase,   "gfx/Subway_R143_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R143_MTA_lead,   "gfx/Subway_R143_MTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R143_MTA_rear,   "gfx/Subway_R143_MTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R143_MTA_trailer,   "gfx/Subway_R143_MTA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R143_MTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R143_MTA_rear;
    spriteset_Subway_R143_MTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R143_MTA, 6301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R143);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_R143;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (201/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_R143_MTA_last;
        can_attach_wagon    :    sw_Subway_R143_attach;
        purchase:                        spriteset_Subway_R143_MTA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R143);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R143_MTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (201/param_capacity_mod);
        power:                            600;
    }
}

//NYC R143
//PATH
spriteset(spriteset_Subway_R143_PATH_purchase,   "gfx/Subway_R143_PATH.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R143_PATH_lead,   "gfx/Subway_R143_PATH.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R143_PATH_rear,   "gfx/Subway_R143_PATH.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R143_PATH_trailer,   "gfx/Subway_R143_PATH.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R143_PATH_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R143_PATH_rear;
    spriteset_Subway_R143_PATH_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R143_PATH, 6302) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R143);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         38 ton;
        speed:                            65 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_R143;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (201/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_R143_PATH_last;
        can_attach_wagon    :    sw_Subway_R143_attach;
        purchase:                        spriteset_Subway_R143_PATH_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R143);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R143_PATH_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (201/param_capacity_mod);
        power:                            600;
    }
}

//Toronto Rocket
//CC1
spriteset(spriteset_Subway_Rocket_purchase,   "gfx/Subway_Rocket.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Rocket_lead,   "gfx/Subway_Rocket.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Rocket_rear,   "gfx/Subway_Rocket.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Rocket_trailer,   "gfx/Subway_Rocket.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Rocket_attach, vehicle_type_id){
    ITEM_Subway_Rocket      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Rocket_TTC      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_Rocket_Line2      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_Rocket_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Rocket_rear;
    spriteset_Subway_Rocket_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Rocket, 6400) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ROCKET);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (210/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Rocket_last;
        can_attach_wagon    :    sw_Subway_Rocket_attach;
        purchase:                        spriteset_Subway_Rocket_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ROCKET);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Rocket_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (210/param_capacity_mod);
        power:                            620;
    }
}

//Toronto Rocket
//TTC
spriteset(spriteset_Subway_Rocket_TTC_purchase,   "gfx/Subway_Rocket_TTC.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Rocket_TTC_lead,   "gfx/Subway_Rocket_TTC.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Rocket_TTC_rear,   "gfx/Subway_Rocket_TTC.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Rocket_TTC_trailer,   "gfx/Subway_Rocket_TTC.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Rocket_TTC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Rocket_TTC_rear;
    spriteset_Subway_Rocket_TTC_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Rocket_TTC, 6401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ROCKET);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_Rocket;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (210/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Rocket_TTC_last;
        can_attach_wagon    :    sw_Subway_Rocket_attach;
        purchase:                        spriteset_Subway_Rocket_TTC_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ROCKET);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Rocket_TTC_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (210/param_capacity_mod);
        power:                            620;
    }
}

//Toronto Rocket
//Line2
spriteset(spriteset_Subway_Rocket_Line2_purchase,   "gfx/Subway_Rocket_Line2.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_Rocket_Line2_lead,   "gfx/Subway_Rocket_Line2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_Rocket_Line2_rear,   "gfx/Subway_Rocket_Line2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_Rocket_Line2_trailer,   "gfx/Subway_Rocket_Line2.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_Rocket_Line2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_Rocket_Line2_rear;
    spriteset_Subway_Rocket_Line2_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_Rocket_Line2, 6402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_ROCKET);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_Rocket;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (210/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_Rocket_Line2_last;
        can_attach_wagon    :    sw_Subway_Rocket_attach;
        purchase:                        spriteset_Subway_Rocket_Line2_purchase;
        additional_text: string(STR_ROLE_SUBWAY_ROCKET);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_Rocket_Line2_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (210/param_capacity_mod);
        power:                            620;
    }
}

//Miami Subway
//CC1
spriteset(spriteset_Subway_MiamiMetro_purchase,   "gfx/Subway_MiamiMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MiamiMetro_lead,   "gfx/Subway_MiamiMetro.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MiamiMetro_rear,   "gfx/Subway_MiamiMetro.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MiamiMetro_trailer,   "gfx/Subway_MiamiMetro.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MiamiMetro_attach, vehicle_type_id){
    ITEM_Subway_MiamiMetro      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_MiamiMetro_Miami      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_MiamiMetro_LAMetro      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_MiamiMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MiamiMetro_rear;
    spriteset_Subway_MiamiMetro_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MiamiMetro, 6450) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MIAMIMETRO);
        introduction_date:                date(2017,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (210/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_MiamiMetro_last;
        can_attach_wagon    :    sw_Subway_MiamiMetro_attach;
        purchase:                        spriteset_Subway_MiamiMetro_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MIAMIMETRO);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MiamiMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (210/param_capacity_mod);
        power:                            620;
    }
}

//Miami Subway
//Miami Metro
spriteset(spriteset_Subway_MiamiMetro_Miami_purchase,   "gfx/Subway_MiamiMetro_Miami.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MiamiMetro_Miami_lead,   "gfx/Subway_MiamiMetro_Miami.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MiamiMetro_Miami_rear,   "gfx/Subway_MiamiMetro_Miami.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MiamiMetro_Miami_trailer,   "gfx/Subway_MiamiMetro_Miami.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MiamiMetro_Miami_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MiamiMetro_Miami_rear;
    spriteset_Subway_MiamiMetro_Miami_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MiamiMetro_Miami, 6451) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MIAMIMETRO);
        introduction_date:                date(2017,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_MiamiMetro;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (210/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_MiamiMetro_Miami_last;
        can_attach_wagon    :    sw_Subway_MiamiMetro_attach;
        purchase:                        spriteset_Subway_MiamiMetro_Miami_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MIAMIMETRO);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MiamiMetro_Miami_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (210/param_capacity_mod);
        power:                            620;
    }
}

//Miami Subway
//Miami Metro
spriteset(spriteset_Subway_MiamiMetro_LAMetro_purchase,   "gfx/Subway_MiamiMetro_LAMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MiamiMetro_LAMetro_lead,   "gfx/Subway_MiamiMetro_LAMetro.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MiamiMetro_LAMetro_rear,   "gfx/Subway_MiamiMetro_LAMetro.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MiamiMetro_LAMetro_trailer,   "gfx/Subway_MiamiMetro_LAMetro.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MiamiMetro_LAMetro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MiamiMetro_LAMetro_rear;
    spriteset_Subway_MiamiMetro_LAMetro_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MiamiMetro_LAMetro, 6452) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MIAMIMETRO);
        introduction_date:                date(2017,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             7;

        variant_group: ITEM_Subway_MiamiMetro;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (210/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_MiamiMetro_LAMetro_last;
        can_attach_wagon    :    sw_Subway_MiamiMetro_attach;
        purchase:                        spriteset_Subway_MiamiMetro_LAMetro_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MIAMIMETRO);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MiamiMetro_LAMetro_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (210/param_capacity_mod);
        power:                            620;
    }
}

//MBTA Orange Line Cars
//CC1
spriteset(spriteset_Subway_MBTACRRC_Orange_purchase,   "gfx/Subway_MBTACRRC_Orange.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MBTACRRC_Orange_lead,   "gfx/Subway_MBTACRRC_Orange.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MBTACRRC_Orange_rear,   "gfx/Subway_MBTACRRC_Orange.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MBTACRRC_Orange_trailer,   "gfx/Subway_MBTACRRC_Orange.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MBTACRRC_attach, vehicle_type_id){
    ITEM_Subway_MBTACRRC_Orange      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_MBTACRRC_Red      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_MBTACRRC_Orange_Orange      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_MBTACRRC_Red_Red      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_MBTACRRC_Orange_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MBTACRRC_Orange_rear;
    spriteset_Subway_MBTACRRC_Orange_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MBTACRRC_Orange, 6500) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MBTACRRC_ORANGE);
        introduction_date:                date(2021,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             8;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (217/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_MBTACRRC_Orange_last;
        can_attach_wagon    :    sw_Subway_MBTACRRC_attach;
        purchase:                        spriteset_Subway_MBTACRRC_Orange_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MBTACRRC_ORANGE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MBTACRRC_Orange_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (217/param_capacity_mod);
        power:                            620;
    }
}

//MBTA Orange Line Cars
//Orange Line Livery
spriteset(spriteset_Subway_MBTACRRC_Orange_Orange_purchase,   "gfx/Subway_MBTACRRC_Orange_Orange.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MBTACRRC_Orange_Orange_lead,   "gfx/Subway_MBTACRRC_Orange_Orange.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MBTACRRC_Orange_Orange_rear,   "gfx/Subway_MBTACRRC_Orange_Orange.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MBTACRRC_Orange_Orange_trailer,   "gfx/Subway_MBTACRRC_Orange_Orange.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MBTACRRC_Orange_Orange_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MBTACRRC_Orange_Orange_rear;
    spriteset_Subway_MBTACRRC_Orange_Orange_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MBTACRRC_Orange_Orange, 6501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MBTACRRC_ORANGE);
        introduction_date:                date(2021,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_MBTACRRC_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (217/param_capacity_mod);
        loading_speed: 45;

    }
    graphics {
        default:                        sw_Subway_MBTACRRC_Orange_Orange_last;
        can_attach_wagon    :    sw_Subway_MBTACRRC_attach;
        purchase:                        spriteset_Subway_MBTACRRC_Orange_Orange_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MBTACRRC_ORANGE);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MBTACRRC_Orange_Orange_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (217/param_capacity_mod);
        power:                            620;
    }
}

//MBTA Red Line Cars
//CC1
spriteset(spriteset_Subway_MBTACRRC_Red_purchase,   "gfx/Subway_MBTACRRC_Red.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MBTACRRC_Red_lead,   "gfx/Subway_MBTACRRC_Red.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MBTACRRC_Red_rear,   "gfx/Subway_MBTACRRC_Red.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MBTACRRC_Red_trailer,   "gfx/Subway_MBTACRRC_Red.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MBTACRRC_Red_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MBTACRRC_Red_rear;
    spriteset_Subway_MBTACRRC_Red_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MBTACRRC_Red, 6525) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MBTACRRC_RED);
        introduction_date:                date(2021,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_MBTACRRC_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (217/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_MBTACRRC_Red_last;
        can_attach_wagon    :    sw_Subway_MBTACRRC_attach;
        purchase:                        spriteset_Subway_MBTACRRC_Red_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MBTACRRC_RED);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MBTACRRC_Red_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (217/param_capacity_mod);
        power:                            620;
    }
}

//MBTA Red Line Cars
//Red Line Livery
spriteset(spriteset_Subway_MBTACRRC_Red_Red_purchase,   "gfx/Subway_MBTACRRC_Red_Red.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_MBTACRRC_Red_Red_lead,   "gfx/Subway_MBTACRRC_Red_Red.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_MBTACRRC_Red_Red_rear,   "gfx/Subway_MBTACRRC_Red_Red.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_MBTACRRC_Red_Red_trailer,   "gfx/Subway_MBTACRRC_Red_Red.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_MBTACRRC_Red_Red_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_MBTACRRC_Red_Red_rear;
    spriteset_Subway_MBTACRRC_Red_Red_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_MBTACRRC_Red_Red, 6526) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_MBTACRRC_RED);
        introduction_date:                date(2021,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_MBTACRRC_Orange;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (217/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_MBTACRRC_Red_Red_last;
        can_attach_wagon    :    sw_Subway_MBTACRRC_attach;
        purchase:                        spriteset_Subway_MBTACRRC_Red_Red_purchase;
        additional_text: string(STR_ROLE_SUBWAY_MBTACRRC_RED);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_MBTACRRC_Red_Red_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (217/param_capacity_mod);
        power:                            620;
    }
}

//NYC R211
//CC1
spriteset(spriteset_Subway_R211_purchase,   "gfx/Subway_R211.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R211_lead,   "gfx/Subway_R211.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R211_rear,   "gfx/Subway_R211.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R211_trailer,   "gfx/Subway_R211.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R211_attach, vehicle_type_id){
    ITEM_Subway_R211      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_Subway_R211_MTA      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER   : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_Subway_R211_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R211_rear;
    spriteset_Subway_R211_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R211, 6550) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R211);
        introduction_date:                date(2024,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             8;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (217/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R211_last;
        can_attach_wagon    :    sw_Subway_R211_attach;
        purchase:                        spriteset_Subway_R211_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R211);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R211_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (217/param_capacity_mod);
        power:                            620;
    }
}

//NYC R211
//MTA
spriteset(spriteset_Subway_R211_MTA_purchase,   "gfx/Subway_R211_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Subway_R211_MTA_lead,   "gfx/Subway_R211_MTA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Subway_R211_MTA_rear,   "gfx/Subway_R211_MTA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Subway_R211_MTA_trailer,   "gfx/Subway_R211_MTA.png") {template_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Subway_R211_MTA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_Subway_R211_MTA_rear;
    spriteset_Subway_R211_MTA_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_Subway_R211_MTA, 6551) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_NAME_SUBWAY_R211);
        introduction_date:                date(2024,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         34 ton;
        speed:                            65 mph;
        power:                            1240 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             8;

        variant_group: ITEM_Subway_R211;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (217/param_capacity_mod);
        loading_speed: 60;

    }
    graphics {
        default:                        sw_Subway_R211_MTA_last;
        can_attach_wagon    :    sw_Subway_R211_attach;
        purchase:                        spriteset_Subway_R211_MTA_purchase;
        additional_text: string(STR_ROLE_SUBWAY_R211);

}
    livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Subway_R211_MTA_trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (217/param_capacity_mod);
        power:                            620;
    }
}