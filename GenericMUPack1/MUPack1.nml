grf{
    grfid: "ZM\14\01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 1;
    min_compatible_version: 1;
//Purchase Cost Parameter
    param {
        param_purchase_cost {
            type: int;
            name: string(STR_PARAM_PURCHASE_COST);
            desc: string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Running Cost Parameter
     param {
        param_running_cost {
            type: int;
            name: string(STR_PARAM_RUNNING_COST);
            desc: string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Carry Capacity Parameter
//Get this working for the next update!
    param {
                param_capacities {
                        type: int;
                        name: string(STR_PARAM_NAME_CAPACITY);
                        desc: string(STR_PARAM_DESC_CAPACITY);
                        min_value: 0;
                        max_value: 1;
                        def_value: 0;
                        names: {
                                                0: string(STR_PARAM_REAL_CAPACITY);
                                                1: string(STR_PARAM_NORMAL_REDUCED);
                        };
                }
        }

//OHLESuburbanDisable
	param {
    param_OHLESuburbandisable {
     name: string(STR_PARAM_NAME_OHLESUBURBANDISABLE);
     desc: string(STR_PARAM_DESC_OHLESUBURBANDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
  
//3RSuburbanDisable
	param {
    param_3RSuburbandisable {
     name: string(STR_PARAM_NAME_3RSUBURBANDISABLE);
     desc: string(STR_PARAM_DESC_3RSUBURBANDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
}

//Carry Capacity Variables
if (param_capacities == 0) {
    param_capacity_mod = 0;
}

if (param_capacities == 1) {
    param_capacity_mod = 2;
}

railtypetable {
    RAIL, SAA3: [ MTRO, SBA3, SCA3, SDA3, "3RDR", "3RDC", MTRO, ELRL], ELRL, IHBA: [SGAA, SGAE, ELRL], TR_UNIVERSAL: [_AAE, RAIL]
}

cargotable {
PASS, COAL, MAIL, OIL_, LVST, EOIL, COKE, VBOD, SULP, SASH, MNO2, BOOM, IRON, QLME, PHOS, VPTS, SLAG, PIPE, CASS, NUTS, METL, GOOD, GRAI, WOOD, IORE, STEL, VALU, PAPR, WHEA, FOOD, GOLD, RUBR, FRUT, MAIZ, CORE, WATR, DIAM, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BEER, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, DYES, ENSP, FERT, FICR, FISH, FMSP, FRVG, GLAS, GRVL, JAVA, LIME, MILK, MNSP, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, TOUR, VEHI, WDPR, WOOL, URAN, YETI, YETY, BEAN, NITR
}

//Basecost Paramater Variables
basecost {
 PR_BUILD_VEHICLE_TRAIN: 1 + param_purchase_cost - 4;
 PR_BUILD_VEHICLE_WAGON: 3 + param_purchase_cost - 4;
 PR_RUNNING_TRAIN_STEAM: 4 + param_running_cost - 4;
 PR_RUNNING_TRAIN_DIESEL: 3 + param_running_cost - 4;
 PR_RUNNING_TRAIN_ELECTRIC: 2 + param_running_cost - 4;
}

// Fix depot view
traininfo_y_offset = 2;
train_width_32_px = 1;

// Purchase Sprite
template template_purchase(x, y) {
    //[left_x, upper_y, width, height, offset_x, offset_y]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x     , y, 88, 15, -60, -11, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
}


// 8 Template
template template_8(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -9]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        29,        -3,            -9]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]
}

template template_8_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up

    [ x+89,     y,        8,        29,        -3,            -9]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]

    [ x,        y,        8,        29,        -3,            -9]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

spriteset(spriteset_MU_purchase,   "gfx/MU_Carriage.png") {template_purchase(7, 21)}
spriteset(spriteset_MU_trailer,   "gfx/MU_Carriage.png") {template_8(7, 99)}

//Vehicle
item (FEAT_TRAINS, Item_MU_Trailer) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        TR_UNIVERSAL;
		running_cost_base: RUNNING_COST_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_MU_TRAILER);
        introduction_date:                date(1890,1,1);
        model_life:                        VEHICLE_NEVER_EXPIRES;
        length:                            8;

        weight:                         0 ton;
        speed:                            0 mph;
        cost_factor:                     100;
        running_cost_factor:             10;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    100;
        loading_speed: 30;

    }
    graphics {
        default:                        spriteset_MU_trailer;
        purchase:                        spriteset_MU_purchase;
        additional_text: string(STR_MU_TRAILER_INFO);

}
}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_OHLE_attach, vehicle_type_id){
    Item_ArclightEMU_OHLE_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ArclightEMU_OHLE_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ArclightEMU_OHLE_Liv1
spriteset(spriteset_ArclightEMU_OHLE_Liv1_Purchase,   "gfx/ArclightEMU_OHLE_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_ArclightEMU_OHLE_Liv1_Lead,   "gfx/ArclightEMU_OHLE_Liv1.png") {template_8(7, 39)}
spriteset(spriteset_ArclightEMU_OHLE_Liv1_Rear,   "gfx/ArclightEMU_OHLE_Liv1.png") {template_8(7, 69)}

spriteset(spriteset_ArclightEMU_OHLE_Liv1_DT_Lead,   "gfx/ArclightEMU_OHLE_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_ArclightEMU_OHLE_Liv1_DT_Rear,   "gfx/ArclightEMU_OHLE_Liv1.png") {template_8(187, 69)}

spriteset(spriteset_ArclightEMU_OHLE_Liv1_Trailer,   "gfx/ArclightEMU_OHLE_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_OHLE_Liv1_forward, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_OHLE_Liv1_Lead;
    1: spriteset_ArclightEMU_OHLE_Liv1_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_OHLE_Liv1_rev, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_OHLE_Liv1_DT_Lead;
    1: spriteset_ArclightEMU_OHLE_Liv1_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_ArclightEMU_OHLE_Liv1_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_ArclightEMU_OHLE_Liv1_forward;
    1:    sw_ArclightEMU_OHLE_Liv1_rev;
}

item(FEAT_TRAINS, Item_ArclightEMU_OHLE_Liv1, 5010) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_ARCLIGHTEMU);
        introduction_date:                date(1900,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            80 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             160;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ArclightEMU_OHLE_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ArclightEMU_OHLE_Liv1_directioncheck;
        can_attach_wagon: sw_ArclightEMU_OHLE_attach ;
        purchase: spriteset_ArclightEMU_OHLE_Liv1_Purchase;
        additional_text: string(STR_INFO_ARCLIGHTEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : spriteset_ArclightEMU_OHLE_Liv1_Trailer ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 0 ;
		weight:                        32;
		running_cost_factor:             40;
    }
}

//ArclightEMU_OHLE_Liv2
spriteset(spriteset_ArclightEMU_OHLE_Liv2_Purchase,   "gfx/ArclightEMU_OHLE_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_ArclightEMU_OHLE_Liv2_Lead,   "gfx/ArclightEMU_OHLE_Liv2.png") {template_8(7, 39)}
spriteset(spriteset_ArclightEMU_OHLE_Liv2_Rear,   "gfx/ArclightEMU_OHLE_Liv2.png") {template_8(7, 69)}

spriteset(spriteset_ArclightEMU_OHLE_Liv2_DT_Lead,   "gfx/ArclightEMU_OHLE_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_ArclightEMU_OHLE_Liv2_DT_Rear,   "gfx/ArclightEMU_OHLE_Liv2.png") {template_8(187, 69)}

spriteset(spriteset_ArclightEMU_OHLE_Liv2_Trailer,   "gfx/ArclightEMU_OHLE_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_OHLE_Liv2_forward, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_OHLE_Liv2_Lead;
    1: spriteset_ArclightEMU_OHLE_Liv2_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_OHLE_Liv2_rev, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_OHLE_Liv2_DT_Lead;
    1: spriteset_ArclightEMU_OHLE_Liv2_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_ArclightEMU_OHLE_Liv2_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_ArclightEMU_OHLE_Liv2_forward;
    1:    sw_ArclightEMU_OHLE_Liv2_rev;
}

item(FEAT_TRAINS, Item_ArclightEMU_OHLE_Liv2, 5011) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_ARCLIGHTEMU);
        introduction_date:                date(1900,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            80 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             160;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ArclightEMU_OHLE_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ArclightEMU_OHLE_Liv2_directioncheck;
        can_attach_wagon: sw_ArclightEMU_OHLE_attach ;
        purchase: spriteset_ArclightEMU_OHLE_Liv2_Purchase;
        additional_text: string(STR_INFO_ARCLIGHTEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : spriteset_ArclightEMU_OHLE_Liv2_Trailer ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 0 ;
		weight:                        32;
		running_cost_factor:             40;
    }
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_attach, vehicle_type_id){
    Item_KelmarkEMU_OHLE_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_KelmarkEMU_OHLE_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//KelmarkEMU_OHLE_Liv1
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_purchase,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_Motor_lead,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_Motor_rear,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_DrivingTrailer_lead,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_DrivingTrailer_rear,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_Trailer,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor_r,   "gfx/KelmarkEMU_OHLE_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
    return spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1_r;
    return sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
    return sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2_r;
    return sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
    3 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1_r;
    4 : sw_KelmarkEMU_OHLE_Liv1_sidecheck_4_r;
    5 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_KelmarkEMU_OHLE_Liv1_sidecheck_6_r;
    return sw_KelmarkEMU_OHLE_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1;
    return sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1;
    return spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2;
    return sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_OHLE_Liv1_Trailer;
    3 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_1;
    4 : sw_KelmarkEMU_OHLE_Liv1_sidecheck_4;
    5 : sw_KelmarkEMU_OHLE_Liv1_pantocheck_at_2;
    6 .. 7 : sw_KelmarkEMU_OHLE_Liv1_sidecheck_6;
    return sw_KelmarkEMU_OHLE_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_KelmarkEMU_OHLE_Liv1_Motor_lead; //Panto
    return spriteset_KelmarkEMU_OHLE_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_OHLE_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_KelmarkEMU_OHLE_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_OHLE_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_OHLE_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_KelmarkEMU_OHLE_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_OHLE_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_KelmarkEMU_OHLE_Liv1_Motor_lead;        //Front panto
    return spriteset_KelmarkEMU_OHLE_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_KelmarkEMU_OHLE_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_OHLE_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_KelmarkEMU_OHLE_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_OHLE_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_OHLE_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_KelmarkEMU_OHLE_Liv1_frontcheck; //We are going forwards
    return sw_KelmarkEMU_OHLE_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_OHLE_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_KelmarkEMU_OHLE_Liv1_lencheck;
    return sw_KelmarkEMU_OHLE_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_KelmarkEMU_OHLE_Liv1, 5030) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_KELMARKEMU);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_KelmarkEMU_OHLE_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_KelmarkEMU_OHLE_Liv1_directioncheck;
        can_attach_wagon: sw_KelmarkEMU_attach ;
        purchase: spriteset_KelmarkEMU_OHLE_Liv1_purchase;
        additional_text: string(STR_INFO_KELMARKEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_KelmarkEMU_OHLE_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        32;
		running_cost_factor:             52;

    }
}

//KelmarkEMU_OHLE_Liv2
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_purchase,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_Motor_lead,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_Motor_rear,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_DrivingTrailer_lead,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_DrivingTrailer_rear,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_Trailer,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor_r,   "gfx/KelmarkEMU_OHLE_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
    return spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1_r;
    return sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
    return sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2_r;
    return sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
    3 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1_r;
    4 : sw_KelmarkEMU_OHLE_Liv2_sidecheck_4_r;
    5 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_KelmarkEMU_OHLE_Liv2_sidecheck_6_r;
    return sw_KelmarkEMU_OHLE_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1;
    return sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1;
    return spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2;
    return sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_OHLE_Liv2_Trailer;
    3 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_1;
    4 : sw_KelmarkEMU_OHLE_Liv2_sidecheck_4;
    5 : sw_KelmarkEMU_OHLE_Liv2_pantocheck_at_2;
    6 .. 7 : sw_KelmarkEMU_OHLE_Liv2_sidecheck_6;
    return sw_KelmarkEMU_OHLE_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_KelmarkEMU_OHLE_Liv2_Motor_lead; //Panto
    return spriteset_KelmarkEMU_OHLE_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_OHLE_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_KelmarkEMU_OHLE_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_OHLE_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_OHLE_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_KelmarkEMU_OHLE_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_OHLE_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_KelmarkEMU_OHLE_Liv2_Motor_lead;        //Front panto
    return spriteset_KelmarkEMU_OHLE_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_KelmarkEMU_OHLE_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_OHLE_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_OHLE_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_KelmarkEMU_OHLE_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_OHLE_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_OHLE_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_KelmarkEMU_OHLE_Liv2_frontcheck; //We are going forwards
    return sw_KelmarkEMU_OHLE_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_OHLE_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_KelmarkEMU_OHLE_Liv2_lencheck;
    return sw_KelmarkEMU_OHLE_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_KelmarkEMU_OHLE_Liv2, 5031) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_KELMARKEMU);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_KelmarkEMU_OHLE_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_KelmarkEMU_OHLE_Liv2_directioncheck;
        can_attach_wagon: sw_KelmarkEMU_attach ;
        purchase: spriteset_KelmarkEMU_OHLE_Liv2_purchase;
        additional_text: string(STR_INFO_KELMARKEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_KelmarkEMU_OHLE_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        32;
		running_cost_factor:             52;

    }
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_attach, vehicle_type_id){
    Item_VictoryEMU_OHLE_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_VictoryEMU_OHLE_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//VictoryEMU_OHLE_Liv1
spriteset(spriteset_VictoryEMU_OHLE_Liv1_purchase,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_VictoryEMU_OHLE_Liv1_Motor_lead,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VictoryEMU_OHLE_Liv1_Motor_rear,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VictoryEMU_OHLE_Liv1_DrivingTrailer_lead,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_VictoryEMU_OHLE_Liv1_DrivingTrailer_rear,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_VictoryEMU_OHLE_Liv1_Trailer,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor_r,   "gfx/VictoryEMU_OHLE_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv1_Trailer;
    return spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1_r;
    return sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_VictoryEMU_OHLE_Liv1_Trailer;
    return sw_VictoryEMU_OHLE_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2_r;
    return sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_VictoryEMU_OHLE_Liv1_Trailer;
    3 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1_r;
    4 : sw_VictoryEMU_OHLE_Liv1_sidecheck_4_r;
    5 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_VictoryEMU_OHLE_Liv1_sidecheck_6_r;
    return sw_VictoryEMU_OHLE_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv1_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1;
    return sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1;
    return spriteset_VictoryEMU_OHLE_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2;
    return sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_VictoryEMU_OHLE_Liv1_Trailer;
    3 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_1;
    4 : sw_VictoryEMU_OHLE_Liv1_sidecheck_4;
    5 : sw_VictoryEMU_OHLE_Liv1_pantocheck_at_2;
    6 .. 7 : sw_VictoryEMU_OHLE_Liv1_sidecheck_6;
    return sw_VictoryEMU_OHLE_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_VictoryEMU_OHLE_Liv1_Motor_lead; //Panto
    return spriteset_VictoryEMU_OHLE_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_VictoryEMU_OHLE_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_VictoryEMU_OHLE_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_VictoryEMU_OHLE_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_VictoryEMU_OHLE_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_VictoryEMU_OHLE_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_VictoryEMU_OHLE_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_VictoryEMU_OHLE_Liv1_Motor_lead;        //Front panto
    return spriteset_VictoryEMU_OHLE_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_VictoryEMU_OHLE_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_VictoryEMU_OHLE_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_VictoryEMU_OHLE_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_VictoryEMU_OHLE_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_VictoryEMU_OHLE_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_VictoryEMU_OHLE_Liv1_frontcheck; //We are going forwards
    return sw_VictoryEMU_OHLE_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_VictoryEMU_OHLE_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_VictoryEMU_OHLE_Liv1_lencheck;
    return sw_VictoryEMU_OHLE_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_VictoryEMU_OHLE_Liv1, 5040) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_VICTORYEMU);
        introduction_date:                date(1945,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            700 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_VictoryEMU_OHLE_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VictoryEMU_OHLE_Liv1_directioncheck;
        can_attach_wagon: sw_VictoryEMU_attach ;
        purchase: spriteset_VictoryEMU_OHLE_Liv1_purchase;
        additional_text: string(STR_INFO_VICTORYEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_VictoryEMU_OHLE_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (100/param_capacity_mod) ;
        power                       : 350 ;
		weight:                        30;
		running_cost_factor:             50;

    }
}

//VictoryEMU_OHLE_Liv2
spriteset(spriteset_VictoryEMU_OHLE_Liv2_purchase,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_VictoryEMU_OHLE_Liv2_Motor_lead,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VictoryEMU_OHLE_Liv2_Motor_rear,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VictoryEMU_OHLE_Liv2_DrivingTrailer_lead,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_VictoryEMU_OHLE_Liv2_DrivingTrailer_rear,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_VictoryEMU_OHLE_Liv2_Trailer,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor_r,   "gfx/VictoryEMU_OHLE_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv2_Trailer;
    return spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1_r;
    return sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_VictoryEMU_OHLE_Liv2_Trailer;
    return sw_VictoryEMU_OHLE_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2_r;
    return sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_VictoryEMU_OHLE_Liv2_Trailer;
    3 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1_r;
    4 : sw_VictoryEMU_OHLE_Liv2_sidecheck_4_r;
    5 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_VictoryEMU_OHLE_Liv2_sidecheck_6_r;
    return sw_VictoryEMU_OHLE_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor_r;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_VictoryEMU_OHLE_Liv2_NonControlMotor;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1;
    return sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1;
    return spriteset_VictoryEMU_OHLE_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2;
    return sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_VictoryEMU_OHLE_Liv2_Trailer;
    3 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_1;
    4 : sw_VictoryEMU_OHLE_Liv2_sidecheck_4;
    5 : sw_VictoryEMU_OHLE_Liv2_pantocheck_at_2;
    6 .. 7 : sw_VictoryEMU_OHLE_Liv2_sidecheck_6;
    return sw_VictoryEMU_OHLE_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_VictoryEMU_OHLE_Liv2_Motor_lead; //Panto
    return spriteset_VictoryEMU_OHLE_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_VictoryEMU_OHLE_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_VictoryEMU_OHLE_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_VictoryEMU_OHLE_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_VictoryEMU_OHLE_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_VictoryEMU_OHLE_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_VictoryEMU_OHLE_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_VictoryEMU_OHLE_Liv2_Motor_lead;        //Front panto
    return spriteset_VictoryEMU_OHLE_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_VictoryEMU_OHLE_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_VictoryEMU_OHLE_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_OHLE_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_VictoryEMU_OHLE_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_VictoryEMU_OHLE_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_VictoryEMU_OHLE_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_VictoryEMU_OHLE_Liv2_frontcheck; //We are going forwards
    return sw_VictoryEMU_OHLE_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_VictoryEMU_OHLE_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_VictoryEMU_OHLE_Liv2_lencheck;
    return sw_VictoryEMU_OHLE_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_VictoryEMU_OHLE_Liv2, 5041) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_OHLESuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_VICTORYEMU);
        introduction_date:                date(1945,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            700 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_VictoryEMU_OHLE_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VictoryEMU_OHLE_Liv2_directioncheck;
        can_attach_wagon: sw_VictoryEMU_attach ;
        purchase: spriteset_VictoryEMU_OHLE_Liv2_purchase;
        additional_text: string(STR_INFO_VICTORYEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_VictoryEMU_OHLE_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (100/param_capacity_mod) ;
        power                       : 350 ;
		weight:                        30;
		running_cost_factor:             50;

    }
}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_3R_attach, vehicle_type_id){
    Item_ArclightEMU_3R_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ArclightEMU_3R_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ArclightEMU_3R_Liv1
spriteset(spriteset_ArclightEMU_3R_Liv1_Purchase,   "gfx/ArclightEMU_3R_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_ArclightEMU_3R_Liv1_Lead,   "gfx/ArclightEMU_3R_Liv1.png") {template_8(7, 39)}
spriteset(spriteset_ArclightEMU_3R_Liv1_Rear,   "gfx/ArclightEMU_3R_Liv1.png") {template_8(7, 69)}

spriteset(spriteset_ArclightEMU_3R_Liv1_DT_Lead,   "gfx/ArclightEMU_3R_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_ArclightEMU_3R_Liv1_DT_Rear,   "gfx/ArclightEMU_3R_Liv1.png") {template_8(187, 69)}

spriteset(spriteset_ArclightEMU_3R_Liv1_Trailer,   "gfx/ArclightEMU_3R_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_3R_Liv1_forward, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_3R_Liv1_Lead;
    1: spriteset_ArclightEMU_3R_Liv1_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_3R_Liv1_rev, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_3R_Liv1_DT_Lead;
    1: spriteset_ArclightEMU_3R_Liv1_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_ArclightEMU_3R_Liv1_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_ArclightEMU_3R_Liv1_forward;
    1:    sw_ArclightEMU_3R_Liv1_rev;
}

item(FEAT_TRAINS, Item_ArclightEMU_3R_Liv1, 10010) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_3RSuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_ARCLIGHTEMU);
        introduction_date:                date(1900,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            80 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             160;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ArclightEMU_3R_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ArclightEMU_3R_Liv1_directioncheck;
        can_attach_wagon: sw_ArclightEMU_3R_attach ;
        purchase: spriteset_ArclightEMU_3R_Liv1_Purchase;
        additional_text: string(STR_INFO_ARCLIGHTEMU_3R);
    }
    livery_override (Item_MU_Trailer){
        default                     : spriteset_ArclightEMU_3R_Liv1_Trailer ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 0 ;
		weight:                        32;
		running_cost_factor:             40;
    }
}

//ArclightEMU_3R_Liv2
spriteset(spriteset_ArclightEMU_3R_Liv2_Purchase,   "gfx/ArclightEMU_3R_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_ArclightEMU_3R_Liv2_Lead,   "gfx/ArclightEMU_3R_Liv2.png") {template_8(7, 39)}
spriteset(spriteset_ArclightEMU_3R_Liv2_Rear,   "gfx/ArclightEMU_3R_Liv2.png") {template_8(7, 69)}

spriteset(spriteset_ArclightEMU_3R_Liv2_DT_Lead,   "gfx/ArclightEMU_3R_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_ArclightEMU_3R_Liv2_DT_Rear,   "gfx/ArclightEMU_3R_Liv2.png") {template_8(187, 69)}

spriteset(spriteset_ArclightEMU_3R_Liv2_Trailer,   "gfx/ArclightEMU_3R_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_3R_Liv2_forward, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_3R_Liv2_Lead;
    1: spriteset_ArclightEMU_3R_Liv2_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ArclightEMU_3R_Liv2_rev, vehicle_is_flipped){
    0:    spriteset_ArclightEMU_3R_Liv2_DT_Lead;
    1: spriteset_ArclightEMU_3R_Liv2_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_ArclightEMU_3R_Liv2_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_ArclightEMU_3R_Liv2_forward;
    1:    sw_ArclightEMU_3R_Liv2_rev;
}

item(FEAT_TRAINS, Item_ArclightEMU_3R_Liv2, 10011) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_3RSuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_ARCLIGHTEMU);
        introduction_date:                date(1900,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            80 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             160;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ArclightEMU_3R_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ArclightEMU_3R_Liv2_directioncheck;
        can_attach_wagon: sw_ArclightEMU_3R_attach ;
        purchase: spriteset_ArclightEMU_3R_Liv2_Purchase;
        additional_text: string(STR_INFO_ARCLIGHTEMU_3R);
    }
    livery_override (Item_MU_Trailer){
        default                     : spriteset_ArclightEMU_3R_Liv2_Trailer ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 0 ;
		weight:                        32;
		running_cost_factor:             40;
    }
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_attach, vehicle_type_id){
    Item_KelmarkEMU_3R_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_KelmarkEMU_3R_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//KelmarkEMU_3R_Liv1
spriteset(spriteset_KelmarkEMU_3R_Liv1_purchase,   "gfx/KelmarkEMU_3R_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_KelmarkEMU_3R_Liv1_Motor_lead,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_KelmarkEMU_3R_Liv1_Motor_rear,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_KelmarkEMU_3R_Liv1_DrivingTrailer_lead,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_KelmarkEMU_3R_Liv1_DrivingTrailer_rear,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_KelmarkEMU_3R_Liv1_Trailer,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_KelmarkEMU_3R_Liv1_NonControlMotor,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_KelmarkEMU_3R_Liv1_NonControlMotor_r,   "gfx/KelmarkEMU_3R_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_3R_Liv1_Trailer;
    return spriteset_KelmarkEMU_3R_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_1_r;
    return sw_KelmarkEMU_3R_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_KelmarkEMU_3R_Liv1_Trailer;
    return sw_KelmarkEMU_3R_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_2_r;
    return sw_KelmarkEMU_3R_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_3R_Liv1_Trailer;
    3 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_1_r;
    4 : sw_KelmarkEMU_3R_Liv1_sidecheck_4_r;
    5 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_KelmarkEMU_3R_Liv1_sidecheck_6_r;
    return sw_KelmarkEMU_3R_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_3R_Liv1_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_1;
    return sw_KelmarkEMU_3R_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_1;
    return spriteset_KelmarkEMU_3R_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_2;
    return sw_KelmarkEMU_3R_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_3R_Liv1_Trailer;
    3 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_1;
    4 : sw_KelmarkEMU_3R_Liv1_sidecheck_4;
    5 : sw_KelmarkEMU_3R_Liv1_pantocheck_at_2;
    6 .. 7 : sw_KelmarkEMU_3R_Liv1_sidecheck_6;
    return sw_KelmarkEMU_3R_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_KelmarkEMU_3R_Liv1_Motor_lead; //Panto
    return spriteset_KelmarkEMU_3R_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_3R_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_KelmarkEMU_3R_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_3R_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_3R_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_KelmarkEMU_3R_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_3R_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_KelmarkEMU_3R_Liv1_Motor_lead;        //Front panto
    return spriteset_KelmarkEMU_3R_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_KelmarkEMU_3R_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_3R_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_KelmarkEMU_3R_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_3R_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_3R_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_KelmarkEMU_3R_Liv1_frontcheck; //We are going forwards
    return sw_KelmarkEMU_3R_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_3R_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_KelmarkEMU_3R_Liv1_lencheck;
    return sw_KelmarkEMU_3R_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_KelmarkEMU_3R_Liv1, 10030) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_3RSuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_KELMARKEMU);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_KelmarkEMU_3R_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_KelmarkEMU_3R_Liv1_directioncheck;
        can_attach_wagon: sw_KelmarkEMU_3R_attach ;
        purchase: spriteset_KelmarkEMU_3R_Liv1_purchase;
        additional_text: string(STR_INFO_KELMARKEMU_3R);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_KelmarkEMU_3R_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        32;
		running_cost_factor:             52;

    }
}

//KelmarkEMU_3R_Liv2
spriteset(spriteset_KelmarkEMU_3R_Liv2_purchase,   "gfx/KelmarkEMU_3R_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_KelmarkEMU_3R_Liv2_Motor_lead,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_KelmarkEMU_3R_Liv2_Motor_rear,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_KelmarkEMU_3R_Liv2_DrivingTrailer_lead,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_KelmarkEMU_3R_Liv2_DrivingTrailer_rear,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_KelmarkEMU_3R_Liv2_Trailer,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_KelmarkEMU_3R_Liv2_NonControlMotor,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_KelmarkEMU_3R_Liv2_NonControlMotor_r,   "gfx/KelmarkEMU_3R_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_3R_Liv2_Trailer;
    return spriteset_KelmarkEMU_3R_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_1_r;
    return sw_KelmarkEMU_3R_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_KelmarkEMU_3R_Liv2_Trailer;
    return sw_KelmarkEMU_3R_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_2_r;
    return sw_KelmarkEMU_3R_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_3R_Liv2_Trailer;
    3 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_1_r;
    4 : sw_KelmarkEMU_3R_Liv2_sidecheck_4_r;
    5 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_KelmarkEMU_3R_Liv2_sidecheck_6_r;
    return sw_KelmarkEMU_3R_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor_r;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_KelmarkEMU_3R_Liv2_NonControlMotor;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_1;
    return sw_KelmarkEMU_3R_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_1;
    return spriteset_KelmarkEMU_3R_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_2;
    return sw_KelmarkEMU_3R_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_KelmarkEMU_3R_Liv2_Trailer;
    3 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_1;
    4 : sw_KelmarkEMU_3R_Liv2_sidecheck_4;
    5 : sw_KelmarkEMU_3R_Liv2_pantocheck_at_2;
    6 .. 7 : sw_KelmarkEMU_3R_Liv2_sidecheck_6;
    return sw_KelmarkEMU_3R_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_KelmarkEMU_3R_Liv2_Motor_lead; //Panto
    return spriteset_KelmarkEMU_3R_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_3R_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_KelmarkEMU_3R_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_KelmarkEMU_3R_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_3R_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_KelmarkEMU_3R_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_3R_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_KelmarkEMU_3R_Liv2_Motor_lead;        //Front panto
    return spriteset_KelmarkEMU_3R_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_KelmarkEMU_3R_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_KelmarkEMU_3R_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_KelmarkEMU_3R_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_KelmarkEMU_3R_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_KelmarkEMU_3R_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_3R_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_KelmarkEMU_3R_Liv2_frontcheck; //We are going forwards
    return sw_KelmarkEMU_3R_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_KelmarkEMU_3R_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_KelmarkEMU_3R_Liv2_lencheck;
    return sw_KelmarkEMU_3R_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_KelmarkEMU_3R_Liv2, 10031) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_3RSuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_KELMARKEMU);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_KelmarkEMU_3R_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_KelmarkEMU_3R_Liv2_directioncheck;
        can_attach_wagon: sw_KelmarkEMU_3R_attach ;
        purchase: spriteset_KelmarkEMU_3R_Liv2_purchase;
        additional_text: string(STR_INFO_KELMARKEMU_3R);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_KelmarkEMU_3R_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        32;
		running_cost_factor:             52;

    }
}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_3R_attach, vehicle_type_id){
    Item_VictoryEMU_3R_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_VictoryEMU_3R_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//VictoryEMU_3R_Liv1
spriteset(spriteset_VictoryEMU_3R_Liv1_Purchase,   "gfx/VictoryEMU_3R_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_VictoryEMU_3R_Liv1_Lead,   "gfx/VictoryEMU_3R_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VictoryEMU_3R_Liv1_Rear,   "gfx/VictoryEMU_3R_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VictoryEMU_3R_Liv1_Trailer,   "gfx/VictoryEMU_3R_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_3R_Liv1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VictoryEMU_3R_Liv1_Rear;
    spriteset_VictoryEMU_3R_Liv1_Lead;
}

item(FEAT_TRAINS, Item_VictoryEMU_3R_Liv1, 10040) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_3RSuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_VICTORYEMU);
        introduction_date:                date(1945,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            700 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_VictoryEMU_3R_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VictoryEMU_3R_Liv1_last;
        can_attach_wagon: sw_VictoryEMU_3R_attach ;
        purchase: spriteset_VictoryEMU_3R_Liv1_Purchase;
        additional_text: string(STR_INFO_VICTORYEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : spriteset_VictoryEMU_3R_Liv1_Trailer ;
        length                      : 8;
        cargo_capacity              : (100/param_capacity_mod) ;
        power                       : 350 ;
		weight:                        30;
		running_cost_factor:             50;

    }
}

//VictoryEMU_3R_Liv2
spriteset(spriteset_VictoryEMU_3R_Liv2_Purchase,   "gfx/VictoryEMU_3R_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_VictoryEMU_3R_Liv2_Lead,   "gfx/VictoryEMU_3R_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VictoryEMU_3R_Liv2_Rear,   "gfx/VictoryEMU_3R_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VictoryEMU_3R_Liv2_Trailer,   "gfx/VictoryEMU_3R_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VictoryEMU_3R_Liv2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VictoryEMU_3R_Liv2_Rear;
    spriteset_VictoryEMU_3R_Liv2_Lead;
}

item(FEAT_TRAINS, Item_VictoryEMU_3R_Liv2, 10041) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: param_3RSuburbandisable == 0 ? ALL_CLIMATES : NO_CLIMATE; 
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_VICTORYEMU);
        introduction_date:                date(1945,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            700 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_VictoryEMU_3R_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VictoryEMU_3R_Liv2_last;
        can_attach_wagon: sw_VictoryEMU_3R_attach ;
        purchase: spriteset_VictoryEMU_3R_Liv2_Purchase;
        additional_text: string(STR_INFO_VICTORYEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : spriteset_VictoryEMU_3R_Liv2_Trailer ;
        length                      : 8;
        cargo_capacity              : (100/param_capacity_mod) ;
        power                       : 350 ;
		weight:                        30;
		running_cost_factor:             50;

    }
}