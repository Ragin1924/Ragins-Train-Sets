grf{
    grfid: "ZM\08\01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 3;
    min_compatible_version: 3;
//Purchase Cost Parameter
    param {
        param_purchase_cost {
            type: int;
            name: string(STR_PARAM_PURCHASE_COST);
            desc: string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Running Cost Parameter
     param {
        param_running_cost {
            type: int;
            name: string(STR_PARAM_RUNNING_COST);
            desc: string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Carry Capacity Parameter
//Get this working for the next update!
    param {
                param_capacities {
                        type: int;
                        name: string(STR_PARAM_NAME_CAPACITY);
                        desc: string(STR_PARAM_DESC_CAPACITY);
                        min_value: 0;
                        max_value: 1;
                        def_value: 0;
                        names: {
                                                0: string(STR_PARAM_REAL_CAPACITY);
                                                1: string(STR_PARAM_NORMAL_REDUCED);
                        };
                }
        }
}


//Carry Capacity Variables
if (param_capacities == 0) {
    param_capacity_mod = 0;
}

if (param_capacities == 1) {
    param_capacity_mod = 2;
}

railtypetable {
    RAIL, SAA3, ELRL
}

cargotable {
    PASS,
// Misc
    TOUR,
}


//Basecost Paramater Variables
basecost {
 PR_BUILD_VEHICLE_TRAIN: 1 + param_purchase_cost - 4;
 PR_BUILD_VEHICLE_WAGON: 3 + param_purchase_cost - 4;
 PR_RUNNING_TRAIN_ELECTRIC: 3 + param_running_cost - 4;
}

// Fix depot view
traininfo_y_offset = 2;
train_width_32_px = 1;


// Purchase Sprite
template template_purchase(x, y) {
    //[left_x, upper_y, width, height, offset_x, offset_y]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x     , y, 88, 15, -60, -11, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
}


// 8 Template
template template_8(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -14]
    [ x+9,      y,        22,        20,        -14,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -6,            -11]

    [ x+89,     y,        8,        24,        -3,            -14]
    [ x+98,     y,        22,        20,        -14,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -6,            -11]
}

// 8 Template Reversed
template template_8_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up

    [ x+89,     y,        8,        24,        -3,            -14]
    [ x+98,     y,        22,        20,        -14,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -6,            -11]

    [ x,        y,        8,        24,        -3,            -14]
    [ x+9,      y,        22,        20,        -14,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -6,            -11]
}

//7 Template
template template_7(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x    , y, 8 , 24,  -3, -15]
    [ x+9  , y, 22, 20, -13, -11]
    [ x+32 , y, 33, 16, -12, -12]
    [ x+66 , y, 22, 20,  -7, -11]

    [ x+89 , y, 8 , 24,  -3, -15]
    [ x+98 , y, 22, 20, -13, -11]
    [ x+121, y, 33, 16, -16, -12]
    [ x+155, y, 22, 20,  -7, -11]
}

//7 Template Reversed
template template_7_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89 , y, 8 , 24,  -3, -15]
    [ x+98 , y, 22, 20, -13, -11]
    [ x+121, y, 33, 16, -16, -12]
    [ x+155, y, 22, 20,  -7, -11]

    [ x    , y, 8 , 24,  -3, -15]
    [ x+9  , y, 22, 20, -13, -11]
    [ x+32 , y, 33, 16, -12, -12]
    [ x+66 , y, 22, 20,  -7, -11]
}

// 6 Template
template template_6(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        19,        -3,            -13]
    [ x+13,      y,        18,        20,        -11,        -11]
    [ x+40,     y,        25,        16,        -9,        -12]
    [ x+70,     y,        18,        20,        -1,            -11]
    [ x+89,     y+5,        8,        19,         -3,            -9]
    [ x+98,     y,        18,        20,        -15,        -11]
    [ x+121,    y,        25,        16,        -17,        -12]
    [ x+155,    y,        20,        18,         -5,            -11]
}

spriteset(spriteset_MU_purchase,   "gfx/El_MUDC.png") {template_purchase(7, 21)}
spriteset(spriteset_MU_trailer,   "gfx/El_MUDC.png") {template_7(7, 89)}

//Vehicle
item (FEAT_TRAINS, ITEM_MU_TRAILER) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_MU_TRAILER);
        introduction_date:                date(1890,1,1);
        vehicle_life:                     30;
        model_life:                        36;
        length:                            7;

        weight:                         28 ton;
        speed:                            80 mph;
        cost_factor:                     7;
        running_cost_factor:             10;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    100;
        loading_speed: 30;

    }
    graphics {
        default:                        spriteset_MU_trailer;
        purchase:                        spriteset_MU_purchase;
        additional_text: string(STR_MU_TRAILER_INFO);

}
}

//Kathleen Railmotor
//Kathleen Railmotor
spriteset(spriteset_SSD_DMU_Kathleen_Purchase,   "gfx/SSD_DMU_Kathleen.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Kathleen,   "gfx/SSD_DMU_Kathleen.png") {template_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Kathleen_r,   "gfx/SSD_DMU_Kathleen.png") {template_7(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_Kathleen_Headlights,   "gfx/SSD_DMU_Kathleen_Headlights.png") {template_7(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Kathleen_Headlights_r,   "gfx/SSD_DMU_Kathleen_Headlights.png") {template_7(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Kathleen_Markerlights,   "gfx/SSD_DMU_Kathleen_Markerlights.png") {template_7(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Kathleen_Markerlights_r,   "gfx/SSD_DMU_Kathleen_Markerlights.png") {template_7(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_attach, vehicle_type_id){
    item_SSD_DMU_Kathleen     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Kathleen_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Kathleen_Headlights_r;
    spriteset_SSD_DMU_Kathleen_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Kathleen_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Kathleen_Markerlights_r;
    spriteset_SSD_DMU_Kathleen_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Kathleen_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Kathleen_r;
    spriteset_SSD_DMU_Kathleen ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Kathleen_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Kathleen_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Kathleen_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Kathleen_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Kathleen_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Kathleen_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Kathleen_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Kathleen_markerlight_stack;
    return sw_SSD_DMU_Kathleen_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_lead, position_in_consist) {
    0: sw_SSD_DMU_Kathleen_headlight_stack;
    return sw_SSD_DMU_Kathleen_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Kathleen_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Kathleen_headlight_and_marker_stack;
return sw_SSD_DMU_Kathleen_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Kathleen, 1000) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_KATHLEEN);
        introduction_date:                date(1914,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         27 ton;
        speed:                            65 km/h;
        power:                            100 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             48;
        loading_speed: 20;
        cargo_capacity:                  65/param_capacity_mod;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Kathleen_solo;
        can_attach_wagon: sw_SSD_DMU_Kathleen_attach;
        purchase: spriteset_SSD_DMU_Kathleen_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_KATHLEEN);
}
}

//CPH Railmotor
//CC1
spriteset(spriteset_SSD_DMU_CPH_Purchase,   "gfx/SSD_DMU_CPH.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_CPH,   "gfx/SSD_DMU_CPH.png") {template_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_CPH_r,   "gfx/SSD_DMU_CPH.png") {template_7(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_CPH_Headlights,   "gfx/SSD_DMU_CPH_Headlights.png") {template_7(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_CPH_Headlights_r,   "gfx/SSD_DMU_CPH_Headlights.png") {template_7(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_CPH_Markerlights,   "gfx/SSD_DMU_CPH_Markerlights.png") {template_7(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_CPH_Markerlights_r,   "gfx/SSD_DMU_CPH_Markerlights.png") {template_7(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_attach, vehicle_type_id){
    item_SSD_DMU_CPH     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_CPH_TwoTone     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_CPH_Striped     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Headlights_r;
    spriteset_SSD_DMU_CPH_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Markerlights_r;
    spriteset_SSD_DMU_CPH_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_CPH_r;
    spriteset_SSD_DMU_CPH ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_CPH_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_CPH_markerlight_stack;
    return sw_SSD_DMU_CPH_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_lead, position_in_consist) {
    0: sw_SSD_DMU_CPH_headlight_stack;
    return sw_SSD_DMU_CPH_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_CPH_headlight_and_marker_stack;
return sw_SSD_DMU_CPH_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_CPH, 1100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_CPH);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         23 ton;
        speed:                            75 km/h;
        power:                            175 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             55;
        loading_speed: 25;
        cargo_capacity:                  60/param_capacity_mod;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_CPH_solo;
        can_attach_wagon: sw_SSD_DMU_CPH_attach;
        purchase: spriteset_SSD_DMU_CPH_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_CPH);
}
}

//CPH Railmotor
//Two Tone
spriteset(spriteset_SSD_DMU_CPH_TwoTone_Purchase,   "gfx/SSD_DMU_CPH_TwoTone.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_CPH_TwoTone,   "gfx/SSD_DMU_CPH_TwoTone.png") {template_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_CPH_TwoTone_r,   "gfx/SSD_DMU_CPH_TwoTone.png") {template_7(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_TwoTone_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Headlights_r;
    spriteset_SSD_DMU_CPH_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_TwoTone_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Markerlights_r;
    spriteset_SSD_DMU_CPH_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_TwoTone_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_CPH_TwoTone_r;
    spriteset_SSD_DMU_CPH_TwoTone ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_TwoTone_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_TwoTone_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_TwoTone_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_TwoTone_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_TwoTone_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_TwoTone_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_CPH_TwoTone_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_CPH_TwoTone_markerlight_stack;
    return sw_SSD_DMU_CPH_TwoTone_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_lead, position_in_consist) {
    0: sw_SSD_DMU_CPH_TwoTone_headlight_stack;
    return sw_SSD_DMU_CPH_TwoTone_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_CPH_TwoTone_headlight_and_marker_stack;
return sw_SSD_DMU_CPH_TwoTone_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_CPH_TwoTone, 1101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_CPH);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         23 ton;
        speed:                            75 km/h;
        power:                            175 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             55;
        loading_speed: 25;
        cargo_capacity:                  60/param_capacity_mod;

        variant_group: item_SSD_DMU_CPH;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_CPH_TwoTone_solo;
        can_attach_wagon: sw_SSD_DMU_CPH_attach;
        purchase: spriteset_SSD_DMU_CPH_TwoTone_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_CPH);
}
}

//CPH Railmotor
//Striped
spriteset(spriteset_SSD_DMU_CPH_Striped_Purchase,   "gfx/SSD_DMU_CPH_Striped.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_CPH_Striped,   "gfx/SSD_DMU_CPH_Striped.png") {template_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_CPH_Striped_r,   "gfx/SSD_DMU_CPH_Striped.png") {template_7(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_Striped_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Headlights_r;
    spriteset_SSD_DMU_CPH_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_Striped_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Markerlights_r;
    spriteset_SSD_DMU_CPH_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_Striped_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_CPH_Striped_r;
    spriteset_SSD_DMU_CPH_Striped ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_Striped_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_Striped_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_Striped_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_Striped_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_Striped_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_Striped_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_CPH_Striped_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_CPH_Striped_markerlight_stack;
    return sw_SSD_DMU_CPH_Striped_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_lead, position_in_consist) {
    0: sw_SSD_DMU_CPH_Striped_headlight_stack;
    return sw_SSD_DMU_CPH_Striped_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_CPH_Striped_headlight_and_marker_stack;
return sw_SSD_DMU_CPH_Striped_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_CPH_Striped, 1102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_CPH);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         23 ton;
        speed:                            75 km/h;
        power:                            175 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             55;
        loading_speed: 25;
        cargo_capacity:                  60/param_capacity_mod;

        variant_group: item_SSD_DMU_CPH;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_CPH_Striped_solo;
        can_attach_wagon: sw_SSD_DMU_CPH_attach;
        purchase: spriteset_SSD_DMU_CPH_Striped_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_CPH);
}
}

//Edison Railmotor
spriteset(spriteset_SSD_DMU_Edison_Purchase,   "gfx/SSD_DMU_Edison.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Edison,   "gfx/SSD_DMU_Edison.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Edison_r,   "gfx/SSD_DMU_Edison.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_Edison_Headlights,   "gfx/SSD_DMU_Edison_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Edison_Headlights_r,   "gfx/SSD_DMU_Edison_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Edison_Markerlights,   "gfx/SSD_DMU_Edison_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Edison_Markerlights_r,   "gfx/SSD_DMU_Edison_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_attach, vehicle_type_id){
    item_SSD_DMU_Edison     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Edison_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Edison_Headlights_r;
    spriteset_SSD_DMU_Edison_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Edison_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Edison_Markerlights_r;
    spriteset_SSD_DMU_Edison_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Edison_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Edison_r;
    spriteset_SSD_DMU_Edison ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Edison_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Edison_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Edison_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Edison_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Edison_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Edison_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Edison_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Edison_markerlight_stack;
    return sw_SSD_DMU_Edison_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_lead, position_in_consist) {
    0: sw_SSD_DMU_Edison_headlight_stack;
    return sw_SSD_DMU_Edison_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Edison_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Edison_headlight_and_marker_stack;
return sw_SSD_DMU_Edison_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Edison, 1150) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_DMU_EDISON);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            70 km/h;
        power:                            120 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             34;
        cargo_capacity:                  60/param_capacity_mod;
        loading_speed: 25;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Edison_solo;
        can_attach_wagon: sw_SSD_DMU_Edison_attach;
        purchase: spriteset_SSD_DMU_Edison_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_EDISON);
}
}

//PERM Railmotor
//CC1
spriteset(spriteset_SSD_DMU_PERM_Purchase,   "gfx/SSD_DMU_PERM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_PERM,   "gfx/SSD_DMU_PERM.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_PERM_r,   "gfx/SSD_DMU_PERM.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_PERM_Headlights,   "gfx/SSD_DMU_PERM_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_PERM_Headlights_r,   "gfx/SSD_DMU_PERM_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_PERM_Markerlights,   "gfx/SSD_DMU_PERM_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_PERM_Markerlights_r,   "gfx/SSD_DMU_PERM_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_attach, vehicle_type_id){
    item_SSD_DMU_PERM     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_PERM_VR     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Headlights_r;
    spriteset_SSD_DMU_PERM_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Markerlights_r;
    spriteset_SSD_DMU_PERM_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_PERM_r;
    spriteset_SSD_DMU_PERM ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_PERM_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_PERM_markerlight_stack;
    return sw_SSD_DMU_PERM_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_lead, position_in_consist) {
    0: sw_SSD_DMU_PERM_headlight_stack;
    return sw_SSD_DMU_PERM_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_PERM_headlight_and_marker_stack;
return sw_SSD_DMU_PERM_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_PERM, 1200) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_PERM);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_PERM_solo;
        can_attach_wagon: sw_SSD_DMU_PERM_attach;
        purchase: spriteset_SSD_DMU_PERM_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_PERM);
}
}

//PERM Railmotor
//VR
spriteset(spriteset_SSD_DMU_PERM_VR_Purchase,   "gfx/SSD_DMU_PERM_VR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_PERM_VR,   "gfx/SSD_DMU_PERM_VR.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_PERM_VR_r,   "gfx/SSD_DMU_PERM_VR.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_VR_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Headlights_r;
    spriteset_SSD_DMU_PERM_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_VR_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Markerlights_r;
    spriteset_SSD_DMU_PERM_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_VR_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_PERM_VR_r;
    spriteset_SSD_DMU_PERM_VR ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_VR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_VR_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_VR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_VR_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_VR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_VR_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_PERM_VR_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_PERM_VR_markerlight_stack;
    return sw_SSD_DMU_PERM_VR_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_lead, position_in_consist) {
    0: sw_SSD_DMU_PERM_VR_headlight_stack;
    return sw_SSD_DMU_PERM_VR_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_PERM_VR_headlight_and_marker_stack;
return sw_SSD_DMU_PERM_VR_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_PERM_VR, 1201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_PERM);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_PERM;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_PERM_VR_solo;
        can_attach_wagon: sw_SSD_DMU_PERM_attach;
        purchase: spriteset_SSD_DMU_PERM_VR_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_PERM);
}
}

//Standard Railmotor
//CC1
spriteset(spriteset_SSD_DMU_Standard_Purchase,   "gfx/SSD_DMU_Standard.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Standard,   "gfx/SSD_DMU_Standard.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Standard_r,   "gfx/SSD_DMU_Standard.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_Standard_Headlights,   "gfx/SSD_DMU_Standard_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Standard_Headlights_r,   "gfx/SSD_DMU_Standard_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Standard_Markerlights,   "gfx/SSD_DMU_Standard_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Standard_Markerlights_r,   "gfx/SSD_DMU_Standard_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_attach, vehicle_type_id){
    item_SSD_DMU_Standard     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Standard_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Standard_Late     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Standard_Headlights_r;
    spriteset_SSD_DMU_Standard_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Standard_Markerlights_r;
    spriteset_SSD_DMU_Standard_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Standard_r;
    spriteset_SSD_DMU_Standard ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Standard_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Standard_markerlight_stack;
    return sw_SSD_DMU_Standard_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_lead, position_in_consist) {
    0: sw_SSD_DMU_Standard_headlight_stack;
    return sw_SSD_DMU_Standard_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Standard_headlight_and_marker_stack;
return sw_SSD_DMU_Standard_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Standard, 1250) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_STANDARD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Standard_solo;
        can_attach_wagon: sw_SSD_DMU_Standard_attach;
        purchase: spriteset_SSD_DMU_Standard_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_STANDARD);
}
}

//Standard Railmotor
//Early
spriteset(spriteset_SSD_DMU_Standard_Early_Purchase,   "gfx/SSD_DMU_Standard_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Standard_Early,   "gfx/SSD_DMU_Standard_Early.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Standard_Early_r,   "gfx/SSD_DMU_Standard_Early.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Standard_Headlights_r;
    spriteset_SSD_DMU_Standard_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Standard_Markerlights_r;
    spriteset_SSD_DMU_Standard_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Standard_Early_r;
    spriteset_SSD_DMU_Standard_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Standard_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Early_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Standard_Early_markerlight_stack;
    return sw_SSD_DMU_Standard_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Early_lead, position_in_consist) {
    0: sw_SSD_DMU_Standard_Early_headlight_stack;
    return sw_SSD_DMU_Standard_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Standard_Early_headlight_and_marker_stack;
return sw_SSD_DMU_Standard_Early_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Standard_Early, 1251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_STANDARD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Standard_Early_solo;
        can_attach_wagon: sw_SSD_DMU_Standard_attach;
        purchase: spriteset_SSD_DMU_Standard_Early_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_STANDARD);
}
}

//Standard Railmotor
//Late
spriteset(spriteset_SSD_DMU_Standard_Late_Purchase,   "gfx/SSD_DMU_Standard_Late.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Standard_Late,   "gfx/SSD_DMU_Standard_Late.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Standard_Late_r,   "gfx/SSD_DMU_Standard_Late.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_Late_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Standard_Headlights_r;
    spriteset_SSD_DMU_Standard_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_Late_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Standard_Markerlights_r;
    spriteset_SSD_DMU_Standard_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Standard_Late_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Standard_Late_r;
    spriteset_SSD_DMU_Standard_Late ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Late_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_Late_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_Late_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Late_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_Late_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_Late_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Late_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Standard_Late_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Standard_Late_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Standard_Late_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Late_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Standard_Late_markerlight_stack;
    return sw_SSD_DMU_Standard_Late_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Late_lead, position_in_consist) {
    0: sw_SSD_DMU_Standard_Late_headlight_stack;
    return sw_SSD_DMU_Standard_Late_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Standard_Late_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Standard_Late_headlight_and_marker_stack;
return sw_SSD_DMU_Standard_Late_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Standard_Late, 1252) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_STANDARD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Standard_Late_solo;
        can_attach_wagon: sw_SSD_DMU_Standard_attach;
        purchase: spriteset_SSD_DMU_Standard_Late_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_STANDARD);
}
}

//Vulcan Railmotor
//CC1
spriteset(spriteset_SSD_DMU_Vulcan_Purchase,   "gfx/SSD_DMU_Vulcan.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Vulcan,   "gfx/SSD_DMU_Vulcan.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Vulcan_r,   "gfx/SSD_DMU_Vulcan.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_Vulcan_Headlights,   "gfx/SSD_DMU_Vulcan_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Vulcan_Headlights_r,   "gfx/SSD_DMU_Vulcan_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Vulcan_Markerlights,   "gfx/SSD_DMU_Vulcan_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Vulcan_Markerlights_r,   "gfx/SSD_DMU_Vulcan_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_attach, vehicle_type_id){
    item_SSD_DMU_Vulcan     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Vulcan_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Headlights_r;
    spriteset_SSD_DMU_Vulcan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Markerlights_r;
    spriteset_SSD_DMU_Vulcan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Vulcan_r;
    spriteset_SSD_DMU_Vulcan ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Vulcan_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Vulcan_markerlight_stack;
    return sw_SSD_DMU_Vulcan_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_lead, position_in_consist) {
    0: sw_SSD_DMU_Vulcan_headlight_stack;
    return sw_SSD_DMU_Vulcan_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Vulcan_headlight_and_marker_stack;
return sw_SSD_DMU_Vulcan_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Vulcan, 1300) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_VULCAN);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             55;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Vulcan_solo;
        can_attach_wagon: sw_SSD_DMU_Vulcan_attach;
        purchase: spriteset_SSD_DMU_Vulcan_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_VULCAN);
}
}

//Vulcan Railmotor
//Stripe
spriteset(spriteset_SSD_DMU_Vulcan_Stripe_Purchase,   "gfx/SSD_DMU_Vulcan_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Vulcan_Stripe,   "gfx/SSD_DMU_Vulcan_Stripe.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Vulcan_Stripe_r,   "gfx/SSD_DMU_Vulcan_Stripe.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_Stripe_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Headlights_r;
    spriteset_SSD_DMU_Vulcan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_Stripe_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Markerlights_r;
    spriteset_SSD_DMU_Vulcan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_Stripe_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Vulcan_Stripe_r;
    spriteset_SSD_DMU_Vulcan_Stripe ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_Stripe_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_Stripe_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_Stripe_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Vulcan_Stripe_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Vulcan_Stripe_markerlight_stack;
    return sw_SSD_DMU_Vulcan_Stripe_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_lead, position_in_consist) {
    0: sw_SSD_DMU_Vulcan_Stripe_headlight_stack;
    return sw_SSD_DMU_Vulcan_Stripe_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Vulcan_Stripe_headlight_and_marker_stack;
return sw_SSD_DMU_Vulcan_Stripe_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Vulcan_Stripe, 1301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_VULCAN);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             55;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_Vulcan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Vulcan_Stripe_solo;
        can_attach_wagon: sw_SSD_DMU_Vulcan_attach;
        purchase: spriteset_SSD_DMU_Vulcan_Stripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_VULCAN);
}
}

//600/700 Class
//620/720 Class
//CC1
spriteset(spriteset_SSD_DMU_610Class_Purchase,   "gfx/SSD_DMU_610Class.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_Lead,   "gfx/SSD_DMU_610Class.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_Rear,   "gfx/SSD_DMU_610Class.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_Mid,   "gfx/SSD_DMU_610Class.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_Trailer,   "gfx/SSD_DMU_610Class.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_attach, vehicle_type_id){
    item_SSD_DMU_610Class     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_610Class_PinStripe     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_610Class_Buff1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_610Class_Buff2     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_610Class_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_610Class_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_Rear;
    spriteset_SSD_DMU_610Class_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_610Class, 1350) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
    }
}

//600/700 Class
//620/720 Class
//PinStripe
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Purchase,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Lead,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Rear,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Mid,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Trailer,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_PinStripe_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_PinStripe_Rear;
    spriteset_SSD_DMU_610Class_PinStripe_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_610Class_PinStripe, 1351) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_610Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_PinStripe_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_PinStripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_PinStripe_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
    }
}

//600/700 Class
//620/720 Class
//Buff1
spriteset(spriteset_SSD_DMU_610Class_Buff1_Purchase,   "gfx/SSD_DMU_610Class_Buff1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_Buff1_Lead,   "gfx/SSD_DMU_610Class_Buff1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_Buff1_Rear,   "gfx/SSD_DMU_610Class_Buff1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_Buff1_Mid,   "gfx/SSD_DMU_610Class_Buff1.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_Buff1_Trailer,   "gfx/SSD_DMU_610Class_Buff1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_Buff1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_Buff1_Rear;
    spriteset_SSD_DMU_610Class_Buff1_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_610Class_Buff1, 1352) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_610Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_Buff1_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_Buff1_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_Buff1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
    }
}

//600/700 Class
//620/720 Class
//Buff2
spriteset(spriteset_SSD_DMU_610Class_Buff2_Purchase,   "gfx/SSD_DMU_610Class_Buff2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_Buff2_Lead,   "gfx/SSD_DMU_610Class_Buff2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_Buff2_Rear,   "gfx/SSD_DMU_610Class_Buff2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_Buff2_Mid,   "gfx/SSD_DMU_610Class_Buff2.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_Buff2_Trailer,   "gfx/SSD_DMU_610Class_Buff2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_Buff2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_Buff2_Rear;
    spriteset_SSD_DMU_610Class_Buff2_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_610Class_Buff2, 1353) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_610Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_Buff2_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_Buff2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_Buff2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
    }
}

//600/700 Class
//620/720 Class
//SRA
spriteset(spriteset_SSD_DMU_610Class_SRA_Purchase,   "gfx/SSD_DMU_610Class_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_SRA_Lead,   "gfx/SSD_DMU_610Class_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_SRA_Rear,   "gfx/SSD_DMU_610Class_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_SRA_Mid,   "gfx/SSD_DMU_610Class_SRA.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_SRA_Trailer,   "gfx/SSD_DMU_610Class_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_SRA_Rear;
    spriteset_SSD_DMU_610Class_SRA_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_610Class_SRA, 1354) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85;
        loading_speed: 10;

        variant_group: item_SSD_DMU_610Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_SRA_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_SRA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
    }
}

//600/700 Class
//620/720 Class
//CityRail
spriteset(spriteset_SSD_DMU_610Class_CityRail_Purchase,   "gfx/SSD_DMU_610Class_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_CityRail_Lead,   "gfx/SSD_DMU_610Class_CityRail.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_CityRail_Rear,   "gfx/SSD_DMU_610Class_CityRail.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_CityRail_Mid,   "gfx/SSD_DMU_610Class_CityRail.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_CityRail_Trailer,   "gfx/SSD_DMU_610Class_CityRail.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_CityRail_Rear;
    spriteset_SSD_DMU_610Class_CityRail_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_610Class_CityRail, 1355) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_SSD_DMU_610Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADAX_attach, vehicle_type_id){
    item_SSD_DMU_ADA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADA_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADA_Yellow     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADA_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADA_Westrail     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADG     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADG_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADG_Yellow     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADG_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADG_Westrail     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//WAGR ADA
//CC1
spriteset(spriteset_SSD_DMU_ADA_Purchase,   "gfx/SSD_DMU_ADA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA,   "gfx/SSD_DMU_ADA.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_r,   "gfx/SSD_DMU_ADA.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_ADAX_Headlights,   "gfx/SSD_DMU_ADAX_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_ADAX_Headlights_r,   "gfx/SSD_DMU_ADAX_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_ADAX_Markerlights,   "gfx/SSD_DMU_ADAX_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_ADAX_Markerlights_r,   "gfx/SSD_DMU_ADAX_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)



// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_r;
    spriteset_SSD_DMU_ADA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_markerlight_stack;
    return sw_SSD_DMU_ADA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_headlight_stack;
    return sw_SSD_DMU_ADA_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADA, 1400) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Early
spriteset(spriteset_SSD_DMU_ADA_Early_Purchase,   "gfx/SSD_DMU_ADA_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Early,   "gfx/SSD_DMU_ADA_Early.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Early_r,   "gfx/SSD_DMU_ADA_Early.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Early_r;
    spriteset_SSD_DMU_ADA_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Early_markerlight_stack;
    return sw_SSD_DMU_ADA_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Early_headlight_stack;
    return sw_SSD_DMU_ADA_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Early_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Early_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADA_Early, 1401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Early_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Early_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Yellow
spriteset(spriteset_SSD_DMU_ADA_Yellow_Purchase,   "gfx/SSD_DMU_ADA_Yellow.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Yellow,   "gfx/SSD_DMU_ADA_Yellow.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Yellow_r,   "gfx/SSD_DMU_ADA_Yellow.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Yellow_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Yellow_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Yellow_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Yellow_r;
    spriteset_SSD_DMU_ADA_Yellow ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Yellow_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Yellow_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Yellow_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Yellow_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Yellow_markerlight_stack;
    return sw_SSD_DMU_ADA_Yellow_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Yellow_headlight_stack;
    return sw_SSD_DMU_ADA_Yellow_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Yellow_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Yellow_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADA_Yellow, 1402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Yellow_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Yellow_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Stripe
spriteset(spriteset_SSD_DMU_ADA_Stripe_Purchase,   "gfx/SSD_DMU_ADA_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Stripe,   "gfx/SSD_DMU_ADA_Stripe.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Stripe_r,   "gfx/SSD_DMU_ADA_Stripe.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Stripe_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Stripe_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Stripe_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Stripe_r;
    spriteset_SSD_DMU_ADA_Stripe ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Stripe_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Stripe_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Stripe_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Stripe_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Stripe_markerlight_stack;
    return sw_SSD_DMU_ADA_Stripe_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Stripe_headlight_stack;
    return sw_SSD_DMU_ADA_Stripe_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Stripe_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Stripe_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADA_Stripe, 1403) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Stripe_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Stripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Westrail
spriteset(spriteset_SSD_DMU_ADA_Westrail_Purchase,   "gfx/SSD_DMU_ADA_Westrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Westrail,   "gfx/SSD_DMU_ADA_Westrail.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Westrail_r,   "gfx/SSD_DMU_ADA_Westrail.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Westrail_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Westrail_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Westrail_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Westrail_r;
    spriteset_SSD_DMU_ADA_Westrail ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Westrail_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Westrail_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Westrail_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Westrail_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Westrail_markerlight_stack;
    return sw_SSD_DMU_ADA_Westrail_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Westrail_headlight_stack;
    return sw_SSD_DMU_ADA_Westrail_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Westrail_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Westrail_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADA_Westrail, 1404) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Westrail_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Westrail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//CC1
spriteset(spriteset_SSD_DMU_ADG_Purchase,   "gfx/SSD_DMU_ADG.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG,   "gfx/SSD_DMU_ADG.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_r,   "gfx/SSD_DMU_ADG.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_r;
    spriteset_SSD_DMU_ADG ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_markerlight_stack;
    return sw_SSD_DMU_ADG_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_headlight_stack;
    return sw_SSD_DMU_ADG_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADG, 1450) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

//        variant_group: item_SSD_DMU_ADA;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Early
spriteset(spriteset_SSD_DMU_ADG_Early_Purchase,   "gfx/SSD_DMU_ADG_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Early,   "gfx/SSD_DMU_ADG_Early.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Early_r,   "gfx/SSD_DMU_ADG_Early.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Early_r;
    spriteset_SSD_DMU_ADG_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Early_markerlight_stack;
    return sw_SSD_DMU_ADG_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Early_headlight_stack;
    return sw_SSD_DMU_ADG_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Early_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Early_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADG_Early, 1451) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Early_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Early_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Yellow
spriteset(spriteset_SSD_DMU_ADG_Yellow_Purchase,   "gfx/SSD_DMU_ADG_Yellow.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Yellow,   "gfx/SSD_DMU_ADG_Yellow.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Yellow_r,   "gfx/SSD_DMU_ADG_Yellow.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Yellow_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Yellow_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Yellow_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Yellow_r;
    spriteset_SSD_DMU_ADG_Yellow ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Yellow_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Yellow_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Yellow_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Yellow_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Yellow_markerlight_stack;
    return sw_SSD_DMU_ADG_Yellow_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Yellow_headlight_stack;
    return sw_SSD_DMU_ADG_Yellow_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Yellow_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Yellow_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADG_Yellow, 1452) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Yellow_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Yellow_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Stripe
spriteset(spriteset_SSD_DMU_ADG_Stripe_Purchase,   "gfx/SSD_DMU_ADG_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Stripe,   "gfx/SSD_DMU_ADG_Stripe.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Stripe_r,   "gfx/SSD_DMU_ADG_Stripe.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Stripe_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Stripe_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Stripe_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Stripe_r;
    spriteset_SSD_DMU_ADG_Stripe ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Stripe_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Stripe_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Stripe_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Stripe_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Stripe_markerlight_stack;
    return sw_SSD_DMU_ADG_Stripe_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Stripe_headlight_stack;
    return sw_SSD_DMU_ADG_Stripe_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Stripe_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Stripe_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADG_Stripe, 1453) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Stripe_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Stripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Westrail
spriteset(spriteset_SSD_DMU_ADG_Westrail_Purchase,   "gfx/SSD_DMU_ADG_Westrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Westrail,   "gfx/SSD_DMU_ADG_Westrail.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Westrail_r,   "gfx/SSD_DMU_ADG_Westrail.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Westrail_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Westrail_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Westrail_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Westrail_r;
    spriteset_SSD_DMU_ADG_Westrail ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Westrail_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Westrail_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Westrail_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Westrail_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Westrail_markerlight_stack;
    return sw_SSD_DMU_ADG_Westrail_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Westrail_headlight_stack;
    return sw_SSD_DMU_ADG_Westrail_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Westrail_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Westrail_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADG_Westrail, 1454) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Westrail_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Westrail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//SMR Railcar
//CC1
spriteset(spriteset_SSD_DMU_SMR_Purchase,   "gfx/SSD_DMU_SMR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_SMR,   "gfx/SSD_DMU_SMR.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_SMR_r,   "gfx/SSD_DMU_SMR.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_SMR_Headlights,   "gfx/SSD_DMU_SMR_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_SMR_Headlights_r,   "gfx/SSD_DMU_SMR_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_SMR_Markerlights,   "gfx/SSD_DMU_SMR_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_SMR_Markerlights_r,   "gfx/SSD_DMU_SMR_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_attach, vehicle_type_id){
    item_SSD_DMU_SMR     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_SMR_SMR     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_SMR_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_SMR_Headlights_r;
    spriteset_SSD_DMU_SMR_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_SMR_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_SMR_Markerlights_r;
    spriteset_SSD_DMU_SMR_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_SMR_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_SMR_r;
    spriteset_SSD_DMU_SMR ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_SMR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_SMR_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_SMR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_SMR_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_SMR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_SMR_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_SMR_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_SMR_markerlight_stack;
    return sw_SSD_DMU_SMR_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_lead, position_in_consist) {
    0: sw_SSD_DMU_SMR_headlight_stack;
    return sw_SSD_DMU_SMR_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_SMR_headlight_and_marker_stack;
return sw_SSD_DMU_SMR_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_SMR, 1500) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SMR);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            80 km/h;
        power:                            233 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             52;
        cargo_capacity:                  110/param_capacity_mod;
        loading_speed: 30;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_SMR_solo;
        can_attach_wagon: sw_SSD_DMU_SMR_attach;
        purchase: spriteset_SSD_DMU_SMR_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SMR);
}
}

//SMR Railcar
//SMR
spriteset(spriteset_SSD_DMU_SMR_SMR_Purchase,   "gfx/SSD_DMU_SMR_SMR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_SMR_SMR,   "gfx/SSD_DMU_SMR_SMR.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_SMR_SMR_r,   "gfx/SSD_DMU_SMR_SMR.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_SMR_SMR_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_SMR_Headlights_r;
    spriteset_SSD_DMU_SMR_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_SMR_SMR_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_SMR_Markerlights_r;
    spriteset_SSD_DMU_SMR_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_SMR_SMR_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_SMR_SMR_r;
    spriteset_SSD_DMU_SMR_SMR ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_SMR_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_SMR_SMR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_SMR_SMR_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_SMR_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_SMR_SMR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_SMR_SMR_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_SMR_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_SMR_SMR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_SMR_SMR_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_SMR_SMR_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_SMR_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_SMR_SMR_markerlight_stack;
    return sw_SSD_DMU_SMR_SMR_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_SMR_lead, position_in_consist) {
    0: sw_SSD_DMU_SMR_SMR_headlight_stack;
    return sw_SSD_DMU_SMR_SMR_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_SMR_SMR_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_SMR_SMR_headlight_and_marker_stack;
return sw_SSD_DMU_SMR_SMR_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_SMR_SMR, 1501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SMR);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            80 km/h;
        power:                            233 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             52;
        cargo_capacity:                  110/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_SMR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_SMR_SMR_solo;
        can_attach_wagon: sw_SSD_DMU_SMR_attach;
        purchase: spriteset_SSD_DMU_SMR_SMR_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SMR);
}
}

//ADK DMU
//CC1
spriteset(spriteset_SSD_DMU_ADK_Purchase,   "gfx/SSD_DMU_ADK.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Lead,   "gfx/SSD_DMU_ADK.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Rear,   "gfx/SSD_DMU_ADK.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Mid,   "gfx/SSD_DMU_ADK.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Trailer,   "gfx/SSD_DMU_ADK.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_attach, vehicle_type_id){
    item_SSD_DMU_ADK     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADK_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADK_Perth     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_ADK_Auckland     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Rear;
    spriteset_SSD_DMU_ADK_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADK, 1550) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
    }

}

//ADK DMU
//Silver
spriteset(spriteset_SSD_DMU_ADK_Silver_Purchase,   "gfx/SSD_DMU_ADK_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Silver_Lead,   "gfx/SSD_DMU_ADK_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Silver_Rear,   "gfx/SSD_DMU_ADK_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Silver_Mid,   "gfx/SSD_DMU_ADK_Silver.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Silver_Trailer,   "gfx/SSD_DMU_ADK_Silver.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Silver_Rear;
    spriteset_SSD_DMU_ADK_Silver_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADK_Silver, 1551) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_ADK;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_Silver_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Silver_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
    }

}

//ADK DMU
//Perth
spriteset(spriteset_SSD_DMU_ADK_Perth_Purchase,   "gfx/SSD_DMU_ADK_Perth.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Perth_Lead,   "gfx/SSD_DMU_ADK_Perth.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Perth_Rear,   "gfx/SSD_DMU_ADK_Perth.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Perth_Mid,   "gfx/SSD_DMU_ADK_Perth.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Perth_Trailer,   "gfx/SSD_DMU_ADK_Perth.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_Perth_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Perth_Rear;
    spriteset_SSD_DMU_ADK_Perth_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADK_Perth, 1552) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_ADK;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_Perth_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Perth_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Perth_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
    }
}

//ADK DMU
//Auckland
spriteset(spriteset_SSD_DMU_ADK_Auckland_Purchase,   "gfx/SSD_DMU_ADK_Auckland.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Auckland_Lead,   "gfx/SSD_DMU_ADK_Auckland.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Auckland_Rear,   "gfx/SSD_DMU_ADK_Auckland.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Auckland_Mid,   "gfx/SSD_DMU_ADK_Auckland.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Auckland_Trailer,   "gfx/SSD_DMU_ADK_Auckland.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_Auckland_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Auckland_Rear;
    spriteset_SSD_DMU_ADK_Auckland_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_ADK_Auckland, 1553) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_ADK;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_Auckland_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Auckland_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Auckland_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
    }
}

//1300 Class
//CC1
spriteset(spriteset_SSD_DMU_1300Class_Purchase,   "gfx/SSD_DMU_1300Class.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_Lead,   "gfx/SSD_DMU_1300Class.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_Rear,   "gfx/SSD_DMU_1300Class.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_Mid,   "gfx/SSD_DMU_1300Class.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_Trailer,   "gfx/SSD_DMU_1300Class.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_attach, vehicle_type_id){
    item_SSD_DMU_1300Class     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1300Class_PTC     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1300Class_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_Rear;
    spriteset_SSD_DMU_1300Class_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1300Class, 1600) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 20;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

//1300 Class
//PTC
spriteset(spriteset_SSD_DMU_1300Class_PTC_Purchase,   "gfx/SSD_DMU_1300Class_PTC.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_PTC_Lead,   "gfx/SSD_DMU_1300Class_PTC.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_PTC_Rear,   "gfx/SSD_DMU_1300Class_PTC.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_PTC_Mid,   "gfx/SSD_DMU_1300Class_PTC.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_PTC_Trailer,   "gfx/SSD_DMU_1300Class_PTC.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_PTC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_PTC_Rear;
    spriteset_SSD_DMU_1300Class_PTC_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1300Class_PTC, 1601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 20;

        variant_group: item_SSD_DMU_1300Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_PTC_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_PTC_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_PTC_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

//1300 Class
//SRA
spriteset(spriteset_SSD_DMU_1300Class_SRA_Purchase,   "gfx/SSD_DMU_1300Class_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_SRA_Lead,   "gfx/SSD_DMU_1300Class_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_SRA_Rear,   "gfx/SSD_DMU_1300Class_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_SRA_Mid,   "gfx/SSD_DMU_1300Class_SRA.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_SRA_Trailer,   "gfx/SSD_DMU_1300Class_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_SRA_Rear;
    spriteset_SSD_DMU_1300Class_SRA_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1300Class_SRA, 1602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 20;

        variant_group: item_SSD_DMU_1300Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_SRA_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_SRA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

//1300 Class
//CityRail
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Purchase,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Lead,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Rear,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Mid,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Trailer,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_CityRail_Rear;
    spriteset_SSD_DMU_1300Class_CityRail_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1300Class_CityRail, 1603) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108;
        loading_speed: 20;

        variant_group: item_SSD_DMU_1300Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

//2000 Class
//CC1
spriteset(spriteset_SSD_DMU_2000Class_Purchase,   "gfx/SSD_DMU_2000Class.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_2000Class_Lead,   "gfx/SSD_DMU_2000Class.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_2000Class_Rear,   "gfx/SSD_DMU_2000Class.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_2000Class_Mid,   "gfx/SSD_DMU_2000Class.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_2000Class_Trailer,   "gfx/SSD_DMU_2000Class.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_attach, vehicle_type_id){
    item_SSD_DMU_2000Class     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_2000Class_STA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_2000Class_Metro     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_2000Class_Rear;
    spriteset_SSD_DMU_2000Class_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_2000Class, 1650) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_2000CLASS);
        introduction_date:                date(1978,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            260 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             108;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 30;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_2000Class_last;
        can_attach_wagon: sw_SSD_DMU_2000Class_attach;
        purchase: spriteset_SSD_DMU_2000Class_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_2000CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_2000Class_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

//2000 Class
//STA
spriteset(spriteset_SSD_DMU_2000Class_STA_Purchase,   "gfx/SSD_DMU_2000Class_STA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_2000Class_STA_Lead,   "gfx/SSD_DMU_2000Class_STA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_2000Class_STA_Rear,   "gfx/SSD_DMU_2000Class_STA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_2000Class_STA_Mid,   "gfx/SSD_DMU_2000Class_STA.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_2000Class_STA_Trailer,   "gfx/SSD_DMU_2000Class_STA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_STA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_2000Class_STA_Rear;
    spriteset_SSD_DMU_2000Class_STA_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_2000Class_STA, 1651) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_2000CLASS);
        introduction_date:                date(1978,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            260 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             108;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_2000Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_2000Class_STA_last;
        can_attach_wagon: sw_SSD_DMU_2000Class_attach;
        purchase: spriteset_SSD_DMU_2000Class_STA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_2000CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_2000Class_STA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

//2000 Class
//Metro
spriteset(spriteset_SSD_DMU_2000Class_Metro_Purchase,   "gfx/SSD_DMU_2000Class_Metro.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_2000Class_Metro_Lead,   "gfx/SSD_DMU_2000Class_Metro.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_2000Class_Metro_Rear,   "gfx/SSD_DMU_2000Class_Metro.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_2000Class_Metro_Mid,   "gfx/SSD_DMU_2000Class_Metro.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_2000Class_Metro_Trailer,   "gfx/SSD_DMU_2000Class_Metro.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_Metro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_2000Class_Metro_Rear;
    spriteset_SSD_DMU_2000Class_Metro_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_2000Class_Metro, 1652) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_2000CLASS);
        introduction_date:                date(1978,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            260 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             108/param_capacity_mod;
        cargo_capacity:                  108;
        loading_speed: 30;

        variant_group: item_SSD_DMU_2000Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_2000Class_Metro_last;
        can_attach_wagon: sw_SSD_DMU_2000Class_attach;
        purchase: spriteset_SSD_DMU_2000Class_Metro_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_2000CLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_2000Class_Metro_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_attach, vehicle_type_id){
    item_SSD_DMU_1400Class     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_Countrylink     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_MU     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_MU_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_MU_Countrylink     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_1400Class_MU_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//1400 Class Railmotor
//CC1
spriteset(spriteset_SSD_DMU_1400Class_Purchase,   "gfx/SSD_DMU_1400Class.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class,   "gfx/SSD_DMU_1400Class.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_1400Class_r,   "gfx/SSD_DMU_1400Class.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_1400Class_Headlights,   "gfx/SSD_DMU_1400Class_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_1400Class_Headlights_r,   "gfx/SSD_DMU_1400Class_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_1400Class_Markerlights,   "gfx/SSD_DMU_1400Class_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_1400Class_Markerlights_r,   "gfx/SSD_DMU_1400Class_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Headlights_r;
    spriteset_SSD_DMU_1400Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Markerlights_r;
    spriteset_SSD_DMU_1400Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_1400Class_r;
    spriteset_SSD_DMU_1400Class ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_1400Class_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_1400Class_markerlight_stack;
    return sw_SSD_DMU_1400Class_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_lead, position_in_consist) {
    0: sw_SSD_DMU_1400Class_headlight_stack;
    return sw_SSD_DMU_1400Class_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_1400Class_headlight_and_marker_stack;
return sw_SSD_DMU_1400Class_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class, 1700) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_solo;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS);
}
}

//1400 Class Railmotor
//SRA
spriteset(spriteset_SSD_DMU_1400Class_SRA_Purchase,   "gfx/SSD_DMU_1400Class_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_SRA,   "gfx/SSD_DMU_1400Class_SRA.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_1400Class_SRA_r,   "gfx/SSD_DMU_1400Class_SRA.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_SRA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Headlights_r;
    spriteset_SSD_DMU_1400Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_SRA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Markerlights_r;
    spriteset_SSD_DMU_1400Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_SRA_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_1400Class_SRA_r;
    spriteset_SSD_DMU_1400Class_SRA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_SRA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_SRA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_SRA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_SRA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_SRA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_SRA_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_1400Class_SRA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_SRA_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_1400Class_SRA_markerlight_stack;
    return sw_SSD_DMU_1400Class_SRA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_SRA_lead, position_in_consist) {
    0: sw_SSD_DMU_1400Class_SRA_headlight_stack;
    return sw_SSD_DMU_1400Class_SRA_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_SRA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_1400Class_SRA_headlight_and_marker_stack;
return sw_SSD_DMU_1400Class_SRA_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_SRA, 1701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_1400Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_SRA_solo;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_SRA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS);
}
}

//1400 Class Railmotor
//Countrylink
spriteset(spriteset_SSD_DMU_1400Class_Countrylink_Purchase,   "gfx/SSD_DMU_1400Class_Countrylink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_Countrylink,   "gfx/SSD_DMU_1400Class_Countrylink.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_1400Class_Countrylink_r,   "gfx/SSD_DMU_1400Class_Countrylink.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_Countrylink_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Headlights_r;
    spriteset_SSD_DMU_1400Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_Countrylink_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Markerlights_r;
    spriteset_SSD_DMU_1400Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_Countrylink_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_1400Class_Countrylink_r;
    spriteset_SSD_DMU_1400Class_Countrylink ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Countrylink_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_Countrylink_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_Countrylink_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Countrylink_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_Countrylink_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_Countrylink_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Countrylink_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_Countrylink_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_Countrylink_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_1400Class_Countrylink_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Countrylink_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_1400Class_Countrylink_markerlight_stack;
    return sw_SSD_DMU_1400Class_Countrylink_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Countrylink_lead, position_in_consist) {
    0: sw_SSD_DMU_1400Class_Countrylink_headlight_stack;
    return sw_SSD_DMU_1400Class_Countrylink_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Countrylink_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_1400Class_Countrylink_headlight_and_marker_stack;
return sw_SSD_DMU_1400Class_Countrylink_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_Countrylink, 1702) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_1400Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_Countrylink_solo;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_Countrylink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS);
}
}

//1400 Class Railmotor
//Trainlink
spriteset(spriteset_SSD_DMU_1400Class_Trainlink_Purchase,   "gfx/SSD_DMU_1400Class_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_Trainlink,   "gfx/SSD_DMU_1400Class_Trainlink.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_1400Class_Trainlink_r,   "gfx/SSD_DMU_1400Class_Trainlink.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_Trainlink_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Headlights_r;
    spriteset_SSD_DMU_1400Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_Trainlink_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_1400Class_Markerlights_r;
    spriteset_SSD_DMU_1400Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_1400Class_Trainlink_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_1400Class_Trainlink_r;
    spriteset_SSD_DMU_1400Class_Trainlink ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Trainlink_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_Trainlink_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_Trainlink_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Trainlink_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_Trainlink_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_Trainlink_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Trainlink_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_1400Class_Trainlink_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_1400Class_Trainlink_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_1400Class_Trainlink_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Trainlink_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_1400Class_Trainlink_markerlight_stack;
    return sw_SSD_DMU_1400Class_Trainlink_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Trainlink_lead, position_in_consist) {
    0: sw_SSD_DMU_1400Class_Trainlink_headlight_stack;
    return sw_SSD_DMU_1400Class_Trainlink_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_Trainlink_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_1400Class_Trainlink_headlight_and_marker_stack;
return sw_SSD_DMU_1400Class_Trainlink_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_Trainlink, 1703) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_1400Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_Trainlink_solo;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS);
}
}

//1400 Class DMU
//CC1
spriteset(spriteset_SSD_DMU_1400Class_MU_Purchase,   "gfx/SSD_DMU_1400Class_MU.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_MU_Lead,   "gfx/SSD_DMU_1400Class_MU.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1400Class_MU_Rear,   "gfx/SSD_DMU_1400Class_MU.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1400Class_MU_Mid,   "gfx/SSD_DMU_1400Class_MU.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1400Class_MU_Trailer,   "gfx/SSD_DMU_1400Class_MU.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1400Class_MU_Rear;
    spriteset_SSD_DMU_1400Class_MU_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_MU, 1725) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

//        variant_group: item_SSD_DMU_1400Class;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_MU_last;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_MU_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1400Class_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
    }

}

//1400 Class DMU
//CC1
spriteset(spriteset_SSD_DMU_1400Class_MU_SRA_Purchase,   "gfx/SSD_DMU_1400Class_MU_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_MU_SRA_Lead,   "gfx/SSD_DMU_1400Class_MU_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1400Class_MU_SRA_Rear,   "gfx/SSD_DMU_1400Class_MU_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1400Class_MU_SRA_Mid,   "gfx/SSD_DMU_1400Class_MU_SRA.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1400Class_MU_SRA_Trailer,   "gfx/SSD_DMU_1400Class_MU_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_MU_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1400Class_MU_SRA_Rear;
    spriteset_SSD_DMU_1400Class_MU_SRA_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_MU_SRA, 1726) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_1400Class_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_MU_SRA_last;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_MU_SRA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1400Class_MU_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
    }
}

//1400 Class DMU
//Countrylink
spriteset(spriteset_SSD_DMU_1400Class_MU_Countrylink_Purchase,   "gfx/SSD_DMU_1400Class_MU_Countrylink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_MU_Countrylink_Lead,   "gfx/SSD_DMU_1400Class_MU_Countrylink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1400Class_MU_Countrylink_Rear,   "gfx/SSD_DMU_1400Class_MU_Countrylink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1400Class_MU_Countrylink_Mid,   "gfx/SSD_DMU_1400Class_MU_Countrylink.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1400Class_MU_Countrylink_Trailer,   "gfx/SSD_DMU_1400Class_MU_Countrylink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_MU_Countrylink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1400Class_MU_Countrylink_Rear;
    spriteset_SSD_DMU_1400Class_MU_Countrylink_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_MU_Countrylink, 1727) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_1400Class_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_MU_Countrylink_last;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_MU_Countrylink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1400Class_MU_Countrylink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
    }
}

//1400 Class DMU
//Trainlink
spriteset(spriteset_SSD_DMU_1400Class_MU_Trainlink_Purchase,   "gfx/SSD_DMU_1400Class_MU_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1400Class_MU_Trainlink_Lead,   "gfx/SSD_DMU_1400Class_MU_Trainlink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1400Class_MU_Trainlink_Rear,   "gfx/SSD_DMU_1400Class_MU_Trainlink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1400Class_MU_Trainlink_Mid,   "gfx/SSD_DMU_1400Class_MU_Trainlink.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_1400Class_MU_Trainlink_Trailer,   "gfx/SSD_DMU_1400Class_MU_Trainlink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1400Class_MU_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1400Class_MU_Trainlink_Rear;
    spriteset_SSD_DMU_1400Class_MU_Trainlink_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_1400Class_MU_Trainlink, 1728) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1400CLASS_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_1400Class_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1400Class_MU_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_1400Class_attach;
        purchase: spriteset_SSD_DMU_1400Class_MU_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1400CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1400Class_MU_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_attach, vehicle_type_id){
    item_SSD_DMU_3000Class     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_STA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_Metro1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_Metro2     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_MU     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_MU_STA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_MU_Metro1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_3000Class_MU_Metro2     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//3000 Class Railmotor
//CC1
spriteset(spriteset_SSD_DMU_3000Class_Purchase,   "gfx/SSD_DMU_3000Class.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class,   "gfx/SSD_DMU_3000Class.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_r,   "gfx/SSD_DMU_3000Class.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_3000Class_Headlights,   "gfx/SSD_DMU_3000Class_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_3000Class_Headlights_r,   "gfx/SSD_DMU_3000Class_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_3000Class_Markerlights,   "gfx/SSD_DMU_3000Class_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_3000Class_Markerlights_r,   "gfx/SSD_DMU_3000Class_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)



// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_r;
    spriteset_SSD_DMU_3000Class ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_markerlight_stack;
    return sw_SSD_DMU_3000Class_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_headlight_stack;
    return sw_SSD_DMU_3000Class_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class, 1750) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             95;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class Railmotor
//STA
spriteset(spriteset_SSD_DMU_3000Class_STA_Purchase,   "gfx/SSD_DMU_3000Class_STA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_STA,   "gfx/SSD_DMU_3000Class_STA.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_STA_r,   "gfx/SSD_DMU_3000Class_STA.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_STA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_STA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_STA_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_STA_r;
    spriteset_SSD_DMU_3000Class_STA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_STA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_STA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_STA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_STA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_STA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_STA_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_STA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_STA_markerlight_stack;
    return sw_SSD_DMU_3000Class_STA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_STA_headlight_stack;
    return sw_SSD_DMU_3000Class_STA_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_STA_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_STA_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_STA, 1751) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             95;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_3000Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_STA_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_STA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class Railmotor
//Metro1
spriteset(spriteset_SSD_DMU_3000Class_Metro1_Purchase,   "gfx/SSD_DMU_3000Class_Metro1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_Metro1,   "gfx/SSD_DMU_3000Class_Metro1.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_Metro1_r,   "gfx/SSD_DMU_3000Class_Metro1.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro1_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro1_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro1_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_Metro1_r;
    spriteset_SSD_DMU_3000Class_Metro1 ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro1_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro1_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro1_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro1_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro1_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro1_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_Metro1_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_Metro1_markerlight_stack;
    return sw_SSD_DMU_3000Class_Metro1_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_Metro1_headlight_stack;
    return sw_SSD_DMU_3000Class_Metro1_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_Metro1_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_Metro1_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_Metro1, 1752) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             95;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_3000Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_Metro1_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_Metro1_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class Railmotor
//Metro2
spriteset(spriteset_SSD_DMU_3000Class_Metro2_Purchase,   "gfx/SSD_DMU_3000Class_Metro2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_Metro2,   "gfx/SSD_DMU_3000Class_Metro2.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_Metro2_r,   "gfx/SSD_DMU_3000Class_Metro2.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro2_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro2_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro2_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_Metro2_r;
    spriteset_SSD_DMU_3000Class_Metro2 ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro2_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro2_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro2_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro2_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro2_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro2_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_Metro2_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_Metro2_markerlight_stack;
    return sw_SSD_DMU_3000Class_Metro2_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_Metro2_headlight_stack;
    return sw_SSD_DMU_3000Class_Metro2_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_Metro2_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_Metro2_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_Metro2, 1753) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             95;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_3000Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_Metro2_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_Metro2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class DMU
//CC1
spriteset(spriteset_SSD_DMU_3000Class_MU_Purchase,   "gfx/SSD_DMU_3000Class_MU.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Lead,   "gfx/SSD_DMU_3000Class_MU.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_Rear,   "gfx/SSD_DMU_3000Class_MU.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_Mid,   "gfx/SSD_DMU_3000Class_MU.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Trailer,   "gfx/SSD_DMU_3000Class_MU.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_Rear;
    spriteset_SSD_DMU_3000Class_MU_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_MU, 1775) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             190;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

//        variant_group: item_SSD_DMU_3000Class;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
    }

}

//3000 Class DMU
//STA
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Purchase,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Lead,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Rear,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Mid,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Trailer,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_STA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_STA_Rear;
    spriteset_SSD_DMU_3000Class_MU_STA_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_MU_STA, 1776) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             190;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_3000Class_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_STA_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_STA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_STA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
    }
}

//3000 Class DMU
//Metro1
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Purchase,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Lead,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Rear,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Mid,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Trailer,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_Metro1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_Metro1_Rear;
    spriteset_SSD_DMU_3000Class_MU_Metro1_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_MU_Metro1, 1777) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             190;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_3000Class_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_Metro1_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_Metro1_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_Metro1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
    }
}

//3000 Class DMU
//Metro2
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Purchase,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Lead,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Rear,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Mid,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Trailer,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_Metro2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_Metro2_Rear;
    spriteset_SSD_DMU_3000Class_MU_Metro2_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_3000Class_MU_Metro2, 1778) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             190;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_3000Class_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_Metro2_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_Metro2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_Metro2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_attach, vehicle_type_id){
    item_SSD_DMU_Sprinter     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Sprinter_Met     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Sprinter_VlineEarly     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Sprinter_VlineLate     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Sprinter_PTV     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Sprinter Railmotor
//CC1
spriteset(spriteset_SSD_DMU_Sprinter_Purchase,   "gfx/SSD_DMU_Sprinter.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter,   "gfx/SSD_DMU_Sprinter.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_r,   "gfx/SSD_DMU_Sprinter.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_Sprinter_Headlights,   "gfx/SSD_DMU_Sprinter_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Sprinter_Headlights_r,   "gfx/SSD_DMU_Sprinter_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Sprinter_Markerlights,   "gfx/SSD_DMU_Sprinter_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Sprinter_Markerlights_r,   "gfx/SSD_DMU_Sprinter_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_r;
    spriteset_SSD_DMU_Sprinter ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_markerlight_stack;
    return sw_SSD_DMU_Sprinter_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_headlight_stack;
    return sw_SSD_DMU_Sprinter_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Sprinter, 1800) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             110;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//Met
spriteset(spriteset_SSD_DMU_Sprinter_Met_Purchase,   "gfx/SSD_DMU_Sprinter_Met.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_Met,   "gfx/SSD_DMU_Sprinter_Met.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_Met_r,   "gfx/SSD_DMU_Sprinter_Met.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_Met_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_Met_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_Met_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_Met_r;
    spriteset_SSD_DMU_Sprinter_Met ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_Met_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_Met_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_Met_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_Met_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_Met_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_Met_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_Met_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_Met_markerlight_stack;
    return sw_SSD_DMU_Sprinter_Met_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_Met_headlight_stack;
    return sw_SSD_DMU_Sprinter_Met_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_Met_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_Met_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Sprinter_Met, 1801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             110;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_Sprinter;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_Met_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_Met_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//VlineEarly
spriteset(spriteset_SSD_DMU_Sprinter_VlineEarly_Purchase,   "gfx/SSD_DMU_Sprinter_VlineEarly.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_VlineEarly,   "gfx/SSD_DMU_Sprinter_VlineEarly.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_VlineEarly_r,   "gfx/SSD_DMU_Sprinter_VlineEarly.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineEarly_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineEarly_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineEarly_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_VlineEarly_r;
    spriteset_SSD_DMU_Sprinter_VlineEarly ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineEarly_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineEarly_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineEarly_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_VlineEarly_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_VlineEarly_markerlight_stack;
    return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_VlineEarly_headlight_stack;
    return sw_SSD_DMU_Sprinter_VlineEarly_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_VlineEarly_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_VlineEarly_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Sprinter_VlineEarly, 1802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             110;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_Sprinter;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_VlineEarly_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_VlineEarly_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//VlineLate
spriteset(spriteset_SSD_DMU_Sprinter_VlineLate_Purchase,   "gfx/SSD_DMU_Sprinter_VlineLate.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_VlineLate,   "gfx/SSD_DMU_Sprinter_VlineLate.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_VlineLate_r,   "gfx/SSD_DMU_Sprinter_VlineLate.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineLate_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineLate_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineLate_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_VlineLate_r;
    spriteset_SSD_DMU_Sprinter_VlineLate ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineLate_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineLate_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineLate_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineLate_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineLate_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineLate_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_VlineLate_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_VlineLate_markerlight_stack;
    return sw_SSD_DMU_Sprinter_VlineLate_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_VlineLate_headlight_stack;
    return sw_SSD_DMU_Sprinter_VlineLate_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_VlineLate_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_VlineLate_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Sprinter_VlineLate, 1803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             110;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_Sprinter;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_VlineLate_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_VlineLate_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//PTV
spriteset(spriteset_SSD_DMU_Sprinter_PTV_Purchase,   "gfx/SSD_DMU_Sprinter_PTV.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_PTV,   "gfx/SSD_DMU_Sprinter_PTV.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_PTV_r,   "gfx/SSD_DMU_Sprinter_PTV.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_PTV_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_PTV_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_PTV_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_PTV_r;
    spriteset_SSD_DMU_Sprinter_PTV ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_PTV_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_PTV_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_PTV_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_PTV_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_PTV_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_PTV_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_PTV_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_PTV_markerlight_stack;
    return sw_SSD_DMU_Sprinter_PTV_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_PTV_headlight_stack;
    return sw_SSD_DMU_Sprinter_PTV_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_PTV_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_PTV_lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Sprinter_PTV, 1804) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             110;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_Sprinter;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_PTV_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_PTV_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Hunter Railcar
//CC1
spriteset(spriteset_SSD_DMU_Hunter_Purchase,   "gfx/SSD_DMU_Hunter.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter_Lead,   "gfx/SSD_DMU_Hunter.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter_Rear,   "gfx/SSD_DMU_Hunter.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter_Mid,   "gfx/SSD_DMU_Hunter.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter_Trailer,   "gfx/SSD_DMU_Hunter.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_attach, vehicle_type_id){
    item_SSD_DMU_Hunter     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Hunter_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_Hunter_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter_Rear;
    spriteset_SSD_DMU_Hunter_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Hunter, 1900) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTER);
        introduction_date:                date(2006,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        61 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             200;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

//        variant_group: item_SSD_DMU_3000Class;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter_last;
        can_attach_wagon: sw_SSD_DMU_Hunter_attach;
        purchase: spriteset_SSD_DMU_Hunter_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
    }
}

//Hunter Railcar
//CityRail
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Purchase,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Lead,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Rear,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Mid,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Trailer,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter_CityRail_Rear;
    spriteset_SSD_DMU_Hunter_CityRail_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Hunter_CityRail, 1901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTER);
        introduction_date:                date(2006,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        61 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             200;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_Hunter;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_Hunter_attach;
        purchase: spriteset_SSD_DMU_Hunter_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
    }
}

//Hunter Railcar
//Trainlink
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Purchase,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Lead,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Rear,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Mid,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Trailer,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter_Trainlink_Rear;
    spriteset_SSD_DMU_Hunter_Trainlink_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_Hunter_Trainlink, 1902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTER);
        introduction_date:                date(2006,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        61 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             200;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_Hunter;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_Hunter_attach;
        purchase: spriteset_SSD_DMU_Hunter_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
    }
}

//Hunter Mk2 Railcar
//CC1
spriteset(spriteset_SSD_DMU_HunterMk2_Purchase,   "gfx/SSD_DMU_HunterMK2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_HunterMk2_Lead,   "gfx/SSD_DMU_HunterMK2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_HunterMk2_Rear,   "gfx/SSD_DMU_HunterMK2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_HunterMk2_Mid,   "gfx/SSD_DMU_HunterMK2.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_HunterMk2_Trailer,   "gfx/SSD_DMU_HunterMK2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_HunterMk2_attach, vehicle_type_id){
    item_SSD_DMU_HunterMk2     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_HunterMk2_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_HunterMk2_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_HunterMk2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_HunterMk2_Rear;
    spriteset_SSD_DMU_HunterMk2_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_HunterMk2, 2000) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTERMK2);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        59 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             210;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

//        variant_group: item_SSD_DMU_3000Class;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_HunterMk2_last;
        can_attach_wagon: sw_SSD_DMU_HunterMk2_attach;
        purchase: spriteset_SSD_DMU_HunterMk2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTERMK2);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_HunterMk2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
    }

}

//Hunter Mk2 Railcar
//CityRail
spriteset(spriteset_SSD_DMU_HunterMk2_CityRail_Purchase,   "gfx/SSD_DMU_HunterMK2_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_HunterMk2_CityRail_Lead,   "gfx/SSD_DMU_HunterMK2_CityRail.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_HunterMk2_CityRail_Rear,   "gfx/SSD_DMU_HunterMK2_CityRail.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_HunterMk2_CityRail_Mid,   "gfx/SSD_DMU_HunterMK2_CityRail.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_HunterMk2_CityRail_Trailer,   "gfx/SSD_DMU_HunterMK2_CityRail.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_HunterMk2_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_HunterMk2_CityRail_Rear;
    spriteset_SSD_DMU_HunterMk2_CityRail_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_HunterMk2_CityRail, 2001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTERMK2);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        59 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             210;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_HunterMk2;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_HunterMk2_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_HunterMk2_attach;
        purchase: spriteset_SSD_DMU_HunterMk2_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTERMK2);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_HunterMk2_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
    }
}

//Hunter Mk2 Railcar
//Trainlink
spriteset(spriteset_SSD_DMU_HunterMk2_Trainlink_Purchase,   "gfx/SSD_DMU_HunterMK2_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_HunterMk2_Trainlink_Lead,   "gfx/SSD_DMU_HunterMK2_Trainlink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_HunterMk2_Trainlink_Rear,   "gfx/SSD_DMU_HunterMK2_Trainlink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_HunterMk2_Trainlink_Mid,   "gfx/SSD_DMU_HunterMK2_Trainlink.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_HunterMk2_Trainlink_Trailer,   "gfx/SSD_DMU_HunterMK2_Trainlink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_HunterMk2_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_HunterMk2_Trainlink_Rear;
    spriteset_SSD_DMU_HunterMk2_Trainlink_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_HunterMk2_Trainlink, 2002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTERMK2);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        59 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             210;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: item_SSD_DMU_HunterMk2;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_HunterMk2_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_HunterMk2_attach;
        purchase: spriteset_SSD_DMU_HunterMk2_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTERMK2);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_HunterMk2_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
    }
}

//New Regional Fleet Short Intercity
//CC1
spriteset(spriteset_SSD_DMU_NRFSI_Purchase,   "gfx/SSD_DMU_NRFSI.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_NRFSI_Lead,   "gfx/SSD_DMU_NRFSI.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_NRFSI_Rear,   "gfx/SSD_DMU_NRFSI.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_NRFSI_Mid,   "gfx/SSD_DMU_NRFSI.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_NRFSI_Trailer,   "gfx/SSD_DMU_NRFSI.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_NRFSI_attach, vehicle_type_id){
    item_SSD_DMU_NRFSI     : return CB_RESULT_ATTACH_ALLOW  ;
    item_SSD_DMU_NRFSI_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_NRFSI_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_NRFSI_Rear;
    spriteset_SSD_DMU_NRFSI_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_NRFSI, 2100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_NRFSI);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            160 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             230;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 20;

//        variant_group: item_SSD_DMU_3000Class;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_NRFSI_last;
        can_attach_wagon: sw_SSD_DMU_NRFSI_attach;
        purchase: spriteset_SSD_DMU_NRFSI_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_NRFSI);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_NRFSI_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (120/param_capacity_mod);
        power:                            400;
    }
}

//New Regional Fleet Short Intercity
//Trainlink
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Purchase,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Lead,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Rear,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Mid,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_8(7, 89)}
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Trailer,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_NRFSI_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_NRFSI_Trainlink_Rear;
    spriteset_SSD_DMU_NRFSI_Trainlink_Lead;
}

item(FEAT_TRAINS, item_SSD_DMU_NRFSI_Trainlink, 2101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_NRFSI);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            160 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             230;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 20;

        variant_group: item_SSD_DMU_NRFSI;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_NRFSI_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_NRFSI_attach;
        purchase: spriteset_SSD_DMU_NRFSI_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_NRFSI);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_NRFSI_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (120/param_capacity_mod);
        power:                            400;
    }
}

///////////////////
//Intercity NEMUs//
///////////////////

//Silver City Comet
//CC1
spriteset(spriteset_ICSD_DMU_CometPowerVan_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan,   "gfx/ICSD_DMU_Comet_PowerVan.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_r,   "gfx/ICSD_DMU_Comet_PowerVan.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_ICSD_DMU_CometPowerVan_Headlights,   "gfx/ICSD_DMU_Comet_PowerVan_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_CometPowerVan_Headlights_r,   "gfx/ICSD_DMU_Comet_PowerVan_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_ICSD_DMU_CometPowerVan_Markerlights,   "gfx/ICSD_DMU_Comet_PowerVan_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_CometPowerVan_Markerlights_r,   "gfx/ICSD_DMU_Comet_PowerVan_Markerlights.png") {template_8(7, 64)} // <- Define headlights (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_r;
    spriteset_ICSD_DMU_CometPowerVan ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_CometPowerVan, 3000) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet
//SilverCity
spriteset(spriteset_ICSD_DMU_CometPowerVan_SilverCity_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan_SilverCity,   "gfx/ICSD_DMU_Comet_PowerVan_SilverCity.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_SilverCity_r,   "gfx/ICSD_DMU_Comet_PowerVan_SilverCity.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_SilverCity_r;
    spriteset_ICSD_DMU_CometPowerVan_SilverCity ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SilverCity_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_SilverCity_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_CometPowerVan_SilverCity, 3001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

        variant_group: item_ICSD_DMU_CometPowerVan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_SilverCity_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_SilverCity_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet
//Tuscan
spriteset(spriteset_ICSD_DMU_CometPowerVan_Tuscan_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan_Tuscan,   "gfx/ICSD_DMU_Comet_PowerVan_Tuscan.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_Tuscan_r,   "gfx/ICSD_DMU_Comet_PowerVan_Tuscan.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_Tuscan_r;
    spriteset_ICSD_DMU_CometPowerVan_Tuscan ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_Tuscan_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_Tuscan_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_CometPowerVan_Tuscan, 3002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

        variant_group: item_ICSD_DMU_CometPowerVan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_Tuscan_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_Tuscan_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet
//SRA
spriteset(spriteset_ICSD_DMU_CometPowerVan_SRA_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan_SRA,   "gfx/ICSD_DMU_Comet_PowerVan_SRA.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_SRA_r,   "gfx/ICSD_DMU_Comet_PowerVan_SRA.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SRA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SRA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SRA_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_SRA_r;
    spriteset_ICSD_DMU_CometPowerVan_SRA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SRA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SRA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SRA_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_SRA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_SRA_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_SRA_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SRA_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_SRA_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_SRA_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_CometPowerVan_SRA, 3003) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

        variant_group: item_ICSD_DMU_CometPowerVan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_SRA_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_SRA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet Passenger Car
//CC1
spriteset(spriteset_ICSD_DMU_CometPassCar_Purchase,   "gfx/ICSD_DMU_Comet_PassCar.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar,   "gfx/ICSD_DMU_Comet_PassCar.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_Guard,   "gfx/ICSD_DMU_Comet_PassCar.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_Guard;
    return spriteset_ICSD_DMU_CometPassCar;
}

item (FEAT_TRAINS, item_ICSD_ComentPassCar) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;

//        variant_group: item_ICSD_ComentPassCar;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_Purchase;
}
}

//Silver City Comet Passenger Car
//SilverCity
spriteset(spriteset_ICSD_DMU_CometPassCar_SilverCity_Purchase,   "gfx/ICSD_DMU_Comet_PassCar_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SilverCity,   "gfx/ICSD_DMU_Comet_PassCar_SilverCity.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SilverCity_Guard,   "gfx/ICSD_DMU_Comet_PassCar_SilverCity.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_SilverCity_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_SilverCity_Guard;
    return spriteset_ICSD_DMU_CometPassCar_SilverCity;
}

item (FEAT_TRAINS, item_ICSD_ComentPassCar_SilverCity) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;

        variant_group: item_ICSD_ComentPassCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_SilverCity_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_SilverCity_Purchase;
}
}

//Silver City Comet Passenger Car
//Tuscan
spriteset(spriteset_ICSD_DMU_CometPassCar_Tuscan_Purchase,   "gfx/ICSD_DMU_Comet_PassCar_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar_Tuscan,   "gfx/ICSD_DMU_Comet_PassCar_Tuscan.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_Tuscan_Guard,   "gfx/ICSD_DMU_Comet_PassCar_Tuscan.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_Tuscan_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_Tuscan_Guard;
    return spriteset_ICSD_DMU_CometPassCar_Tuscan;
}

item (FEAT_TRAINS, item_ICSD_ComentPassCar_Tuscan) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;

        variant_group: item_ICSD_ComentPassCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_Tuscan_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_Tuscan_Purchase;
}
}

//Silver City Comet Passenger Car
//SRA
spriteset(spriteset_ICSD_DMU_CometPassCar_SRA_Purchase,   "gfx/ICSD_DMU_Comet_PassCar_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SRA,   "gfx/ICSD_DMU_Comet_PassCar_SRA.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SRA_Guard,   "gfx/ICSD_DMU_Comet_PassCar_SRA.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_SRA_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_SRA_Guard;
    return spriteset_ICSD_DMU_CometPassCar_SRA;
}

item (FEAT_TRAINS, item_ICSD_ComentPassCar_SRA) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;

        variant_group: item_ICSD_ComentPassCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_SRA_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_SRA_Purchase;
}
}

//Meteor Power Van
//CC1
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Purchase,   "gfx/ICSD_DMU_MeteorPowerVan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Lead,   "gfx/ICSD_DMU_MeteorPowerVan.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Rear,   "gfx/ICSD_DMU_MeteorPowerVan.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Mid,   "gfx/ICSD_DMU_MeteorPowerVan.png") {template_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_articulated_part, extra_callback_info1) {
    1: return item_ICSD_DMU_MeteorPowerVan_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan, 3100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

//        variant_group: item_ICSD_DMU_MeteorPowerVan;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_rear, 3101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Power Van
//SilverCity
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Purchase,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Lead,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Rear,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Mid,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_SilverCity_articulated_part, extra_callback_info1) {
    1: return item_ICSD_DMU_MeteorPowerVan_SilverCity_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_SilverCity, 3102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

        variant_group: item_ICSD_DMU_MeteorPowerVan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_SilverCity_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_SilverCity_rear, 3103) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Power Van
//Tuscan
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Purchase,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Lead,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Rear,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Mid,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_Tuscan_articulated_part, extra_callback_info1) {
    1: return item_ICSD_DMU_MeteorPowerVan_Tuscan_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_Tuscan, 3104) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

        variant_group: item_ICSD_DMU_MeteorPowerVan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_Tuscan_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_Tuscan_rear, 3105) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Power Van
//SRA
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Purchase,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Lead,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Rear,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Mid,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_SRA_articulated_part, extra_callback_info1) {
    1: return item_ICSD_DMU_MeteorPowerVan_SRA_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_SRA, 3106) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

        variant_group: item_ICSD_DMU_MeteorPowerVan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SRA_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_SRA_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_SRA_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, item_ICSD_DMU_MeteorPowerVan_SRA_rear, 3107) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SRA_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Passenger Car
//CC1
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar,   "gfx/ICSD_DMU_Meteor_PassCar.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Guard,   "gfx/ICSD_DMU_Meteor_PassCar.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar;
}

item (FEAT_TRAINS, item_ICSD_MeteorPassCar) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;
        loading_speed:                    10;

//        variant_group: item_ICSD_MeteorPassCar;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_Purchase;
}
}

//Meteor Passenger Car
//SilverCity
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SilverCity,   "gfx/ICSD_DMU_Meteor_PassCar_SilverCity.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Guard,   "gfx/ICSD_DMU_Meteor_PassCar_SilverCity.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_SilverCity_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar_SilverCity;
}

item (FEAT_TRAINS, item_ICSD_MeteorPassCar_SilverCity) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;
        loading_speed:                    10;

        variant_group: item_ICSD_MeteorPassCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_SilverCity_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Purchase;
}
}

//Meteor Passenger Car
//Tuscan
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Tuscan,   "gfx/ICSD_DMU_Meteor_PassCar_Tuscan.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Guard,   "gfx/ICSD_DMU_Meteor_PassCar_Tuscan.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_Tuscan_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar_Tuscan;
}

item (FEAT_TRAINS, item_ICSD_MeteorPassCar_Tuscan) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;
        loading_speed:                    10;

        variant_group: item_ICSD_MeteorPassCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_Tuscan_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Purchase;
}
}

//Meteor Passenger Car
//SRA
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SRA_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SRA,   "gfx/ICSD_DMU_Meteor_PassCar_SRA.png") {template_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SRA_Guard,   "gfx/ICSD_DMU_Meteor_PassCar_SRA.png") {template_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_SRA_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_SRA_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar_SRA;
}

item (FEAT_TRAINS, item_ICSD_MeteorPassCar_SRA) {
    property {
        climates_available:             ALL_CLIMATES;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    45;
        running_cost_factor:            2;
        loading_speed:                    10;

        variant_group: item_ICSD_MeteorPassCar;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_SRA_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_SRA_Purchase;
}
}

//Speedliner
//CC1
spriteset(spriteset_ICSD_DMU_SpeedLiner_Purchase,   "gfx/ICSD_DMU_SpeedLiner.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SpeedLiner_Lead,   "gfx/ICSD_DMU_SpeedLiner.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SpeedLiner_Rear,   "gfx/ICSD_DMU_SpeedLiner.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SpeedLiner_Mid,   "gfx/ICSD_DMU_SpeedLiner.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SpeedLiner_Trailer,   "gfx/ICSD_DMU_SpeedLiner.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SpeedLiner_attach, vehicle_type_id){
    item_ICSD_DMU_SpeedLiner     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SpeedLiner_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SpeedLiner_Rear;
    spriteset_ICSD_DMU_SpeedLiner_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_SpeedLiner, 3150) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SPEEDLINER);
        introduction_date:                date(1944,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            145 km/h;
        power:                            300 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  45/param_capacity_mod;
        loading_speed: 5;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SpeedLiner_last;
        can_attach_wagon: sw_ICSD_DMU_SpeedLiner_attach;
        purchase: spriteset_ICSD_DMU_SpeedLiner_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SPEEDLINER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SpeedLiner_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (45/param_capacity_mod);
        power:                            150;
    }
}

//Speedliner
//Silver
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Purchase,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Lead,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Rear,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Mid,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Trailer,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SpeedLiner_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SpeedLiner_Silver_Rear;
    spriteset_ICSD_DMU_SpeedLiner_Silver_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_SpeedLiner_Silver, 3151) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SPEEDLINER);
        introduction_date:                date(1944,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            145 km/h;
        power:                            300 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  45/param_capacity_mod;
        loading_speed: 5;

        variant_group: item_ICSD_DMU_SpeedLiner;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SpeedLiner_Silver_last;
        can_attach_wagon: sw_ICSD_DMU_SpeedLiner_attach;
        purchase: spriteset_ICSD_DMU_SpeedLiner_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SPEEDLINER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SpeedLiner_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (45/param_capacity_mod);
        power:                            150;
    }
}

//DEB Set
//CC1
spriteset(spriteset_ICSD_DMU_DEBset_Purchase,   "gfx/ICSD_DMU_DEBset.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Lead,   "gfx/ICSD_DMU_DEBset.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Rear,   "gfx/ICSD_DMU_DEBset.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Mid,   "gfx/ICSD_DMU_DEBset.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Trailer,   "gfx/ICSD_DMU_DEBset.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_attach, vehicle_type_id){
    item_ICSD_DMU_DEBset     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_DEBset_Pinstripe     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_DEBset_Buff1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_DEBset_Buff2     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_DEBset_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Rear;
    spriteset_ICSD_DMU_DEBset_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_DEBset, 3200) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//DEB Set
//Pinstripe
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Purchase,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Lead,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Rear,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Mid,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Trailer,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_Pinstripe_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Pinstripe_Rear;
    spriteset_ICSD_DMU_DEBset_Pinstripe_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_DEBset_Pinstripe, 3201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: item_ICSD_DMU_DEBset;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_Pinstripe_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Pinstripe_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Pinstripe_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//DEB Set
//Buff1
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Purchase,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Lead,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Rear,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Mid,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Trailer,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_Buff1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Buff1_Rear;
    spriteset_ICSD_DMU_DEBset_Buff1_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_DEBset_Buff1, 3202) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: item_ICSD_DMU_DEBset;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_Buff1_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Buff1_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Buff1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//DEB Set
//Buff2
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Purchase,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Lead,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Rear,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Mid,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Trailer,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_Buff2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Buff2_Rear;
    spriteset_ICSD_DMU_DEBset_Buff2_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_DEBset_Buff2, 3203) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: item_ICSD_DMU_DEBset;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_Buff2_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Buff2_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Buff2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//DEB Set
//SRA
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Purchase,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Lead,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Rear,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Mid,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Trailer,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_SRA_Rear;
    spriteset_ICSD_DMU_DEBset_SRA_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_DEBset_SRA, 3204) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             100;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: item_ICSD_DMU_DEBset;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_SRA_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_SRA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//Twin Set
//CC1
spriteset(spriteset_ICSD_DMU_Twinset_Purchase,   "gfx/ICSD_DMU_TwinSet.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Twinset_Lead,   "gfx/ICSD_DMU_TwinSet.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Twinset_Rear,   "gfx/ICSD_DMU_TwinSet.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Twinset_Mid,   "gfx/ICSD_DMU_TwinSet.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Twinset_Trailer,   "gfx/ICSD_DMU_TwinSet.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_attach, vehicle_type_id){
    item_ICSD_DMU_Twinset     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Twinset_BlueStreak     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Twinset_NZR     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Twinset_Rear;
    spriteset_ICSD_DMU_Twinset_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Twinset, 3250) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_TWINSET);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            130 km/h;
        power:                            210 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Twinset_last;
        can_attach_wagon: sw_ICSD_DMU_Twinset_attach;
        purchase: spriteset_ICSD_DMU_Twinset_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_TWINSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Twinset_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//Twin Set
//BlueStreak
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Purchase,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Lead,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Rear,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Mid,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Trailer,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_BlueStreak_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Twinset_BlueStreak_Rear;
    spriteset_ICSD_DMU_Twinset_BlueStreak_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Twinset_BlueStreak, 3251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_TWINSET);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            130 km/h;
        power:                            210 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Twinset;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Twinset_BlueStreak_last;
        can_attach_wagon: sw_ICSD_DMU_Twinset_attach;
        purchase: spriteset_ICSD_DMU_Twinset_BlueStreak_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_TWINSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Twinset_BlueStreak_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//Twin Set
//NZR
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Purchase,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Lead,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Rear,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Mid,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Trailer,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_NZR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Twinset_NZR_Rear;
    spriteset_ICSD_DMU_Twinset_NZR_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Twinset_NZR, 3252) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_TWINSET);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            130 km/h;
        power:                            210 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Twinset;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Twinset_NZR_last;
        can_attach_wagon: sw_ICSD_DMU_Twinset_attach;
        purchase: spriteset_ICSD_DMU_Twinset_NZR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_TWINSET);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Twinset_NZR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
    }
}

//1100 Class Railmotor
//CC1
spriteset(spriteset_ICSD_DMU_1100Class_Purchase,   "gfx/ICSD_DMU_1100Class.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_1100Class,   "gfx/ICSD_DMU_1100Class.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_1100Class_r,   "gfx/ICSD_DMU_1100Class.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_ICSD_DMU_1100Class_Headlights,   "gfx/ICSD_DMU_1100Class_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_1100Class_Headlights_r,   "gfx/ICSD_DMU_1100Class_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_ICSD_DMU_1100Class_Markerlights,   "gfx/ICSD_DMU_1100Class_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_1100Class_Markerlights_r,   "gfx/ICSD_DMU_1100Class.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_attach, vehicle_type_id){
    item_ICSD_DMU_1100Class     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_1100Class_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_1100Class_Vline     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Headlights_r;
    spriteset_ICSD_DMU_1100Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Markerlights_r;
    spriteset_ICSD_DMU_1100Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_1100Class_r;
    spriteset_ICSD_DMU_1100Class ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_1100Class_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_1100Class_markerlight_stack;
    return sw_ICSD_DMU_1100Class_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_lead, position_in_consist) {
    0: sw_ICSD_DMU_1100Class_headlight_stack;
    return sw_ICSD_DMU_1100Class_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_1100Class_headlight_and_marker_stack;
return sw_ICSD_DMU_1100Class_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_1100Class, 3300) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_1100CLASS);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             87;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 20;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_1100Class_solo;
        can_attach_wagon: sw_ICSD_DMU_1100Class_attach;
        purchase: spriteset_ICSD_DMU_1100Class_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_1100CLASS);
}
}

//1100 Class Railmotor
//Silver
spriteset(spriteset_ICSD_DMU_1100Class_Silver_Purchase,   "gfx/ICSD_DMU_1100Class_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_1100Class_Silver,   "gfx/ICSD_DMU_1100Class_Silver.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_1100Class_Silver_r,   "gfx/ICSD_DMU_1100Class_Silver.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Silver_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Headlights_r;
    spriteset_ICSD_DMU_1100Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Silver_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Markerlights_r;
    spriteset_ICSD_DMU_1100Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Silver_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_1100Class_Silver_r;
    spriteset_ICSD_DMU_1100Class_Silver ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Silver_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Silver_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Silver_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_1100Class_Silver_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_1100Class_Silver_markerlight_stack;
    return sw_ICSD_DMU_1100Class_Silver_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_lead, position_in_consist) {
    0: sw_ICSD_DMU_1100Class_Silver_headlight_stack;
    return sw_ICSD_DMU_1100Class_Silver_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_1100Class_Silver_headlight_and_marker_stack;
return sw_ICSD_DMU_1100Class_Silver_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_1100Class_Silver, 3301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_1100CLASS);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             87;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 20;

        variant_group: item_ICSD_DMU_1100Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_1100Class_Silver_solo;
        can_attach_wagon: sw_ICSD_DMU_1100Class_attach;
        purchase: spriteset_ICSD_DMU_1100Class_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_1100CLASS);
}
}

//1100 Class Railmotor
//Vline
spriteset(spriteset_ICSD_DMU_1100Class_Vline_Purchase,   "gfx/ICSD_DMU_1100Class_Vline.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_1100Class_Vline,   "gfx/ICSD_DMU_1100Class_Vline.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_1100Class_Vline_r,   "gfx/ICSD_DMU_1100Class_Vline.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Vline_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Headlights_r;
    spriteset_ICSD_DMU_1100Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Vline_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Markerlights_r;
    spriteset_ICSD_DMU_1100Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Vline_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_1100Class_Vline_r;
    spriteset_ICSD_DMU_1100Class_Vline ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Vline_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Vline_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Vline_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Vline_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Vline_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Vline_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_1100Class_Vline_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_1100Class_Vline_markerlight_stack;
    return sw_ICSD_DMU_1100Class_Vline_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_lead, position_in_consist) {
    0: sw_ICSD_DMU_1100Class_Vline_headlight_stack;
    return sw_ICSD_DMU_1100Class_Vline_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_1100Class_Vline_headlight_and_marker_stack;
return sw_ICSD_DMU_1100Class_Vline_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_1100Class_Vline, 3302) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_1100CLASS);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             87;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 20;

        variant_group: item_ICSD_DMU_1100Class;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_1100Class_Vline_solo;
        can_attach_wagon: sw_ICSD_DMU_1100Class_attach;
        purchase: spriteset_ICSD_DMU_1100Class_Vline_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_1100CLASS);
}
}

//Prospector Railcar
//CC1
spriteset(spriteset_ICSD_DMU_Prospector_Purchase,   "gfx/ICSD_DMU_Prospector.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector,   "gfx/ICSD_DMU_Prospector.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_r,   "gfx/ICSD_DMU_Prospector.png") {template_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_ICSD_DMU_Prospector_Headlights,   "gfx/ICSD_DMU_Prospector_Headlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_Prospector_Headlights_r,   "gfx/ICSD_DMU_Prospector_Headlights.png") {template_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_ICSD_DMU_Prospector_Markerlights,   "gfx/ICSD_DMU_Prospector_Markerlights.png") {template_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_Prospector_Markerlights_r,   "gfx/ICSD_DMU_Prospector.png") {template_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_attach, vehicle_type_id){
    item_ICSD_DMU_Prospector     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Prospector_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Prospector_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Prospector_WAGR     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_r;
    spriteset_ICSD_DMU_Prospector ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_markerlight_stack;
    return sw_ICSD_DMU_Prospector_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_headlight_stack;
    return sw_ICSD_DMU_Prospector_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Prospector, 3400) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             100;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

//        variant_group: item_ICSD_DMU_Prospector;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

//Prospector Railcar
//Silver
spriteset(spriteset_ICSD_DMU_Prospector_Silver_Purchase,   "gfx/ICSD_DMU_Prospector_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector_Silver,   "gfx/ICSD_DMU_Prospector_Silver.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_Silver_r,   "gfx/ICSD_DMU_Prospector_Silver.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Silver_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Silver_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Silver_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_Silver_r;
    spriteset_ICSD_DMU_Prospector_Silver ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Silver_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Silver_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Silver_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_Silver_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_Silver_markerlight_stack;
    return sw_ICSD_DMU_Prospector_Silver_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_Silver_headlight_stack;
    return sw_ICSD_DMU_Prospector_Silver_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_Silver_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_Silver_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Prospector_Silver, 3401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             100;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Prospector;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_Silver_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

//Prospector Railcar
//Early
spriteset(spriteset_ICSD_DMU_Prospector_Early_Purchase,   "gfx/ICSD_DMU_Prospector_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector_Early,   "gfx/ICSD_DMU_Prospector_Early.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_Early_r,   "gfx/ICSD_DMU_Prospector_Early.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_Early_r;
    spriteset_ICSD_DMU_Prospector_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_Early_markerlight_stack;
    return sw_ICSD_DMU_Prospector_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_Early_headlight_stack;
    return sw_ICSD_DMU_Prospector_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_Early_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_Early_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Prospector_Early, 3402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             100;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Prospector;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_Early_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_Early_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

//Prospector Railcar
//WAGR
spriteset(spriteset_ICSD_DMU_Prospector_WAGR_Purchase,   "gfx/ICSD_DMU_Prospector_WAGR.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector_WAGR,   "gfx/ICSD_DMU_Prospector_WAGR.png") {template_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_WAGR_r,   "gfx/ICSD_DMU_Prospector_WAGR.png") {template_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_WAGR_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_WAGR_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_WAGR_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_WAGR_r;
    spriteset_ICSD_DMU_Prospector_WAGR ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_WAGR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_WAGR_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_WAGR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_WAGR_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_WAGR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_WAGR_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_WAGR_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_WAGR_markerlight_stack;
    return sw_ICSD_DMU_Prospector_WAGR_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_WAGR_headlight_stack;
    return sw_ICSD_DMU_Prospector_WAGR_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_WAGR_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_WAGR_lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Prospector_WAGR, 3403) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             100;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Prospector;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_WAGR_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_WAGR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

//Silver Fern
//CC1
spriteset(spriteset_ICSD_DMU_SilverFern_Purchase,   "gfx/ICSD_DMU_SilverFern.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SilverFern_Lead,   "gfx/ICSD_DMU_SilverFern.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SilverFern_Rear,   "gfx/ICSD_DMU_SilverFern.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SilverFern_Mid,   "gfx/ICSD_DMU_SilverFern.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SilverFern_Trailer,   "gfx/ICSD_DMU_SilverFern.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SilverFern_attach, vehicle_type_id){
    item_ICSD_DMU_SilverFern     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_SilverFern_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_SilverFern_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_SilverFern_Late     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SilverFern_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SilverFern_Rear;
    spriteset_ICSD_DMU_SilverFern_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_SilverFern, 3450) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SilverFern_last;
        can_attach_wagon: sw_ICSD_DMU_SilverFern_attach;
        purchase: spriteset_ICSD_DMU_SilverFern_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SilverFern_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
    }
}

//Silver Fern
//Silver
spriteset(spriteset_ICSD_DMU_SilverFern_Silver_Purchase,   "gfx/ICSD_DMU_SilverFern_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SilverFern_Silver_Lead,   "gfx/ICSD_DMU_SilverFern_Silver.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SilverFern_Silver_Rear,   "gfx/ICSD_DMU_SilverFern_Silver.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SilverFern_Silver_Mid,   "gfx/ICSD_DMU_SilverFern_Silver.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SilverFern_Silver_Trailer,   "gfx/ICSD_DMU_SilverFern_Silver.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SilverFern_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SilverFern_Silver_Rear;
    spriteset_ICSD_DMU_SilverFern_Silver_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_SilverFern_Silver, 3451) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_SilverFern;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SilverFern_Silver_last;
        can_attach_wagon: sw_ICSD_DMU_SilverFern_attach;
        purchase: spriteset_ICSD_DMU_SilverFern_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SilverFern_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
    }
}

//Silver Fern
//Early
spriteset(spriteset_ICSD_DMU_SilverFern_Early_Purchase,   "gfx/ICSD_DMU_SilverFern_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SilverFern_Early_Lead,   "gfx/ICSD_DMU_SilverFern_Early.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SilverFern_Early_Rear,   "gfx/ICSD_DMU_SilverFern_Early.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SilverFern_Early_Mid,   "gfx/ICSD_DMU_SilverFern_Early.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SilverFern_Early_Trailer,   "gfx/ICSD_DMU_SilverFern_Early.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SilverFern_Early_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SilverFern_Early_Rear;
    spriteset_ICSD_DMU_SilverFern_Early_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_SilverFern_Early, 3452) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_SilverFern;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SilverFern_Early_last;
        can_attach_wagon: sw_ICSD_DMU_SilverFern_attach;
        purchase: spriteset_ICSD_DMU_SilverFern_Early_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SilverFern_Early_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
    }
}

//Silver Fern
//Late
spriteset(spriteset_ICSD_DMU_SilverFern_Late_Purchase,   "gfx/ICSD_DMU_SilverFern_Late.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SilverFern_Late_Lead,   "gfx/ICSD_DMU_SilverFern_Late.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SilverFern_Late_Rear,   "gfx/ICSD_DMU_SilverFern_Late.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SilverFern_Late_Mid,   "gfx/ICSD_DMU_SilverFern_Late.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SilverFern_Late_Trailer,   "gfx/ICSD_DMU_SilverFern_Late.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SilverFern_Late_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SilverFern_Late_Rear;
    spriteset_ICSD_DMU_SilverFern_Late_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_SilverFern_Late, 3453) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_SilverFern;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SilverFern_Late_last;
        can_attach_wagon: sw_ICSD_DMU_SilverFern_attach;
        purchase: spriteset_ICSD_DMU_SilverFern_Late_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SilverFern_Late_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
    }
}

//Koru
//CC1
spriteset(spriteset_ICSD_DMU_Koru_Purchase,   "gfx/ICSD_DMU_Koru.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Koru_Lead,   "gfx/ICSD_DMU_Koru.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Koru_Rear,   "gfx/ICSD_DMU_Koru.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Koru_Mid,   "gfx/ICSD_DMU_Koru.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Koru_Trailer,   "gfx/ICSD_DMU_Koru.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Koru_attach, vehicle_type_id){
    item_ICSD_DMU_Koru     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Koru_NZR     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Koru_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Koru_Rear;
    spriteset_ICSD_DMU_Koru_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Koru, 3500) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_KORU);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            160 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Koru_last;
        can_attach_wagon: sw_ICSD_DMU_Koru_attach;
        purchase: spriteset_ICSD_DMU_Koru_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_KORU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Koru_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            460;
    }
}

//Koru
//NZR
spriteset(spriteset_ICSD_DMU_Koru_NZR_Purchase,   "gfx/ICSD_DMU_Koru_NZR.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Koru_NZR_Lead,   "gfx/ICSD_DMU_Koru_NZR.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Koru_NZR_Rear,   "gfx/ICSD_DMU_Koru_NZR.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Koru_NZR_Mid,   "gfx/ICSD_DMU_Koru_NZR.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Koru_NZR_Trailer,   "gfx/ICSD_DMU_Koru_NZR.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Koru_NZR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Koru_NZR_Rear;
    spriteset_ICSD_DMU_Koru_NZR_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Koru_NZR, 3501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_KORU);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            160 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     17;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Koru;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Koru_NZR_last;
        can_attach_wagon: sw_ICSD_DMU_Koru_attach;
        purchase: spriteset_ICSD_DMU_Koru_NZR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_KORU);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Koru_NZR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            460;
    }
}

//WAGR ADP/ADQ
//CC1
spriteset(spriteset_ICSD_DMU_ADPADQ_Purchase,   "gfx/ICSD_DMU_ADPADQ.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Lead,   "gfx/ICSD_DMU_ADPADQ.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Rear,   "gfx/ICSD_DMU_ADPADQ.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid,   "gfx/ICSD_DMU_ADPADQ.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Trailer,   "gfx/ICSD_DMU_ADPADQ.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_attach, vehicle_type_id){
    item_ICSD_DMU_ADPADQ     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_ADPADQ_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_ADPADQ_Mid     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_ADPADQ_Late     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Rear;
    spriteset_ICSD_DMU_ADPADQ_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_ADPADQ, 3550) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             135;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

//        variant_group: item_ICSD_DMU_ADPADQ;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
    }
}

//WAGR ADP/ADQ
//Early
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Purchase,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Lead,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Rear,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Mid,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Trailer,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_Early_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Early_Rear;
    spriteset_ICSD_DMU_ADPADQ_Early_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_ADPADQ_Early, 3551) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             135;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_ADPADQ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_Early_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Early_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Early_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
    }
}

//WAGR ADP/ADQ
//Mid
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Purchase,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Lead,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Rear,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Mid,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Trailer,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_Mid_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Mid_Rear;
    spriteset_ICSD_DMU_ADPADQ_Mid_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_ADPADQ_Mid, 3552) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             135;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_ADPADQ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_Mid_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Mid_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Mid_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
    }
}

//WAGR ADP/ADQ
//Late
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Purchase,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Lead,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Rear,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Mid,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Trailer,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_Late_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Late_Rear;
    spriteset_ICSD_DMU_ADPADQ_Late_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_ADPADQ_Late, 3553) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             135;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_ADPADQ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_Late_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Late_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Late_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
    }
}

//Xplorer
//CC1
spriteset(spriteset_ICSD_DMU_Xplorer_Purchase,   "gfx/ICSD_DMU_Xplorer.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Lead,   "gfx/ICSD_DMU_Xplorer.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Rear,   "gfx/ICSD_DMU_Xplorer.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Mid,   "gfx/ICSD_DMU_Xplorer.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trailer,   "gfx/ICSD_DMU_Xplorer.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_attach, vehicle_type_id){
    item_ICSD_DMU_Xplorer     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Xplorer_Countrylink     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Xplorer_CityRailEarly     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Xplorer_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Xplorer_Trainlink1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Xplorer_Trainlink2     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Rear;
    spriteset_ICSD_DMU_Xplorer_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Xplorer, 3600) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             140;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

//        variant_group: item_ICSD_DMU_Xplorer;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
    }
}

//Xplorer
//Countrylink
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Purchase,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Lead,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Rear,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Mid,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Trailer,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_Countrylink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Countrylink_Rear;
    spriteset_ICSD_DMU_Xplorer_Countrylink_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Xplorer_Countrylink, 3601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             140;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Xplorer;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_Countrylink_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Countrylink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Countrylink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
    }
}

//Xplorer
//CityRailEarly
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Purchase,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Lead,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Rear,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Mid,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Trailer,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_CityRailEarly_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_CityRailEarly_Rear;
    spriteset_ICSD_DMU_Xplorer_CityRailEarly_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Xplorer_CityRailEarly, 3602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             140;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Xplorer;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_CityRailEarly_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_CityRailEarly_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_CityRailEarly_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
    }
}

//Xplorer
//CityRailEarly
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Purchase,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Lead,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Rear,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Mid,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Trailer,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_CityRail_Rear;
    spriteset_ICSD_DMU_Xplorer_CityRail_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Xplorer_CityRail, 3603) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             140;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Xplorer;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_CityRail_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_CityRail_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
    }
}

//Xplorer
//Trainlink1
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Purchase,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Lead,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Rear,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Mid,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Trailer,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_Trainlink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Trainlink1_Rear;
    spriteset_ICSD_DMU_Xplorer_Trainlink1_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Xplorer_Trainlink1, 3604) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             140;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Xplorer;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_Trainlink1_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Trainlink1_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Trainlink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
    }
}

//Xplorer
//Trainlink2
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Purchase,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Lead,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Rear,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Mid,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Trailer,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_Trainlink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Trainlink2_Rear;
    spriteset_ICSD_DMU_Xplorer_Trainlink2_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Xplorer_Trainlink2, 3605) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     19;
        running_cost_factor:             140;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Xplorer;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_Trainlink2_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Trainlink2_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Trainlink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
    }
}

//WD Class
//CC1
spriteset(spriteset_ICSD_DMU_WDClass_Purchase,   "gfx/ICSD_DMU_WDClass.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_WDClass_Lead,   "gfx/ICSD_DMU_WDClass.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_WDClass_Rear,   "gfx/ICSD_DMU_WDClass.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_WDClass_Mid,   "gfx/ICSD_DMU_WDClass.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_WDClass_Trailer,   "gfx/ICSD_DMU_WDClass.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_WDClass_attach, vehicle_type_id){
    item_ICSD_DMU_WDClass     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_WDClass_TransWA     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_WDClass_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_WDClass_Rear;
    spriteset_ICSD_DMU_WDClass_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_WDClass, 3700) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_WDCLASS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            200 km/h;
        power:                            1036 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             145;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_WDClass_last;
        can_attach_wagon: sw_ICSD_DMU_WDClass_attach;
        purchase: spriteset_ICSD_DMU_WDClass_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_WDCLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_WDClass_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            518;
    }
}

//WD Class
//TransWA
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Purchase,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Lead,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Rear,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Mid,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Trailer,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_WDClass_TransWA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_WDClass_TransWA_Rear;
    spriteset_ICSD_DMU_WDClass_TransWA_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_WDClass_TransWA, 3701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_WDCLASS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            200 km/h;
        power:                            1036 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             145;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_WDClass;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_WDClass_TransWA_last;
        can_attach_wagon: sw_ICSD_DMU_WDClass_attach;
        purchase: spriteset_ICSD_DMU_WDClass_TransWA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_WDCLASS);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_WDClass_TransWA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            518;
    }
}

//Vlocity
//CC1
spriteset(spriteset_ICSD_DMU_Vlocity_Purchase,   "gfx/ICSD_DMU_Vlocity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Vlocity_Lead,   "gfx/ICSD_DMU_Vlocity.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Vlocity_Rear,   "gfx/ICSD_DMU_Vlocity.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Vlocity_Mid,   "gfx/ICSD_DMU_Vlocity.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Vlocity_Trailer,   "gfx/ICSD_DMU_Vlocity.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Vlocity_attach, vehicle_type_id){
    item_ICSD_DMU_Vlocity     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Vlocity_Original     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Vlocity_OriginalYellow     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Vlocity_VlineRed     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Vlocity_PTV     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Vlocity_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Vlocity_Rear;
    spriteset_ICSD_DMU_Vlocity_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Vlocity, 3750) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             150;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Vlocity_last;
        can_attach_wagon: sw_ICSD_DMU_Vlocity_attach;
        purchase: spriteset_ICSD_DMU_Vlocity_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_VLOCITY);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Vlocity_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
    }
}

//Vlocity
//Original
spriteset(spriteset_ICSD_DMU_Vlocity_Original_Purchase,   "gfx/ICSD_DMU_Vlocity_Original.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Vlocity_Original_Lead,   "gfx/ICSD_DMU_Vlocity_Original.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Vlocity_Original_Rear,   "gfx/ICSD_DMU_Vlocity_Original.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Vlocity_Original_Mid,   "gfx/ICSD_DMU_Vlocity_Original.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Vlocity_Original_Trailer,   "gfx/ICSD_DMU_Vlocity_Original.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Vlocity_Original_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Vlocity_Original_Rear;
    spriteset_ICSD_DMU_Vlocity_Original_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Vlocity_Original, 3751) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             150;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Vlocity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Vlocity_Original_last;
        can_attach_wagon: sw_ICSD_DMU_Vlocity_attach;
        purchase: spriteset_ICSD_DMU_Vlocity_Original_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_VLOCITY);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Vlocity_Original_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
    }
}

//Vlocity
//OriginalYellow
spriteset(spriteset_ICSD_DMU_Vlocity_OriginalYellow_Purchase,   "gfx/ICSD_DMU_Vlocity_OriginalYellow.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Vlocity_OriginalYellow_Lead,   "gfx/ICSD_DMU_Vlocity_OriginalYellow.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Vlocity_OriginalYellow_Rear,   "gfx/ICSD_DMU_Vlocity_OriginalYellow.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Vlocity_OriginalYellow_Mid,   "gfx/ICSD_DMU_Vlocity_OriginalYellow.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Vlocity_OriginalYellow_Trailer,   "gfx/ICSD_DMU_Vlocity_OriginalYellow.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Vlocity_OriginalYellow_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Vlocity_OriginalYellow_Rear;
    spriteset_ICSD_DMU_Vlocity_OriginalYellow_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Vlocity_OriginalYellow, 3752) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             150;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Vlocity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Vlocity_OriginalYellow_last;
        can_attach_wagon: sw_ICSD_DMU_Vlocity_attach;
        purchase: spriteset_ICSD_DMU_Vlocity_OriginalYellow_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_VLOCITY);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Vlocity_OriginalYellow_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
    }
}

//Vlocity
//VlineRed
spriteset(spriteset_ICSD_DMU_Vlocity_VlineRed_Purchase,   "gfx/ICSD_DMU_Vlocity_VlineRed.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Vlocity_VlineRed_Lead,   "gfx/ICSD_DMU_Vlocity_VlineRed.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Vlocity_VlineRed_Rear,   "gfx/ICSD_DMU_Vlocity_VlineRed.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Vlocity_VlineRed_Mid,   "gfx/ICSD_DMU_Vlocity_VlineRed.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Vlocity_VlineRed_Trailer,   "gfx/ICSD_DMU_Vlocity_VlineRed.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Vlocity_VlineRed_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Vlocity_VlineRed_Rear;
    spriteset_ICSD_DMU_Vlocity_VlineRed_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Vlocity_VlineRed, 3753) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             150;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Vlocity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Vlocity_VlineRed_last;
        can_attach_wagon: sw_ICSD_DMU_Vlocity_attach;
        purchase: spriteset_ICSD_DMU_Vlocity_VlineRed_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_VLOCITY);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Vlocity_VlineRed_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
    }
}

//Vlocity
//PTV
spriteset(spriteset_ICSD_DMU_Vlocity_PTV_Purchase,   "gfx/ICSD_DMU_Vlocity_PTV.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Vlocity_PTV_Lead,   "gfx/ICSD_DMU_Vlocity_PTV.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Vlocity_PTV_Rear,   "gfx/ICSD_DMU_Vlocity_PTV.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Vlocity_PTV_Mid,   "gfx/ICSD_DMU_Vlocity_PTV.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Vlocity_PTV_Trailer,   "gfx/ICSD_DMU_Vlocity_PTV.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Vlocity_PTV_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Vlocity_PTV_Rear;
    spriteset_ICSD_DMU_Vlocity_PTV_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Vlocity_PTV, 3754) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             150;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_Vlocity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Vlocity_PTV_last;
        can_attach_wagon: sw_ICSD_DMU_Vlocity_attach;
        purchase: spriteset_ICSD_DMU_Vlocity_PTV_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_VLOCITY);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Vlocity_PTV_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
    }
}

//Broken Hill Railcar
//CC1
spriteset(spriteset_ICSD_DMU_BHRC_Purchase,   "gfx/ICSD_DMU_BHRC.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_BHRC_Lead,   "gfx/ICSD_DMU_BHRC.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_BHRC_Rear,   "gfx/ICSD_DMU_BHRC.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_BHRC_Mid,   "gfx/ICSD_DMU_BHRC.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_BHRC_Trailer,   "gfx/ICSD_DMU_BHRC.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_attach, vehicle_type_id){
    item_ICSD_DMU_BHRC     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_BHRC_Countrylink     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_BHRC_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_BHRC_Rear;
    spriteset_ICSD_DMU_BHRC_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_BHRC, 3800) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_BHRC);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        63 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             155;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 10;

//        variant_group: item_ICSD_DMU_BHRC;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_BHRC_last;
        can_attach_wagon: sw_ICSD_DMU_BHRC_attach;
        purchase: spriteset_ICSD_DMU_BHRC_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_BHRC);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_BHRC_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            750;
    }
}

//Broken Hill Railcar
//Countrylink
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Purchase,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Lead,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Rear,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Mid,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Trailer,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_Countrylink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_BHRC_Countrylink_Rear;
    spriteset_ICSD_DMU_BHRC_Countrylink_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_BHRC_Countrylink, 3801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_BHRC);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        63 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             155;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_BHRC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_BHRC_Countrylink_last;
        can_attach_wagon: sw_ICSD_DMU_BHRC_attach;
        purchase: spriteset_ICSD_DMU_BHRC_Countrylink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_BHRC);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_BHRC_Countrylink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            750;
    }
}

//Broken Hill Railcar
//Trainlink
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Purchase,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Lead,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Rear,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Mid,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Trailer,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_BHRC_Trainlink_Rear;
    spriteset_ICSD_DMU_BHRC_Trainlink_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_BHRC_Trainlink, 3802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_BHRC);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        63 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             155;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 10;

        variant_group: item_ICSD_DMU_BHRC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_BHRC_Trainlink_last;
        can_attach_wagon: sw_ICSD_DMU_BHRC_attach;
        purchase: spriteset_ICSD_DMU_BHRC_Trainlink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_BHRC);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_BHRC_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            750;
    }
}

//Australind Railcar
//CC1
spriteset(spriteset_ICSD_DMU_Australind_Purchase,   "gfx/ICSD_DMU_Australind.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Australind_Lead,   "gfx/ICSD_DMU_Australind.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Australind_Rear,   "gfx/ICSD_DMU_Australind.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Australind_Mid,   "gfx/ICSD_DMU_Australind.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Australind_Trailer,   "gfx/ICSD_DMU_Australind.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Australind_attach, vehicle_type_id){
    item_ICSD_DMU_Australind     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_Australind_TransWA     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Australind_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Australind_Rear;
    spriteset_ICSD_DMU_Australind_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Australind, 3900) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_AUSTRALIND);
        introduction_date:                date(2025,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            1350 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             160;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Australind_last;
        can_attach_wagon: sw_ICSD_DMU_Australind_attach;
        purchase: spriteset_ICSD_DMU_Australind_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_AUSTRALIND);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Australind_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            675;
    }
}

//Australind Railcar
//TransWA
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Purchase,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Lead,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Rear,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Mid,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Trailer,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Australind_TransWA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Australind_TransWA_Rear;
    spriteset_ICSD_DMU_Australind_TransWA_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_Australind_TransWA, 3901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_AUSTRALIND);
        introduction_date:                date(2025,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            1350 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             160;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: item_ICSD_DMU_Australind;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Australind_TransWA_last;
        can_attach_wagon: sw_ICSD_DMU_Australind_attach;
        purchase: spriteset_ICSD_DMU_Australind_TransWA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_AUSTRALIND);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Australind_TransWA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            675;
    }
}

//New Regional Fleet Long Regional
//CC1
spriteset(spriteset_ICSD_DMU_NRFLR_Purchase,   "gfx/ICSD_DMU_NRFLR.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_NRFLR_Lead,   "gfx/ICSD_DMU_NRFLR.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_NRFLR_Rear,   "gfx/ICSD_DMU_NRFLR.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_NRFLR_Mid,   "gfx/ICSD_DMU_NRFLR.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_NRFLR_Trailer,   "gfx/ICSD_DMU_NRFLR.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_NRFLR_attach, vehicle_type_id){
    item_ICSD_DMU_NRFLR     : return CB_RESULT_ATTACH_ALLOW  ;
    item_ICSD_DMU_NRFLR_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_NRFLR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_NRFLR_Rear;
    spriteset_ICSD_DMU_NRFLR_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_NRFLR, 3950) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_NRFLR);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            1350 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             160;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 20;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_NRFLR_last;
        can_attach_wagon: sw_ICSD_DMU_NRFLR_attach;
        purchase: spriteset_ICSD_DMU_NRFLR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_NRFLR);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_NRFLR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            675;
    }
}

//New Regional Fleet Long Regional
//Trainlink
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Purchase,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Lead,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Rear,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Mid,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_8(7, 89)}
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Trailer,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_NRFLR_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_NRFLR_Trainlink_Rear;
    spriteset_ICSD_DMU_NRFLR_Trainlink_Lead;
}

item(FEAT_TRAINS, item_ICSD_DMU_NRFLR_Trainlink, 3951) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_NRFLR);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            1350 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             160;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 20;

        variant_group: item_ICSD_DMU_NRFLR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_NRFLR_Trainlink_last;
        can_attach_wagon: sw_ICSD_DMU_NRFLR_attach;
        purchase: spriteset_ICSD_DMU_NRFLR_Trainlink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_NRFLR);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_NRFLR_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            675;
    }
}

/////////////////
//Express NEMUs//
/////////////////

//XPT
//CC1
spriteset(spriteset_EXP_DMU_XPT_Purchase,   "gfx/EXP_DMU_XPT.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_XPT_Lead,   "gfx/EXP_DMU_XPT.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_XPT_Rear,   "gfx/EXP_DMU_XPT.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_XPT_Mid,   "gfx/EXP_DMU_XPT.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_XPT_Trailer,   "gfx/EXP_DMU_XPT.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_XPT_attach, vehicle_type_id){
    item_EXP_DMU_XPT     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_XPT_BR     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_XPT_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_XPT_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_XPT_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_XPT_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_XPT_Rear;
    spriteset_EXP_DMU_XPT_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_XPT, 5000) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_XPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_XPT_last;
        can_attach_wagon: sw_EXP_DMU_XPT_attach;
        purchase: spriteset_EXP_DMU_XPT_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_XPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_XPT_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT
//BR
spriteset(spriteset_EXP_DMU_XPT_BR_Purchase,   "gfx/EXP_DMU_XPT_BR.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_XPT_BR_Lead,   "gfx/EXP_DMU_XPT_BR.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_XPT_BR_Rear,   "gfx/EXP_DMU_XPT_BR.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_XPT_BR_Mid,   "gfx/EXP_DMU_XPT_BR.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_XPT_BR_Trailer,   "gfx/EXP_DMU_XPT_BR.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_XPT_BR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_XPT_BR_Rear;
    spriteset_EXP_DMU_XPT_BR_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_XPT_BR, 5001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_XPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_XPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_XPT_BR_last;
        can_attach_wagon: sw_EXP_DMU_XPT_attach;
        purchase: spriteset_EXP_DMU_XPT_BR_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_XPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_XPT_BR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT
//SRA
spriteset(spriteset_EXP_DMU_XPT_SRA_Purchase,   "gfx/EXP_DMU_XPT_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_XPT_SRA_Lead,   "gfx/EXP_DMU_XPT_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_XPT_SRA_Rear,   "gfx/EXP_DMU_XPT_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_XPT_SRA_Mid,   "gfx/EXP_DMU_XPT_SRA.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_XPT_SRA_Trailer,   "gfx/EXP_DMU_XPT_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_XPT_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_XPT_SRA_Rear;
    spriteset_EXP_DMU_XPT_SRA_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_XPT_SRA, 5002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_XPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_XPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_XPT_SRA_last;
        can_attach_wagon: sw_EXP_DMU_XPT_attach;
        purchase: spriteset_EXP_DMU_XPT_SRA_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_XPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_XPT_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT
//Countrylink1
spriteset(spriteset_EXP_DMU_XPT_Countrylink1_Purchase,   "gfx/EXP_DMU_XPT_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_XPT_Countrylink1_Lead,   "gfx/EXP_DMU_XPT_Countrylink1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_XPT_Countrylink1_Rear,   "gfx/EXP_DMU_XPT_Countrylink1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_XPT_Countrylink1_Mid,   "gfx/EXP_DMU_XPT_Countrylink1.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_XPT_Countrylink1_Trailer,   "gfx/EXP_DMU_XPT_Countrylink1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_XPT_Countrylink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_XPT_Countrylink1_Rear;
    spriteset_EXP_DMU_XPT_Countrylink1_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_XPT_Countrylink1, 5003) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_XPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_XPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_XPT_Countrylink1_last;
        can_attach_wagon: sw_EXP_DMU_XPT_attach;
        purchase: spriteset_EXP_DMU_XPT_Countrylink1_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_XPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_XPT_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT
//Countrylink2
spriteset(spriteset_EXP_DMU_XPT_Countrylink2_Purchase,   "gfx/EXP_DMU_XPT_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_XPT_Countrylink2_Lead,   "gfx/EXP_DMU_XPT_Countrylink2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_XPT_Countrylink2_Rear,   "gfx/EXP_DMU_XPT_Countrylink2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_XPT_Countrylink2_Mid,   "gfx/EXP_DMU_XPT_Countrylink2.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_XPT_Countrylink2_Trailer,   "gfx/EXP_DMU_XPT_Countrylink2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_XPT_Countrylink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_XPT_Countrylink2_Rear;
    spriteset_EXP_DMU_XPT_Countrylink2_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_XPT_Countrylink2, 5004) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_XPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_XPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_XPT_Countrylink2_last;
        can_attach_wagon: sw_EXP_DMU_XPT_attach;
        purchase: spriteset_EXP_DMU_XPT_Countrylink2_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_XPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_XPT_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//HPT
//CC1
spriteset(spriteset_EXP_DMU_HPT_Purchase,   "gfx/EXP_DMU_HPT.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_HPT_Lead,   "gfx/EXP_DMU_HPT.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_HPT_Rear,   "gfx/EXP_DMU_HPT.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_HPT_Mid,   "gfx/EXP_DMU_HPT.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_HPT_Trailer,   "gfx/EXP_DMU_HPT.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_HPT_attach, vehicle_type_id){
    item_EXP_DMU_HPT     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_HPT_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_HPT_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_HPT_Countrylink2      : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_HPT_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_HPT_Rear;
    spriteset_EXP_DMU_HPT_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_HPT, 5100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_HPT);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        53 ton;
        speed:                            240 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             150;
        cargo_capacity:                  0;
        loading_speed: 10;

//        variant_group: ITEM_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_HPT_last;
        can_attach_wagon: sw_EXP_DMU_HPT_attach;
        purchase: spriteset_EXP_DMU_HPT_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_HPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_HPT_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
    }
}

//HPT
//SRA
spriteset(spriteset_EXP_DMU_HPT_SRA_Purchase,   "gfx/EXP_DMU_HPT_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_HPT_SRA_Lead,   "gfx/EXP_DMU_HPT_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_HPT_SRA_Rear,   "gfx/EXP_DMU_HPT_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_HPT_SRA_Mid,   "gfx/EXP_DMU_HPT_SRA.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_HPT_SRA_Trailer,   "gfx/EXP_DMU_HPT_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_HPT_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_HPT_SRA_Rear;
    spriteset_EXP_DMU_HPT_SRA_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_HPT_SRA, 5101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_HPT);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        53 ton;
        speed:                            240 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             150;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_HPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_HPT_SRA_last;
        can_attach_wagon: sw_EXP_DMU_HPT_attach;
        purchase: spriteset_EXP_DMU_HPT_SRA_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_HPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_HPT_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
    }
}

//HPT
//Countrylink1
spriteset(spriteset_EXP_DMU_HPT_Countrylink1_Purchase,   "gfx/EXP_DMU_HPT_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_HPT_Countrylink1_Lead,   "gfx/EXP_DMU_HPT_Countrylink1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_HPT_Countrylink1_Rear,   "gfx/EXP_DMU_HPT_Countrylink1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_HPT_Countrylink1_Mid,   "gfx/EXP_DMU_HPT_Countrylink1.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_HPT_Countrylink1_Trailer,   "gfx/EXP_DMU_HPT_Countrylink1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_HPT_Countrylink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_HPT_Countrylink1_Rear;
    spriteset_EXP_DMU_HPT_Countrylink1_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_HPT_Countrylink1, 5102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_HPT);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        53 ton;
        speed:                            240 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             150;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_HPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_HPT_Countrylink1_last;
        can_attach_wagon: sw_EXP_DMU_HPT_attach;
        purchase: spriteset_EXP_DMU_HPT_Countrylink1_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_HPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_HPT_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
    }
}

//HPT
//Countrylink2
spriteset(spriteset_EXP_DMU_HPT_Countrylink2_Purchase,   "gfx/EXP_DMU_HPT_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_HPT_Countrylink2_Lead,   "gfx/EXP_DMU_HPT_Countrylink2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_HPT_Countrylink2_Rear,   "gfx/EXP_DMU_HPT_Countrylink2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_HPT_Countrylink2_Mid,   "gfx/EXP_DMU_HPT_Countrylink2.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_HPT_Countrylink2_Trailer,   "gfx/EXP_DMU_HPT_Countrylink2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_HPT_Countrylink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_HPT_Countrylink2_Rear;
    spriteset_EXP_DMU_HPT_Countrylink2_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_HPT_Countrylink2, 5103) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_HPT);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        53 ton;
        speed:                            240 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             150;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_DMU_HPT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_HPT_Countrylink2_last;
        can_attach_wagon: sw_EXP_DMU_HPT_attach;
        purchase: spriteset_EXP_DMU_HPT_Countrylink2_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_HPT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_HPT_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
    }
}

//Diesel Tilt Train
//CC1
spriteset(spriteset_EXP_DMU_DTT_Purchase,   "gfx/EXP_DMU_DTT.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_DTT_Lead,   "gfx/EXP_DMU_DTT.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_DTT_Rear,   "gfx/EXP_DMU_DTT.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_DTT_Mid,   "gfx/EXP_DMU_DTT.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_DTT_Trailer,   "gfx/EXP_DMU_DTT.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_attach, vehicle_type_id){
    item_EXP_DMU_DTT     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_DTT_Liv1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_DMU_DTT_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_DTT_Rear;
    spriteset_EXP_DMU_DTT_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_DTT, 5200) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_DTT);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            220 km/h;
        power:                            3640 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             170;
        cargo_capacity:                  0;
        loading_speed: 5;

//        variant_group: item_EXP_DMU_DTT;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_DTT_last;
        can_attach_wagon: sw_EXP_DMU_DTT_attach;
        purchase: spriteset_EXP_DMU_DTT_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_DTT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_DTT_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
    }
}

//Diesel Tilt Train
//Liv1
spriteset(spriteset_EXP_DMU_DTT_Liv1_Purchase,   "gfx/EXP_DMU_DTT_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_DTT_Liv1_Lead,   "gfx/EXP_DMU_DTT_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_DTT_Liv1_Rear,   "gfx/EXP_DMU_DTT_Liv1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_DTT_Liv1_Mid,   "gfx/EXP_DMU_DTT_Liv1.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_DTT_Liv1_Trailer,   "gfx/EXP_DMU_DTT_Liv1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_Liv1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_DTT_Liv1_Rear;
    spriteset_EXP_DMU_DTT_Liv1_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_DTT_Liv1, 5201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_DTT);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            220 km/h;
        power:                            3640 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             170;
        cargo_capacity:                  0;
        loading_speed: 5;

        variant_group: item_EXP_DMU_DTT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_DTT_Liv1_last;
        can_attach_wagon: sw_EXP_DMU_DTT_attach;
        purchase: spriteset_EXP_DMU_DTT_Liv1_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_DTT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_DTT_Liv1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
    }
}

//Diesel Tilt Train
//Liv2
spriteset(spriteset_EXP_DMU_DTT_Liv2_Purchase,   "gfx/EXP_DMU_DTT_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_DTT_Liv2_Lead,   "gfx/EXP_DMU_DTT_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_DTT_Liv2_Rear,   "gfx/EXP_DMU_DTT_Liv2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_DTT_Liv2_Mid,   "gfx/EXP_DMU_DTT_Liv2.png") {template_8(7, 89)}
spriteset(spriteset_EXP_DMU_DTT_Liv2_Trailer,   "gfx/EXP_DMU_DTT_Liv2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_Liv2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_DTT_Liv2_Rear;
    spriteset_EXP_DMU_DTT_Liv2_Lead;
}

item(FEAT_TRAINS, item_EXP_DMU_DTT_Liv2, 5202) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_DTT);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            220 km/h;
        power:                            3640 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             170;
        cargo_capacity:                  0;
        loading_speed: 5;

        variant_group: item_EXP_DMU_DTT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_DTT_Liv2_last;
        can_attach_wagon: sw_EXP_DMU_DTT_attach;
        purchase: spriteset_EXP_DMU_DTT_Liv2_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_DTT);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_DTT_Liv2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
    }
}

/////////////////
//Express NEMUs//
/////////////////

//XPT-E
//CC1
spriteset(spriteset_EXP_EMU_XPTE_Purchase,   "gfx/EXP_EMU_XPT-E.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_Lead,   "gfx/EXP_EMU_XPT-E.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_Rear,   "gfx/EXP_EMU_XPT-E.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_Mid,   "gfx/EXP_EMU_XPT-E.png") {template_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_Trailer,   "gfx/EXP_EMU_XPT-E.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_attach, vehicle_type_id){
    item_EXP_EMU_XPTE     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_EMU_XPTE_BR     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_EMU_XPTE_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_EMU_XPTE_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
    item_EXP_EMU_XPTE_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_MU_TRAILER     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_Rear;
    spriteset_EXP_EMU_XPTE_Lead;
}

item(FEAT_TRAINS, item_EXP_EMU_XPTE,) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             120;
        cargo_capacity:                  0;
        loading_speed: 10;

//        variant_group: item_EXP_EMU_XPTE;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT-E
//BR
spriteset(spriteset_EXP_EMU_XPTE_BR_Purchase,   "gfx/EXP_EMU_XPT-E_BR.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_BR_Lead,   "gfx/EXP_EMU_XPT-E_BR.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_BR_Rear,   "gfx/EXP_EMU_XPT-E_BR.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_BR_Mid,   "gfx/EXP_EMU_XPT-E_BR.png") {template_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_BR_Trailer,   "gfx/EXP_EMU_XPT-E_BR.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_BR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_BR_Rear;
    spriteset_EXP_EMU_XPTE_BR_Lead;
}

item(FEAT_TRAINS, item_EXP_EMU_XPTE_BR,) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             120;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_EMU_XPTE;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_BR_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_BR_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_BR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT-E
//SRA
spriteset(spriteset_EXP_EMU_XPTE_SRA_Purchase,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_SRA_Lead,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_SRA_Rear,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_SRA_Mid,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_SRA_Trailer,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_SRA_Rear;
    spriteset_EXP_EMU_XPTE_SRA_Lead;
}

item(FEAT_TRAINS, item_EXP_EMU_XPTE_SRA,) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             120;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_EMU_XPTE;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_SRA_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_SRA_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT-E
//Countrylink1
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Purchase,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Lead,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Rear,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Mid,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Trailer,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_Countrylink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_Countrylink1_Rear;
    spriteset_EXP_EMU_XPTE_Countrylink1_Lead;
}

item(FEAT_TRAINS, item_EXP_EMU_XPTE_Countrylink1,) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             120;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_EMU_XPTE;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_Countrylink1_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_Countrylink1_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}

//XPT-E
//Countrylink2
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Purchase,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Lead,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Rear,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Mid,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Trailer,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_Countrylink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_Countrylink2_Rear;
    spriteset_EXP_EMU_XPTE_Countrylink2_Lead;
}

item(FEAT_TRAINS, item_EXP_EMU_XPTE_Countrylink2,) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             120;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: item_EXP_EMU_XPTE;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_Countrylink2_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_Countrylink2_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (ITEM_MU_TRAILER) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
    }
}