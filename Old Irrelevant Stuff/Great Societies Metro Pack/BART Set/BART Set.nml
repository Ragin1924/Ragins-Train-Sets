disable_item(FEAT_TRAINS);

grf{
    grfid: "ZM\00\00";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 3;
    min_compatible_version: 1;


param {
        param_purchase_cost {
            type: int;
            name: string(STR_PARAM_PURCHASE_COST);
            desc: string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
    param {
        param_running_cost {
            type: int;
            name: string(STR_PARAM_RUNNING_COST);
            desc: string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }

param {
                param_capacities {
                        type: int;
                        name: string(STR_PARAM_NAME_CAPACITY);
                        desc: string(STR_PARAM_DESC_CAPACITY);
                        min_value: 0;
                        max_value: 1;
                        def_value: 0;
                        names: {
                                                0: string(STR_PARAM_REAL_CAPACITY);
                                                1: string(STR_PARAM_NORMAL_REDUCED);
                        };
                }
        }
}

if (param_capacities == 0) {
    param_capacity_mod = 0;
}

if (param_capacities == 1) {
    param_capacity_mod = -50;
}

railtypetable {
    RAIL, SAA3
}

cargotable {
    PASS,
// Misc
    TOUR,
}

basecost {
 PR_BUILD_VEHICLE_TRAIN: 1 + param_purchase_cost - 4;
 PR_BUILD_VEHICLE_WAGON: 3 + param_purchase_cost - 4;
 PR_RUNNING_TRAIN_ELECTRIC: 3 + param_running_cost - 4;
}
/* Fix depot view */
traininfo_y_offset = 2;
train_width_32_px = 1;

template template_purchase(x, y) {
    //[left_x, upper_y, width, height, offset_x, offset_y]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x     , y, 88, 15, -60, -11, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
}

template template_8_MU(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -14]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -17,        -12]
    [ x+66,     y,        22,        20,        -5,            -10]
    [ x+89,     y,        8,        24,        -3,            -14]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -17,        -12]
    [ x+155,    y,        22,        20,        -5,            -10]
}

template template_A9_MU(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        26,        -3,            -11]
    [ x+9,      y,        24,        21,        -16,        -11]
    [ x+34,     y,        37,        16,        -17,        -12]
    [ x+72,     y,        24,        21,        -5,            -10]
    [ x+97,     y,        8,        26,        -3,            -14]
    [ x+106,     y,        24,        21,        -16,        -11]
    [ x+131,    y,        37,        16,        -17,        -12]
    [ x+169,    y,        24,        21,        -5,            -10]
}

template template_A8_MU(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -11]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -17,        -12]
    [ x+66,     y,        22,        20,        -5,            -10]
    [ x+89,     y,        8,        24,        -3,            -14]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -17,        -12]
    [ x+155,    y,        22,        20,        -5,            -10]
}

//spriteset(spriteset_A_BART_lead,   "gfx/BART A&B_Long_A.png") {template_A9_MU(7, 39)} // <- Define a wagon, in this case the cab
//spriteset(spriteset_A_BART_rear,   "gfx/BART A&B_Long_A.png") {template_A9_MU(7, 66)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
//spriteset(spriteset_B_BART,   "gfx/BART A&B_Long_A.png") {template_A8_MU(7, 93)}  // <- Define the wagon in-between

spriteset(spriteset_A_purchase,   "gfx/BART A&B.png") {template_purchase(7, 21)}
spriteset(spriteset_A_BART_lead,   "gfx/BART A&B.png") {template_8_MU(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_A_BART_rear,   "gfx/BART A&B.png") {template_8_MU(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_B_BART,   "gfx/BART A&B.png") {template_8_MU(7, 89)}

switch(FEAT_TRAINS, SELF, sw_A_BART_attach, vehicle_type_id){
    ITEM_BART_A        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_BART_C_CAR    : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_BART_B_CAR    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU_B) ;
}

switch(FEAT_TRAINS, SELF, sw_A_BART_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_A_BART_rear;
    spriteset_A_BART_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_BART_A) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_BART_A_CAR);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         28 ton;
        speed:                            80 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             12;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100+param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_A_BART_last;
        can_attach_wagon    :    sw_A_BART_attach;
        purchase:                        spriteset_A_purchase;
        additional_text: string(STR_SUBWAY);

}
    livery_override (ITEM_BART_B_CAR) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_B_BART; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100+param_capacity_mod);
        power:                            600;
        speed:                             40;
    }
}

//Vehicle
item (FEAT_TRAINS, ITEM_BART_B_CAR) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        SAA3;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_BART_B_CAR);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     30;
        model_life:                        36;
        length:                            8;

        weight:                         28 ton;
        speed:                            80 mph;
        cost_factor:                     7;
        running_cost_factor:             10;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    100;
        loading_speed: 30;

    }
    graphics {
        default:                        spriteset_B_BART;
        purchase:                        spriteset_B_BART;
        additional_text: string(STR_INFO_B);

}
}


spriteset(spriteset_C_purchase,   "gfx/BART C1&C2.png") {template_purchase(7, 21)}
spriteset(spriteset_C_BART_lead,   "gfx/BART C1&C2.png") {template_8_MU(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_C_BART_rear,   "gfx/BART C1&C2.png") {template_8_MU(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT

switch(FEAT_TRAINS, SELF, sw_C_BART_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_C_BART_rear;
    spriteset_C_BART_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_BART_C_CAR) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_BART_C_CAR);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     30;
        model_life:                        30;
        length:                            8;

        weight:                         28 ton;
        speed:                            80 mph;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             12;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (100+param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_C_BART_last;
       can_attach_wagon    :    sw_A_BART_attach;
         purchase:                        spriteset_C_purchase;
        additional_text: string(STR_SUBWAY);

    }
    livery_override (ITEM_BART_B_CAR) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_B_BART; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                    (100+param_capacity_mod);
        power:                            600;
        speed:                             40;
    }
}

spriteset(spriteset_D_purchase,   "gfx/BART D&E.png") {template_purchase(7, 21)}
spriteset(spriteset_D_BART_lead,   "gfx/BART D&E.png") {template_8_MU(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_D_BART_rear,   "gfx/BART D&E.png") {template_8_MU(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_E_BART,   "gfx/BART D&E.png") {template_8_MU(7, 89)}  // <- Define the wagon in-between

switch(FEAT_TRAINS, SELF, sw_D_BART_attach, vehicle_type_id){
    ITEM_BART_D        : return CB_RESULT_ATTACH_ALLOW  ;
    ITEM_BART_E_CAR    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU_E) ;
}

switch(FEAT_TRAINS, SELF, sw_D_BART_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_D_BART_rear;
    spriteset_D_BART_lead;
}

//Vehicle
item (FEAT_TRAINS, ITEM_BART_D) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here
        dual_headed:                    1; // <- Double Headed, so cab on each end

        track_type:                        SAA3;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_BART_D_CAR);
        introduction_date:                date(2018,1,1);
        vehicle_life:                     30;
        model_life:                        30;
        length:                            8;

        weight:                         28 ton;
        speed:                            80 mph;
        power:                            1552 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             13;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (110+param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        sw_D_BART_last;
        can_attach_wagon    :    sw_D_BART_attach;
        purchase:                        spriteset_D_purchase;
        additional_text: string(STR_SUBWAY);

    }
    livery_override (ITEM_BART_E_CAR) { // <- Override the appearance and stats of ITEM_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_E_BART; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                    (110+param_capacity_mod);
        power:                             776;
        speed:                             40;
    }
}

//Vehicle
item (FEAT_TRAINS, ITEM_BART_E_CAR) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        SAA3;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_BART_E_CAR);
        introduction_date:                date(2018,1,1);
        vehicle_life:                     30;
        model_life:                        36;
        length:                            8;

        weight:                         28 ton;
        speed:                            80 mph;
        cost_factor:                     8;
        running_cost_factor:             8;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    (110+param_capacity_mod);
        loading_speed: 30;

    }
    graphics {
        default:                        spriteset_E_BART;
        purchase:                        spriteset_E_BART;
        additional_text: string(STR_INFO_E);

}
}