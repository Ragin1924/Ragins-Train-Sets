grf{
    grfid: "ZM\08\01";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 10;
    min_compatible_version: 3;
//Purchase Cost Parameter
    param {
        param_purchase_cost {
            type: int;
            name: string(STR_PARAM_PURCHASE_COST);
            desc: string(STR_PARAM_PURCHASE_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Running Cost Parameter
     param {
        param_running_cost {
            type: int;
            name: string(STR_PARAM_RUNNING_COST);
            desc: string(STR_PARAM_RUNNING_COST_DESC);
            min_value: 0;
            max_value: 8;
            def_value: 4;
            names: {
                        0: string(STR_PARAM_DIVIDE_16);
                        1: string(STR_PARAM_DIVIDE_8);
                        2: string(STR_PARAM_DIVIDE_4);
                        3: string(STR_PARAM_DIVIDE_2);
                        4: string(STR_PARAM_NORMAL);
                        5: string(STR_PARAM_TIMES_2);
                        6: string(STR_PARAM_TIMES_4);
                        7: string(STR_PARAM_TIMES_8);
                        8: string(STR_PARAM_TIMES_16);
            };
        }
    }
//Carry Capacity Parameter
    param {
                param_capacities {
                        type: int;
                        name: string(STR_PARAM_NAME_CAPACITY);
                        desc: string(STR_PARAM_DESC_CAPACITY);
                        min_value: 0;
                        max_value: 1;
                        def_value: 0;
                        names: {
                                                0: string(STR_PARAM_REAL_CAPACITY);
                                                1: string(STR_PARAM_NORMAL_REDUCED);
                        };
                }
        }
//RealDisable
	param {
    param_RealDisable {
     name: string(STR_PARAM_NAME_REALDISABLE);
     desc: string(STR_PARAM_DESC_REALDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
 
//PrototypeDisable
	param {
    param_PrototypeDisable {
     name: string(STR_PARAM_NAME_PROTOTYPEDISABLE);
     desc: string(STR_PARAM_DESC_PROTOTYPEDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
  
//ProposalDisable
	param {
    param_ProposalDisable {
     name: string(STR_PARAM_NAME_PROPOSALDISABLE);
     desc: string(STR_PARAM_DESC_PROPOSALDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
  
//FictionalDisable
	param {
    param_FictionalDisable {
     name: string(STR_PARAM_NAME_FICTIONALDISABLE);
     desc: string(STR_PARAM_DESC_FICTIONALDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }

//SuburbanDMUDisable
	param {
    param_SuburbanDMUDisable {
     name: string(STR_PARAM_NAME_SUBURBANDMUDISABLE);
     desc: string(STR_PARAM_DESC_SUBURBANDMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//IntercityDMUDisable
	param {
    param_IntercityDMUDisable {
     name: string(STR_PARAM_NAME_INTERCITYDMUDISABLE);
     desc: string(STR_PARAM_DESC_INTERCITYDMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//ExpressDMUDisable
	param {
    param_ExpressDMUDisable {
     name: string(STR_PARAM_NAME_EXPRESSDMUDISABLE);
     desc: string(STR_PARAM_DESC_EXPRESSDMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//SuburbamEMUDisable
	param {
    param_SuburbanEMUDisable {
     name: string(STR_PARAM_NAME_SUBURBANEMUDISABLE);
     desc: string(STR_PARAM_DESC_SUBURBANEMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//DDSuburbamEMUDisable
	param {
    param_DDSuburbanEMUDisable {
     name: string(STR_PARAM_NAME_DDSUBURBANEMUDISABLE);
     desc: string(STR_PARAM_DESC_DDSUBURBANEMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//IntercityEMUDisable
	param {
    param_IntercityEMUDisable {
     name: string(STR_PARAM_NAME_INTERCITYEMUDISABLE);
     desc: string(STR_PARAM_DESC_INTERCITYEMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//DDIntercityEMUDisable
	param {
    param_DDIntercityEMUDisable {
     name: string(STR_PARAM_NAME_DDINTERCITYEMUDISABLE);
     desc: string(STR_PARAM_DESC_DDINTERCITYEMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//ExpressEMUDisable
	param {
    param_ExpressEMUDisable {
     name: string(STR_PARAM_NAME_EXPRESSEMUDISABLE);
     desc: string(STR_PARAM_DESC_EXPRESSEMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//HighSpeedEMUDisable
	param {
    param_HighSpeedEMUDisable {
     name: string(STR_PARAM_NAME_HIGHSPEEDEMUDISABLE);
     desc: string(STR_PARAM_DESC_HIGHSPEEDEMUDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//DrivingTrailerDisable
	param {
    param_DrivingTrailerDisable {
     name: string(STR_PARAM_NAME_DRIVINGTRAILERDISABLE);
     desc: string(STR_PARAM_DESC_DRIVINGTRAILERDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//GenericPassDisable
	param {
    param_GenericPassDisable {
     name: string(STR_PARAM_NAME_GENERICPASSDISABLE);
     desc: string(STR_PARAM_DESC_GENERICPASSDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//SuburbanPassDisable
	param {
    param_SuburbanPassDisable {
     name: string(STR_PARAM_NAME_SUBURBANPASSDISABLE);
     desc: string(STR_PARAM_DESC_SUBURBANPASSDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//DDSuburbanPassDisable
	param {
    param_DDSuburbanPassDisable {
     name: string(STR_PARAM_NAME_DDSUBURBANPASSDISABLE);
     desc: string(STR_PARAM_DESC_DDSUBURBANPASSDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//IntercityPassDisable
	param {
    param_IntercityPassDisable {
     name: string(STR_PARAM_NAME_INTERCITYPASSDISABLE);
     desc: string(STR_PARAM_DESC_INTERCITYPASSDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//DDIntercityPassDisable
	param {
    param_DDIntercityPassDisable {
     name: string(STR_PARAM_NAME_DDINTERCITYPASSDISABLE);
     desc: string(STR_PARAM_DESC_DDINTERCITYPASSDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
//ParcelVanDisable
	param {
    param_ParcelVanDisable {
     name: string(STR_PARAM_NAME_PARCELVANDISABLE);
     desc: string(STR_PARAM_DESC_PARCELVANDISABLE);
     type: bool;
     bit: 0;
     def_value: 0;
    }
  }
}


//Carry Capacity Variables
if (param_capacities == 0) {
    param_capacity_mod = 0;
}

if (param_capacities == 1) {
    param_capacity_mod = 2;
}

railtypetable {
    RAIL, SAA3: [ MTRO, SBA3, SCA3, SDA3, "3RDR", "3RDC", MTRO, ELRL], ELRL, IHBA: [SGAA, SGAE, ELRL], TR_UNIVERSAL: [_AAE, RAIL]
}

cargotable {
PASS, COAL, MAIL, OIL_, LVST, EOIL, COKE, VBOD, SULP, SASH, MNO2, BOOM, IRON, QLME, PHOS, VPTS, SLAG, PIPE, CASS, NUTS, METL, GOOD, GRAI, WOOD, IORE, STEL, VALU, PAPR, WHEA, FOOD, GOLD, RUBR, FRUT, MAIZ, CORE, WATR, DIAM, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BEER, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, DYES, ENSP, FERT, FICR, FISH, FMSP, FRVG, GLAS, GRVL, JAVA, LIME, MILK, MNSP, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, TOUR, VEHI, WDPR, WOOL, URAN, YETI, YETY, BEAN, NITR
}

//Basecost Paramater Variables
basecost {
 PR_BUILD_VEHICLE_TRAIN: 1 + param_purchase_cost - 4;
 PR_BUILD_VEHICLE_WAGON: 3 + param_purchase_cost - 4;
 PR_RUNNING_TRAIN_STEAM: 4 + param_running_cost - 4;
 PR_RUNNING_TRAIN_DIESEL: 3 + param_running_cost - 4;
 PR_RUNNING_TRAIN_ELECTRIC: 2 + param_running_cost - 4;
}

// Fix depot view
traininfo_y_offset = 2;
train_width_32_px = 1;

// Purchase Sprite
template template_purchase(x, y) {
    //[left_x, upper_y, width, height, offset_x, offset_y]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
    [x     , y, 88, 15, -60, -11, ANIM]
    [x-2 , y,  1,  1,   0,  0, ANIM]
}


// 4 Template
template template_old_4(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -19]
    [ x+9,      y,        22,        20,        -8,        -15]
    [ x+32,     y,        33,        16,        0,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -12,        -15]
}

template template_old_4_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89,     y,        8,        24,        -3,            -20]
    [ x+98,     y,        22,        20,        -8,        -15]
    [ x+121,    y,        33,        16,        0,        -12]
    [ x+155,    y,        22,        20,        -4,            -11]
    
    [ x,        y,        8,        24,        -3,            -13]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -12,        -15]
}

// 5 Template
template template_old_5(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -19]
    [ x+9,      y,        22,        20,        -10,        -14]
    [ x+32,     y,        33,        16,        -4,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -10,        -14]
}

// 6 Template
template template_old_6(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -17]
    [ x+9,      y,        22,        20,        -12,        -13]
    [ x+32,     y,        33,        16,        -8,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -8,        -13]
}

template template_old_6_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -8,        -13]
    
    [ x,        y,        8,        24,        -3,            -17]
    [ x+9,      y,        22,        20,        -12,        -13]
    [ x+32,     y,        33,        16,        -8,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

//7 Template
template template_old_7(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -15]
    [ x+9,      y,        22,        20,        -14,        -12]
    [ x+32,     y,        33,        16,        -12,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -13]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -6,        -12]
}

//7 Template Reversed
template template_old_7_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89 , y, 8 , 24,  -3, -15]
    [ x+98 , y, 22, 20, -14, -12]
    [ x+121, y, 33, 16, -12, -12]
    [ x+155, y, 22, 20,  -4, -11]

    [ x    , y, 8 , 24,  -3, -13]
    [ x+9  , y, 22, 20, -16, -11]
    [ x+32 , y, 33, 16, -16, -12]
    [ x+66 , y, 22, 20,  -6, -12]
}

// 8 Template
template template_old_8(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        24,        -3,            -12]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        24,        -3,            -12]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]
}

template template_old_8_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up

    [ x+89,     y,        8,        24,        -3,            -12]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]

    [ x,        y,        8,        24,        -3,            -12]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

// 4 Template
template template_4(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -24]
    [ x+9,      y,        22,        20,        -8,        -15]
    [ x+32,     y,        33,        16,        0,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        29,        -3,            -16]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -12,        -15]
}

template template_4_r(x, y) { //WIP
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89,     y,        8,        29,        -3,            -23]
    [ x+98,     y,        22,        20,        -8,        -15]
    [ x+121,    y,        33,        16,        0,        -12]
    [ x+155,    y,        22,        20,        -4,            -11]

    [ x,        y,        8,        29,        -3,            -16]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -12,        -15]
}

// 5 Template
template template_5(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -22]
    [ x+9,      y,        22,        20,        -10,        -14]
    [ x+32,     y,        33,        16,        -4,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        29,        -3,            -16]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -10,        -14]
}

// 6 Template
template template_6(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -20]
    [ x+9,      y,        22,        20,        -12,        -13]
    [ x+32,     y,        33,        16,        -8,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        29,        -3,            -16]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -8,        -13]
}

template template_6_r(x, y) { //WIP
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89,     y,        8,        29,        -3,            -20]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -8,        -13]

    [ x,        y,        8,        29,        -3,            -16]
    [ x+9,      y,        22,        20,        -12,        -13]
    [ x+32,     y,        33,        16,        -8,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

//7 Template
template template_7(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -18]
    [ x+9,      y,        22,        20,        -14,        -12]
    [ x+32,     y,        33,        16,        -12,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        29,        -3,            -15]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -6,        -12]
}

//7 Template Reversed
template template_7_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x+89 , y, 8 , 29,  -3, -18]
    [ x+98 , y, 22, 20, -14, -12]
    [ x+121, y, 33, 16, -12, -12]
    [ x+155, y, 22, 20,  -4, -11]

    [ x    , y, 8 , 29,  -3, -15]
    [ x+9  , y, 22, 20, -16, -11]
    [ x+32 , y, 33, 16, -16, -12]
    [ x+66 , y, 22, 20,  -6, -12]
}

//7 Template Reversed Alt
template template_7_alt_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -15]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -6,            -12]

    [ x+89,     y,        8,        29,        -3,            -16]
    [ x+98,     y,        22,        20,        -14,        -12]
    [ x+121,    y,        33,        16,        -12,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]
}

// 8 Template
template template_8(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up
    [ x,        y,        8,        29,        -3,            -16]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]

    [ x+89,     y,        8,        29,        -3,            -16]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]
}

template template_8_r(x, y) {
    //left_x, upper_y, width, height, offset_x, offset_y
    //                            more negative to shift left
    //                                            more negative to shift up

    [ x+89,     y,        8,        29,        -3,            -16]
    [ x+98,     y,        22,        20,        -16,        -11]
    [ x+121,    y,        33,        16,        -16,        -12]
    [ x+155,    y,        22,        20,        -4,        -11]

    [ x,        y,        8,        29,        -3,            -16]
    [ x+9,      y,        22,        20,        -16,        -11]
    [ x+32,     y,        33,        16,        -16,        -12]
    [ x+66,     y,        22,        20,        -4,            -11]
}

spriteset(spriteset_MU_purchase,   "gfx/MU_Carriage.png") {template_purchase(7, 21)}
spriteset(spriteset_MU_trailer,   "gfx/MU_Carriage.png") {template_old_8(7, 89)}

//Vehicle
item (FEAT_TRAINS, Item_MU_Trailer, 0) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                ALL_CLIMATES;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        TR_UNIVERSAL;
		running_cost_base: RUNNING_COST_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        name:                            string(STR_MU_TRAILER);
        introduction_date:                date(1890,1,1);
        model_life:                        VEHICLE_NEVER_EXPIRES;
        length:                            8;

        weight:                         0 ton;
        speed:                            0 mph;
		power:                            0 hp;
        cost_factor:                     100;
        running_cost_factor:             10;

        refittable_cargo_classes:        bitmask();
        default_cargo_type:                PASS;
        cargo_capacity:                    100;
        loading_speed: 30;

    }
    graphics {
        default:                        spriteset_MU_trailer;
        purchase:                        spriteset_MU_purchase;
        additional_text: string(STR_MU_TRAILER_INFO);

}
}

switch(FEAT_TRAINS, SELF, sw_Kathleen_attach, vehicle_type_id){
	Item_Kathleen_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Kathleen_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Kathleen_Liv1
spriteset(spriteset_Kathleen_Liv1_Purchase,   "gfx/Kathleen_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_Kathleen_Liv1,   "gfx/Kathleen_Liv1.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Kathleen_Liv1, 1000) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_KATHLEEN);
        introduction_date:                date(1921,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         26 ton;
        speed:                            65 km/h;
        power:                            100 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             48;
        loading_speed: 20;
        cargo_capacity:                  65/param_capacity_mod;

        variant_group: Item_Kathleen_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Kathleen_Liv1;
        can_attach_wagon: sw_Kathleen_attach;
        purchase: spriteset_Kathleen_Liv1_Purchase;
        additional_text: string(STR_INFO_KATHLEEN);
		reverse_build_probability: return 50;
}
}

//Kathleen_Liv2
spriteset(spriteset_Kathleen_Liv2_Purchase,   "gfx/Kathleen_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_Kathleen_Liv2,   "gfx/Kathleen_Liv2.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Kathleen_Liv2, 1001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_KATHLEEN);
        introduction_date:                date(1921,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         26 ton;
        speed:                            65 km/h;
        power:                            100 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             48;
        loading_speed: 20;
        cargo_capacity:                  65/param_capacity_mod;

        variant_group: Item_Kathleen_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Kathleen_Liv2;
        can_attach_wagon: sw_Kathleen_attach;
        purchase: spriteset_Kathleen_Liv2_Purchase;
        additional_text: string(STR_INFO_KATHLEEN);
		reverse_build_probability: return 50;
}
}

//CPH Railmotor
//CC1
spriteset(spriteset_SSD_DMU_CPH_Purchase,   "gfx/SSD_DMU_CPH.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_CPH,   "gfx/SSD_DMU_CPH.png") {template_old_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_CPH_r,   "gfx/SSD_DMU_CPH.png") {template_old_7(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_CPH_Headlights,   "gfx/SSD_DMU_CPH_Headlights.png") {template_old_7(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_CPH_Headlights_r,   "gfx/SSD_DMU_CPH_Headlights.png") {template_old_7(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_CPH_Markerlights,   "gfx/SSD_DMU_CPH_Markerlights.png") {template_old_7(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_CPH_Markerlights_r,   "gfx/SSD_DMU_CPH_Markerlights.png") {template_old_7(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_attach, vehicle_type_id){
    Item_SSD_DMU_CPH     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_CPH_TwoTone     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_CPH_Striped     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Headlights_r;
    spriteset_SSD_DMU_CPH_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Markerlights_r;
    spriteset_SSD_DMU_CPH_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_CPH_r;
    spriteset_SSD_DMU_CPH ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_CPH_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_CPH_markerlight_stack;
    return sw_SSD_DMU_CPH_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_lead, position_in_consist) {
    0: sw_SSD_DMU_CPH_headlight_stack;
    return sw_SSD_DMU_CPH_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_CPH_headlight_and_marker_stack;
return sw_SSD_DMU_CPH_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_CPH, 1100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_CPH);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         23 ton;
        speed:                            75 km/h;
        power:                            175 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             55;
        loading_speed: 25;
        cargo_capacity:                  60/param_capacity_mod;

//        variant_group: Item_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_CPH_solo;
        can_attach_wagon: sw_SSD_DMU_CPH_attach;
        purchase: spriteset_SSD_DMU_CPH_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_CPH);
}
}

//CPH Railmotor
//Two Tone
spriteset(spriteset_SSD_DMU_CPH_TwoTone_Purchase,   "gfx/SSD_DMU_CPH_TwoTone.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_CPH_TwoTone,   "gfx/SSD_DMU_CPH_TwoTone.png") {template_old_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_CPH_TwoTone_r,   "gfx/SSD_DMU_CPH_TwoTone.png") {template_old_7(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_TwoTone_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Headlights_r;
    spriteset_SSD_DMU_CPH_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_TwoTone_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Markerlights_r;
    spriteset_SSD_DMU_CPH_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_TwoTone_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_CPH_TwoTone_r;
    spriteset_SSD_DMU_CPH_TwoTone ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_TwoTone_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_TwoTone_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_TwoTone_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_TwoTone_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_TwoTone_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_TwoTone_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_CPH_TwoTone_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_CPH_TwoTone_markerlight_stack;
    return sw_SSD_DMU_CPH_TwoTone_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_lead, position_in_consist) {
    0: sw_SSD_DMU_CPH_TwoTone_headlight_stack;
    return sw_SSD_DMU_CPH_TwoTone_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_TwoTone_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_CPH_TwoTone_headlight_and_marker_stack;
return sw_SSD_DMU_CPH_TwoTone_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_CPH_TwoTone, 1101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_CPH);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         23 ton;
        speed:                            75 km/h;
        power:                            175 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             55;
        loading_speed: 25;
        cargo_capacity:                  60/param_capacity_mod;

        variant_group: Item_SSD_DMU_CPH;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_CPH_TwoTone_solo;
        can_attach_wagon: sw_SSD_DMU_CPH_attach;
        purchase: spriteset_SSD_DMU_CPH_TwoTone_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_CPH);
}
}

//CPH Railmotor
//Striped
spriteset(spriteset_SSD_DMU_CPH_Striped_Purchase,   "gfx/SSD_DMU_CPH_Striped.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_CPH_Striped,   "gfx/SSD_DMU_CPH_Striped.png") {template_old_7(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_CPH_Striped_r,   "gfx/SSD_DMU_CPH_Striped.png") {template_old_7(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_Striped_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Headlights_r;
    spriteset_SSD_DMU_CPH_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_Striped_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_CPH_Markerlights_r;
    spriteset_SSD_DMU_CPH_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_CPH_Striped_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_CPH_Striped_r;
    spriteset_SSD_DMU_CPH_Striped ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_Striped_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_Striped_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_Striped_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_Striped_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_CPH_Striped_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_CPH_Striped_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_CPH_Striped_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_CPH_Striped_markerlight_stack;
    return sw_SSD_DMU_CPH_Striped_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_lead, position_in_consist) {
    0: sw_SSD_DMU_CPH_Striped_headlight_stack;
    return sw_SSD_DMU_CPH_Striped_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_CPH_Striped_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_CPH_Striped_headlight_and_marker_stack;
return sw_SSD_DMU_CPH_Striped_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_CPH_Striped, 1102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_CPH);
        introduction_date:                date(1923,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         23 ton;
        speed:                            75 km/h;
        power:                            175 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     3;
        running_cost_factor:             55;
        loading_speed: 25;
        cargo_capacity:                  60/param_capacity_mod;

        variant_group: Item_SSD_DMU_CPH;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_CPH_Striped_solo;
        can_attach_wagon: sw_SSD_DMU_CPH_attach;
        purchase: spriteset_SSD_DMU_CPH_Striped_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_CPH);
}
}

switch(FEAT_TRAINS, SELF, sw_Edison_attach, vehicle_type_id){
	Item_Edison_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Edison_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Edison_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Edison_Liv1
spriteset(spriteset_Edison_Liv1_Purchase,   "gfx/Edison_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_Edison_Liv1,   "gfx/Edison_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Edison_Liv1, 1150) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EDISON);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            70 km/h;
        power:                            120 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             34;
        cargo_capacity:                  60/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_Edison_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Edison_Liv1;
        can_attach_wagon: sw_Edison_attach;
        purchase: spriteset_Edison_Liv1_Purchase;
        additional_text: string(STR_INFO_EDISON);
		reverse_build_probability: return 50;
}
}

//Edison_Liv2
spriteset(spriteset_Edison_Liv2_Purchase,   "gfx/Edison_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_Edison_Liv2,   "gfx/Edison_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Edison_Liv2, 1151) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EDISON);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            70 km/h;
        power:                            120 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             34;
        cargo_capacity:                  60/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_Edison_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Edison_Liv2;
        can_attach_wagon: sw_Edison_attach;
        purchase: spriteset_Edison_Liv2_Purchase;
        additional_text: string(STR_INFO_EDISON);
		reverse_build_probability: return 50;
}
}

//Edison_Liv3
spriteset(spriteset_Edison_Liv3_Purchase,   "gfx/Edison_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_Edison_Liv3,   "gfx/Edison_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Edison_Liv3, 1152) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EDISON);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         32 ton;
        speed:                            70 km/h;
        power:                            120 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     7;
        running_cost_factor:             34;
        cargo_capacity:                  60/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_Edison_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Edison_Liv3;
        can_attach_wagon: sw_Edison_attach;
        purchase: spriteset_Edison_Liv3_Purchase;
        additional_text: string(STR_INFO_EDISON);
		reverse_build_probability: return 50;
}
}

//PERM Railmotor
//CC1
spriteset(spriteset_SSD_DMU_PERM_Purchase,   "gfx/SSD_DMU_PERM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_PERM,   "gfx/SSD_DMU_PERM.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_PERM_r,   "gfx/SSD_DMU_PERM.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_PERM_Headlights,   "gfx/SSD_DMU_PERM_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_PERM_Headlights_r,   "gfx/SSD_DMU_PERM_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_PERM_Markerlights,   "gfx/SSD_DMU_PERM_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_PERM_Markerlights_r,   "gfx/SSD_DMU_PERM_Markerlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_attach, vehicle_type_id){
    Item_SSD_DMU_PERM     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_PERM_VR     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Headlights_r;
    spriteset_SSD_DMU_PERM_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Markerlights_r;
    spriteset_SSD_DMU_PERM_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_PERM_r;
    spriteset_SSD_DMU_PERM ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_PERM_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_PERM_markerlight_stack;
    return sw_SSD_DMU_PERM_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_lead, position_in_consist) {
    0: sw_SSD_DMU_PERM_headlight_stack;
    return sw_SSD_DMU_PERM_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_PERM_headlight_and_marker_stack;
return sw_SSD_DMU_PERM_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_PERM, 1200) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_PERM);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

//        variant_group: Item_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_PERM_solo;
        can_attach_wagon: sw_SSD_DMU_PERM_attach;
        purchase: spriteset_SSD_DMU_PERM_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_PERM);
}
}

//PERM Railmotor
//VR
spriteset(spriteset_SSD_DMU_PERM_VR_Purchase,   "gfx/SSD_DMU_PERM_VR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_PERM_VR,   "gfx/SSD_DMU_PERM_VR.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_PERM_VR_r,   "gfx/SSD_DMU_PERM_VR.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_VR_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Headlights_r;
    spriteset_SSD_DMU_PERM_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_VR_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_PERM_Markerlights_r;
    spriteset_SSD_DMU_PERM_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_PERM_VR_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_PERM_VR_r;
    spriteset_SSD_DMU_PERM_VR ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_VR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_VR_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_VR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_VR_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_PERM_VR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_PERM_VR_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_PERM_VR_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_PERM_VR_markerlight_stack;
    return sw_SSD_DMU_PERM_VR_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_lead, position_in_consist) {
    0: sw_SSD_DMU_PERM_VR_headlight_stack;
    return sw_SSD_DMU_PERM_VR_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_PERM_VR_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_PERM_VR_headlight_and_marker_stack;
return sw_SSD_DMU_PERM_VR_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_PERM_VR, 1201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_PERM);
        introduction_date:                date(1930,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_PERM;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_PERM_VR_solo;
        can_attach_wagon: sw_SSD_DMU_PERM_attach;
        purchase: spriteset_SSD_DMU_PERM_VR_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_PERM);
}
}

switch(FEAT_TRAINS, SELF, sw_StandardDMU_attach, vehicle_type_id){
	Item_StandardDMU_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_StandardDMU_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//StandardDMU_Liv1
spriteset(spriteset_StandardDMU_Liv1_Purchase,   "gfx/StandardDMU_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_StandardDMU_Liv1,   "gfx/StandardDMU_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_StandardDMU_Liv1, 1250) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_STANDARDDMU);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_StandardDMU_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_StandardDMU_Liv1;
        can_attach_wagon: sw_StandardDMU_attach;
        purchase: spriteset_StandardDMU_Liv1_Purchase;
        additional_text: string(STR_INFO_STANDARDDMU);
		reverse_build_probability: return 50;
}
}

//StandardDMU_Liv2
spriteset(spriteset_StandardDMU_Liv2_Purchase,   "gfx/StandardDMU_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_StandardDMU_Liv2,   "gfx/StandardDMU_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_StandardDMU_Liv2, 1251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_STANDARDDMU);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        30 ton;
        speed:                            100 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             50;
        cargo_capacity:                  76/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_StandardDMU_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_StandardDMU_Liv2;
        can_attach_wagon: sw_StandardDMU_attach;
        purchase: spriteset_StandardDMU_Liv2_Purchase;
        additional_text: string(STR_INFO_STANDARDDMU);
		reverse_build_probability: return 50;
}
}

//Vulcan Railmotor
//CC1
spriteset(spriteset_SSD_DMU_Vulcan_Purchase,   "gfx/SSD_DMU_Vulcan.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Vulcan,   "gfx/SSD_DMU_Vulcan.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Vulcan_r,   "gfx/SSD_DMU_Vulcan.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_Vulcan_Headlights,   "gfx/SSD_DMU_Vulcan_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Vulcan_Headlights_r,   "gfx/SSD_DMU_Vulcan_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Vulcan_Markerlights,   "gfx/SSD_DMU_Vulcan_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Vulcan_Markerlights_r,   "gfx/SSD_DMU_Vulcan_Markerlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_attach, vehicle_type_id){
    Item_SSD_DMU_Vulcan     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_Vulcan_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Headlights_r;
    spriteset_SSD_DMU_Vulcan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Markerlights_r;
    spriteset_SSD_DMU_Vulcan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Vulcan_r;
    spriteset_SSD_DMU_Vulcan ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Vulcan_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Vulcan_markerlight_stack;
    return sw_SSD_DMU_Vulcan_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_lead, position_in_consist) {
    0: sw_SSD_DMU_Vulcan_headlight_stack;
    return sw_SSD_DMU_Vulcan_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Vulcan_headlight_and_marker_stack;
return sw_SSD_DMU_Vulcan_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Vulcan, 1300) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_VULCAN);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             55;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

//        variant_group: Item_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Vulcan_solo;
        can_attach_wagon: sw_SSD_DMU_Vulcan_attach;
        purchase: spriteset_SSD_DMU_Vulcan_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_VULCAN);
}
}

//Vulcan Railmotor
//Stripe
spriteset(spriteset_SSD_DMU_Vulcan_Stripe_Purchase,   "gfx/SSD_DMU_Vulcan_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Vulcan_Stripe,   "gfx/SSD_DMU_Vulcan_Stripe.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Vulcan_Stripe_r,   "gfx/SSD_DMU_Vulcan_Stripe.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_Stripe_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Headlights_r;
    spriteset_SSD_DMU_Vulcan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_Stripe_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Vulcan_Markerlights_r;
    spriteset_SSD_DMU_Vulcan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Vulcan_Stripe_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Vulcan_Stripe_r;
    spriteset_SSD_DMU_Vulcan_Stripe ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_Stripe_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_Stripe_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Vulcan_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Vulcan_Stripe_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Vulcan_Stripe_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Vulcan_Stripe_markerlight_stack;
    return sw_SSD_DMU_Vulcan_Stripe_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_lead, position_in_consist) {
    0: sw_SSD_DMU_Vulcan_Stripe_headlight_stack;
    return sw_SSD_DMU_Vulcan_Stripe_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Vulcan_Stripe_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Vulcan_Stripe_headlight_and_marker_stack;
return sw_SSD_DMU_Vulcan_Stripe_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Vulcan_Stripe, 1301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_VULCAN);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             55;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_Vulcan;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Vulcan_Stripe_solo;
        can_attach_wagon: sw_SSD_DMU_Vulcan_attach;
        purchase: spriteset_SSD_DMU_Vulcan_Stripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_VULCAN);
}
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_attach, vehicle_type_id){
    Item_SSD_DMU_610Class_PinStripe     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_610Class_Buff1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_610Class_Buff2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_610Class_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_610Class_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//600/700 Class
//620/720 Class
//PinStripe
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Purchase,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Lead,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Rear,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Mid,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_PinStripe_Trailer,   "gfx/SSD_DMU_610Class_PinStripe.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_PinStripe_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_PinStripe_Rear;
    spriteset_SSD_DMU_610Class_PinStripe_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_610Class_PinStripe, 1351) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_610Class_PinStripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_PinStripe_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_PinStripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_PinStripe_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
		weight:                        37;
		running_cost_factor: 27;
    }
}

//600/700 Class
//620/720 Class
//Buff1
spriteset(spriteset_SSD_DMU_610Class_Buff1_Purchase,   "gfx/SSD_DMU_610Class_Buff1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_Buff1_Lead,   "gfx/SSD_DMU_610Class_Buff1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_Buff1_Rear,   "gfx/SSD_DMU_610Class_Buff1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_Buff1_Mid,   "gfx/SSD_DMU_610Class_Buff1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_Buff1_Trailer,   "gfx/SSD_DMU_610Class_Buff1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_Buff1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_Buff1_Rear;
    spriteset_SSD_DMU_610Class_Buff1_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_610Class_Buff1, 1352) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_610Class_PinStripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_Buff1_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_Buff1_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_Buff1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
		weight:                        37;
		running_cost_factor: 27;
    }
}

//600/700 Class
//620/720 Class
//Buff2
spriteset(spriteset_SSD_DMU_610Class_Buff2_Purchase,   "gfx/SSD_DMU_610Class_Buff2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_Buff2_Lead,   "gfx/SSD_DMU_610Class_Buff2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_Buff2_Rear,   "gfx/SSD_DMU_610Class_Buff2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_Buff2_Mid,   "gfx/SSD_DMU_610Class_Buff2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_Buff2_Trailer,   "gfx/SSD_DMU_610Class_Buff2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_Buff2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_Buff2_Rear;
    spriteset_SSD_DMU_610Class_Buff2_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_610Class_Buff2, 1353) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_610Class_PinStripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_Buff2_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_Buff2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_Buff2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
		weight:                        37;
		running_cost_factor: 27;
    }
}

//600/700 Class
//620/720 Class
//SRA
spriteset(spriteset_SSD_DMU_610Class_SRA_Purchase,   "gfx/SSD_DMU_610Class_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_SRA_Lead,   "gfx/SSD_DMU_610Class_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_SRA_Rear,   "gfx/SSD_DMU_610Class_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_SRA_Mid,   "gfx/SSD_DMU_610Class_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_SRA_Trailer,   "gfx/SSD_DMU_610Class_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_SRA_Rear;
    spriteset_SSD_DMU_610Class_SRA_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_610Class_SRA, 1354) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_610Class_PinStripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_SRA_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_SRA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
		weight:                        37;
		running_cost_factor: 27;
    }
}

//600/700 Class
//620/720 Class
//CityRail
spriteset(spriteset_SSD_DMU_610Class_CityRail_Purchase,   "gfx/SSD_DMU_610Class_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_610Class_CityRail_Lead,   "gfx/SSD_DMU_610Class_CityRail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_610Class_CityRail_Rear,   "gfx/SSD_DMU_610Class_CityRail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_610Class_CityRail_Mid,   "gfx/SSD_DMU_610Class_CityRail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_610Class_CityRail_Trailer,   "gfx/SSD_DMU_610Class_CityRail.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_610Class_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_610Class_CityRail_Rear;
    spriteset_SSD_DMU_610Class_CityRail_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_610Class_CityRail, 1355) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_610CLASS);
        introduction_date:                date(1949,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            115 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             110;
        cargo_capacity:                  85/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SSD_DMU_610Class_PinStripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_610Class_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_610Class_attach;
        purchase: spriteset_SSD_DMU_610Class_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_610CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_610Class_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (85/param_capacity_mod);
        power:                            125;
		weight:                        37;
		running_cost_factor: 27;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADAX_attach, vehicle_type_id){
    Item_SSD_DMU_ADA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADA_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADA_Yellow     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADA_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADA_Westrail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADG     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADG_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADG_Yellow     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADG_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADG_Westrail     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//WAGR ADA
//CC1
spriteset(spriteset_SSD_DMU_ADA_Purchase,   "gfx/SSD_DMU_ADA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA,   "gfx/SSD_DMU_ADA.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_r,   "gfx/SSD_DMU_ADA.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)
spriteset(spriteset_SSD_DMU_ADAX_Headlights,   "gfx/SSD_DMU_ADAX_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_ADAX_Headlights_r,   "gfx/SSD_DMU_ADAX_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_ADAX_Markerlights,   "gfx/SSD_DMU_ADAX_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_ADAX_Markerlights_r,   "gfx/SSD_DMU_ADAX_Markerlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)



// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_r;
    spriteset_SSD_DMU_ADA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_markerlight_stack;
    return sw_SSD_DMU_ADA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_headlight_stack;
    return sw_SSD_DMU_ADA_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADA, 1400) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

//        variant_group: Item_El_MiamiMetrorail;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Early
spriteset(spriteset_SSD_DMU_ADA_Early_Purchase,   "gfx/SSD_DMU_ADA_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Early,   "gfx/SSD_DMU_ADA_Early.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Early_r,   "gfx/SSD_DMU_ADA_Early.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Early_r;
    spriteset_SSD_DMU_ADA_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Early_markerlight_stack;
    return sw_SSD_DMU_ADA_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Early_headlight_stack;
    return sw_SSD_DMU_ADA_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Early_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Early_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADA_Early, 1401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Early_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Early_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Yellow
spriteset(spriteset_SSD_DMU_ADA_Yellow_Purchase,   "gfx/SSD_DMU_ADA_Yellow.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Yellow,   "gfx/SSD_DMU_ADA_Yellow.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Yellow_r,   "gfx/SSD_DMU_ADA_Yellow.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Yellow_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Yellow_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Yellow_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Yellow_r;
    spriteset_SSD_DMU_ADA_Yellow ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Yellow_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Yellow_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Yellow_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Yellow_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Yellow_markerlight_stack;
    return sw_SSD_DMU_ADA_Yellow_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Yellow_headlight_stack;
    return sw_SSD_DMU_ADA_Yellow_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Yellow_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Yellow_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Yellow_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADA_Yellow, 1402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Yellow_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Yellow_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Stripe
spriteset(spriteset_SSD_DMU_ADA_Stripe_Purchase,   "gfx/SSD_DMU_ADA_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Stripe,   "gfx/SSD_DMU_ADA_Stripe.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Stripe_r,   "gfx/SSD_DMU_ADA_Stripe.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Stripe_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Stripe_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Stripe_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Stripe_r;
    spriteset_SSD_DMU_ADA_Stripe ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Stripe_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Stripe_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Stripe_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Stripe_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Stripe_markerlight_stack;
    return sw_SSD_DMU_ADA_Stripe_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Stripe_headlight_stack;
    return sw_SSD_DMU_ADA_Stripe_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Stripe_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Stripe_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Stripe_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADA_Stripe, 1403) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Stripe_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Stripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADA
//Westrail
spriteset(spriteset_SSD_DMU_ADA_Westrail_Purchase,   "gfx/SSD_DMU_ADA_Westrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADA_Westrail,   "gfx/SSD_DMU_ADA_Westrail.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADA_Westrail_r,   "gfx/SSD_DMU_ADA_Westrail.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Westrail_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Westrail_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADA_Westrail_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADA_Westrail_r;
    spriteset_SSD_DMU_ADA_Westrail ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Westrail_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Westrail_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADA_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADA_Westrail_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADA_Westrail_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADA_Westrail_markerlight_stack;
    return sw_SSD_DMU_ADA_Westrail_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_lead, position_in_consist) {
    0: sw_SSD_DMU_ADA_Westrail_headlight_stack;
    return sw_SSD_DMU_ADA_Westrail_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADA_Westrail_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADA_Westrail_headlight_and_marker_stack;
return sw_SSD_DMU_ADA_Westrail_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADA_Westrail, 1404) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADA);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADA_Westrail_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADA_Westrail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//CC1
spriteset(spriteset_SSD_DMU_ADG_Purchase,   "gfx/SSD_DMU_ADG.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG,   "gfx/SSD_DMU_ADG.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_r,   "gfx/SSD_DMU_ADG.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_r;
    spriteset_SSD_DMU_ADG ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_markerlight_stack;
    return sw_SSD_DMU_ADG_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_headlight_stack;
    return sw_SSD_DMU_ADG_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADG, 1450) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

//        variant_group: Item_SSD_DMU_ADA;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Early
spriteset(spriteset_SSD_DMU_ADG_Early_Purchase,   "gfx/SSD_DMU_ADG_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Early,   "gfx/SSD_DMU_ADG_Early.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Early_r,   "gfx/SSD_DMU_ADG_Early.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Early_r;
    spriteset_SSD_DMU_ADG_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Early_markerlight_stack;
    return sw_SSD_DMU_ADG_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Early_headlight_stack;
    return sw_SSD_DMU_ADG_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Early_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Early_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADG_Early, 1451) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Early_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Early_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Yellow
spriteset(spriteset_SSD_DMU_ADG_Yellow_Purchase,   "gfx/SSD_DMU_ADG_Yellow.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Yellow,   "gfx/SSD_DMU_ADG_Yellow.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Yellow_r,   "gfx/SSD_DMU_ADG_Yellow.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Yellow_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Yellow_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Yellow_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Yellow_r;
    spriteset_SSD_DMU_ADG_Yellow ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Yellow_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Yellow_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Yellow_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Yellow_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Yellow_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Yellow_markerlight_stack;
    return sw_SSD_DMU_ADG_Yellow_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Yellow_headlight_stack;
    return sw_SSD_DMU_ADG_Yellow_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Yellow_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Yellow_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Yellow_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADG_Yellow, 1452) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Yellow_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Yellow_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Stripe
spriteset(spriteset_SSD_DMU_ADG_Stripe_Purchase,   "gfx/SSD_DMU_ADG_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Stripe,   "gfx/SSD_DMU_ADG_Stripe.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Stripe_r,   "gfx/SSD_DMU_ADG_Stripe.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Stripe_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Stripe_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Stripe_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Stripe_r;
    spriteset_SSD_DMU_ADG_Stripe ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Stripe_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Stripe_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Stripe_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Stripe_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Stripe_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Stripe_markerlight_stack;
    return sw_SSD_DMU_ADG_Stripe_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Stripe_headlight_stack;
    return sw_SSD_DMU_ADG_Stripe_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Stripe_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Stripe_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Stripe_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADG_Stripe, 1453) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Stripe_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Stripe_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

//WAGR ADG
//Westrail
spriteset(spriteset_SSD_DMU_ADG_Westrail_Purchase,   "gfx/SSD_DMU_ADG_Westrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADG_Westrail,   "gfx/SSD_DMU_ADG_Westrail.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_ADG_Westrail_r,   "gfx/SSD_DMU_ADG_Westrail.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Westrail_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Headlights_r;
    spriteset_SSD_DMU_ADAX_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Westrail_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_ADAX_Markerlights_r;
    spriteset_SSD_DMU_ADAX_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_ADG_Westrail_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_ADG_Westrail_r;
    spriteset_SSD_DMU_ADG_Westrail ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Westrail_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Westrail_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_ADG_Westrail_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_ADG_Westrail_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_ADG_Westrail_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_ADG_Westrail_markerlight_stack;
    return sw_SSD_DMU_ADG_Westrail_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_lead, position_in_consist) {
    0: sw_SSD_DMU_ADG_Westrail_headlight_stack;
    return sw_SSD_DMU_ADG_Westrail_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADG_Westrail_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_ADG_Westrail_headlight_and_marker_stack;
return sw_SSD_DMU_ADG_Westrail_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADG_Westrail, 1454) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADG);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            100 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             60;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_DMU_ADG;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADG_Westrail_solo;
        can_attach_wagon: sw_SSD_DMU_ADAX_attach;
        purchase: spriteset_SSD_DMU_ADG_Westrail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADAX);
}
}

switch(FEAT_TRAINS, SELF, sw_TullochRailmotor_attach, vehicle_type_id){
	Item_TullochRailmotor_SMR    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochRailmotor_Stripe    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochRailmotor_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochRailmotor_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//TullochRailmotor_SMR
spriteset(spriteset_TullochRailmotor_SMR_Purchase,   "gfx/TullochRailmotor_SMR.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochRailmotor_SMR,   "gfx/TullochRailmotor_SMR.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_TullochRailmotor_SMR, 1501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHRAILMOTOR);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            80 km/h;
        power:                            233 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             52;
        cargo_capacity:                  110/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_TullochRailmotor_SMR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_TullochRailmotor_SMR;
        can_attach_wagon: sw_TullochRailmotor_attach;
        purchase: spriteset_TullochRailmotor_SMR_Purchase;
        additional_text: string(STR_INFO_TULLOCHRAILMOTOR);
}
}

//TullochRailmotor_Stripe
spriteset(spriteset_TullochRailmotor_Stripe_Purchase,   "gfx/TullochRailmotor_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochRailmotor_Stripe,   "gfx/TullochRailmotor_Stripe.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_TullochRailmotor_Stripe, 1502) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHRAILMOTOR);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            80 km/h;
        power:                            233 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             52;
        cargo_capacity:                  110/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_TullochRailmotor_SMR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_TullochRailmotor_Stripe;
        can_attach_wagon: sw_TullochRailmotor_attach;
        purchase: spriteset_TullochRailmotor_Stripe_Purchase;
        additional_text: string(STR_INFO_TULLOCHRAILMOTOR);
}
}

//TullochRailmotor_SRA
spriteset(spriteset_TullochRailmotor_SRA_Purchase,   "gfx/TullochRailmotor_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochRailmotor_SRA,   "gfx/TullochRailmotor_SRA.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_TullochRailmotor_SRA, 1503) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHRAILMOTOR);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            80 km/h;
        power:                            233 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             52;
        cargo_capacity:                  110/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_TullochRailmotor_SMR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_TullochRailmotor_SRA;
        can_attach_wagon: sw_TullochRailmotor_attach;
        purchase: spriteset_TullochRailmotor_SRA_Purchase;
        additional_text: string(STR_INFO_TULLOCHRAILMOTOR);
}
}

//TullochRailmotor_Cityrail
spriteset(spriteset_TullochRailmotor_Cityrail_Purchase,   "gfx/TullochRailmotor_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochRailmotor_Cityrail,   "gfx/TullochRailmotor_Cityrail.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_TullochRailmotor_Cityrail, 1504) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHRAILMOTOR);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            80 km/h;
        power:                            233 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             52;
        cargo_capacity:                  110/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_TullochRailmotor_SMR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_TullochRailmotor_Cityrail;
        can_attach_wagon: sw_TullochRailmotor_attach;
        purchase: spriteset_TullochRailmotor_Cityrail_Purchase;
        additional_text: string(STR_INFO_TULLOCHRAILMOTOR);
}
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_attach, vehicle_type_id){
    Item_SSD_DMU_ADK_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADK_Perth     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_ADK_Auckland     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ADK DMU
//Silver
spriteset(spriteset_SSD_DMU_ADK_Silver_Purchase,   "gfx/SSD_DMU_ADK_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Silver_Lead,   "gfx/SSD_DMU_ADK_Silver.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Silver_Rear,   "gfx/SSD_DMU_ADK_Silver.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Silver_Mid,   "gfx/SSD_DMU_ADK_Silver.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Silver_Trailer,   "gfx/SSD_DMU_ADK_Silver.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Silver_Rear;
    spriteset_SSD_DMU_ADK_Silver_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADK_Silver, 1551) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_ADK_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_Silver_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Silver_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
		weight:                        33;
		running_cost_factor:             30;
    }

}

//ADK DMU
//Perth
spriteset(spriteset_SSD_DMU_ADK_Perth_Purchase,   "gfx/SSD_DMU_ADK_Perth.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Perth_Lead,   "gfx/SSD_DMU_ADK_Perth.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Perth_Rear,   "gfx/SSD_DMU_ADK_Perth.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Perth_Mid,   "gfx/SSD_DMU_ADK_Perth.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Perth_Trailer,   "gfx/SSD_DMU_ADK_Perth.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_Perth_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Perth_Rear;
    spriteset_SSD_DMU_ADK_Perth_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADK_Perth, 1552) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_ADK_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_Perth_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Perth_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Perth_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
		weight:                        33;
		running_cost_factor:             30;
    }
}

//ADK DMU
//Auckland
spriteset(spriteset_SSD_DMU_ADK_Auckland_Purchase,   "gfx/SSD_DMU_ADK_Auckland.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_ADK_Auckland_Lead,   "gfx/SSD_DMU_ADK_Auckland.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_ADK_Auckland_Rear,   "gfx/SSD_DMU_ADK_Auckland.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_ADK_Auckland_Mid,   "gfx/SSD_DMU_ADK_Auckland.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_ADK_Auckland_Trailer,   "gfx/SSD_DMU_ADK_Auckland.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_ADK_Auckland_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_ADK_Auckland_Rear;
    spriteset_SSD_DMU_ADK_Auckland_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_ADK_Auckland, 1553) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_ADK);
        introduction_date:                date(1967,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        33 ton;
        speed:                            90 km/h;
        power:                            400 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             120;
        cargo_capacity:                  105/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_ADK_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_ADK_Auckland_last;
        can_attach_wagon: sw_SSD_DMU_ADK_attach;
        purchase: spriteset_SSD_DMU_ADK_Auckland_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_ADK);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_ADK_Auckland_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (105/param_capacity_mod);
        power:                            200;
		weight:                        33;
		running_cost_factor:             30;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_attach, vehicle_type_id){
    Item_SSD_DMU_1300Class_PTC     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_1300Class_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_DMU_1300Class_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//1300 Class
//PTC
spriteset(spriteset_SSD_DMU_1300Class_PTC_Purchase,   "gfx/SSD_DMU_1300Class_PTC.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_PTC_Lead,   "gfx/SSD_DMU_1300Class_PTC.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_PTC_Rear,   "gfx/SSD_DMU_1300Class_PTC.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_PTC_Mid,   "gfx/SSD_DMU_1300Class_PTC.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_PTC_Trailer,   "gfx/SSD_DMU_1300Class_PTC.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_PTC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_PTC_Rear;
    spriteset_SSD_DMU_1300Class_PTC_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_1300Class_PTC, 1601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_SSD_DMU_1300Class_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_PTC_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_PTC_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_PTC_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
		weight:                        36;
		running_cost_factor:             27;
    }
}

//1300 Class
//SRA
spriteset(spriteset_SSD_DMU_1300Class_SRA_Purchase,   "gfx/SSD_DMU_1300Class_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_SRA_Lead,   "gfx/SSD_DMU_1300Class_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_SRA_Rear,   "gfx/SSD_DMU_1300Class_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_SRA_Mid,   "gfx/SSD_DMU_1300Class_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_SRA_Trailer,   "gfx/SSD_DMU_1300Class_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_SRA_Rear;
    spriteset_SSD_DMU_1300Class_SRA_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_1300Class_SRA, 1602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_SSD_DMU_1300Class_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_SRA_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_SRA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
		weight:                        36;
		running_cost_factor:             27;
    }
}

//1300 Class
//CityRail
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Purchase,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Lead,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Rear,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Mid,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_1300Class_CityRail_Trailer,   "gfx/SSD_DMU_1300Class_CityRail.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_1300Class_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_1300Class_CityRail_Rear;
    spriteset_SSD_DMU_1300Class_CityRail_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_1300Class_CityRail, 1603) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_1300CLASS);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        36 ton;
        speed:                            115 km/h;
        power:                            230 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             104;
        cargo_capacity:                  108;
        loading_speed: 20;

        variant_group: Item_SSD_DMU_1300Class_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_1300Class_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_1300Class_attach;
        purchase: spriteset_SSD_DMU_1300Class_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_1300CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_1300Class_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
		weight:                        36;
		running_cost_factor:             27;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_attach, vehicle_type_id){
    Item_SSD_DMU_2000Class_STA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_2000Class_Metro     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//2000 Class
//STA
spriteset(spriteset_SSD_DMU_2000Class_STA_Purchase,   "gfx/SSD_DMU_2000Class_STA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_2000Class_STA_Lead,   "gfx/SSD_DMU_2000Class_STA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_2000Class_STA_Rear,   "gfx/SSD_DMU_2000Class_STA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_2000Class_STA_Mid,   "gfx/SSD_DMU_2000Class_STA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_2000Class_STA_Trailer,   "gfx/SSD_DMU_2000Class_STA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_STA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_2000Class_STA_Rear;
    spriteset_SSD_DMU_2000Class_STA_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_2000Class_STA, 1651) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_2000CLASS);
        introduction_date:                date(1978,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            260 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             108;
        cargo_capacity:                  108/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_2000Class_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_2000Class_STA_last;
        can_attach_wagon: sw_SSD_DMU_2000Class_attach;
        purchase: spriteset_SSD_DMU_2000Class_STA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_2000CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_2000Class_STA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
		weight:                        50;
		running_cost_factor:             27;
    }
}

//2000 Class
//Metro
spriteset(spriteset_SSD_DMU_2000Class_Metro_Purchase,   "gfx/SSD_DMU_2000Class_Metro.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_2000Class_Metro_Lead,   "gfx/SSD_DMU_2000Class_Metro.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_2000Class_Metro_Rear,   "gfx/SSD_DMU_2000Class_Metro.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_2000Class_Metro_Mid,   "gfx/SSD_DMU_2000Class_Metro.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_2000Class_Metro_Trailer,   "gfx/SSD_DMU_2000Class_Metro.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_2000Class_Metro_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_2000Class_Metro_Rear;
    spriteset_SSD_DMU_2000Class_Metro_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_2000Class_Metro, 1652) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_2000CLASS);
        introduction_date:                date(1978,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            260 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             108/param_capacity_mod;
        cargo_capacity:                  108;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_2000Class_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_2000Class_Metro_last;
        can_attach_wagon: sw_SSD_DMU_2000Class_attach;
        purchase: spriteset_SSD_DMU_2000Class_Metro_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_2000CLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_2000Class_Metro_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (108/param_capacity_mod);
        power:                            520;
		weight:                        50;
		running_cost_factor:             27;
    }
}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_attach, vehicle_type_id){
	Item_Eveleigh_NWCRailmotor_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Eveleigh_NWCRailmotor_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Eveleigh_NWCRailmotor_Cityrail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Eveleigh_NWCRailmotor_Silver
spriteset(spriteset_Eveleigh_NWCRailmotor_Silver_Purchase,   "gfx/Eveleigh_NWCRailmotor_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Eveleigh_NWCRailmotor_Silver_Lead,   "gfx/Eveleigh_NWCRailmotor_Silver.png") {template_old_8(7, 39)}
spriteset(spriteset_Eveleigh_NWCRailmotor_Silver_Rear,   "gfx/Eveleigh_NWCRailmotor_Silver.png") {template_old_8(7, 64)}

spriteset(spriteset_Eveleigh_NWCRailmotor_Silver_DT_Lead,   "gfx/Eveleigh_NWCRailmotor_Silver.png") {template_old_8(187, 39)}
spriteset(spriteset_Eveleigh_NWCRailmotor_Silver_DT_Rear,   "gfx/Eveleigh_NWCRailmotor_Silver.png") {template_old_8(187, 64)}

spriteset(spriteset_Eveleigh_NWCRailmotor_Silver_Trailer,   "gfx/Eveleigh_NWCRailmotor_Silver.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_Silver_forward, vehicle_is_flipped){
    0:    spriteset_Eveleigh_NWCRailmotor_Silver_Lead;
    1: spriteset_Eveleigh_NWCRailmotor_Silver_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_Silver_rev, vehicle_is_flipped){
    0:    spriteset_Eveleigh_NWCRailmotor_Silver_DT_Lead;
    1: spriteset_Eveleigh_NWCRailmotor_Silver_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_Eveleigh_NWCRailmotor_Silver_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_Eveleigh_NWCRailmotor_Silver_forward;
    1:    sw_Eveleigh_NWCRailmotor_Silver_rev;
}

item(FEAT_TRAINS, Item_Eveleigh_NWCRailmotor_Silver, 1681) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EVELEIGH_NWCRAILMOTOR);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  110;
        loading_speed: 20;

        variant_group: Item_Eveleigh_NWCRailmotor_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Eveleigh_NWCRailmotor_Silver_directioncheck;
        can_attach_wagon: sw_Eveleigh_NWCRailmotor_attach;
        purchase: spriteset_Eveleigh_NWCRailmotor_Silver_Purchase;
        additional_text: string(STR_INFO_EVELEIGH_NWCRAILMOTOR);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Eveleigh_NWCRailmotor_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (110/param_capacity_mod);
        power:                            300;
        weight:                        32;
        running_cost_factor:             32;
    }
}

//Eveleigh_NWCRailmotor_SRA
spriteset(spriteset_Eveleigh_NWCRailmotor_SRA_Purchase,   "gfx/Eveleigh_NWCRailmotor_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_Eveleigh_NWCRailmotor_SRA_Lead,   "gfx/Eveleigh_NWCRailmotor_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_Eveleigh_NWCRailmotor_SRA_Rear,   "gfx/Eveleigh_NWCRailmotor_SRA.png") {template_old_8(7, 64)}

spriteset(spriteset_Eveleigh_NWCRailmotor_SRA_DT_Lead,   "gfx/Eveleigh_NWCRailmotor_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_Eveleigh_NWCRailmotor_SRA_DT_Rear,   "gfx/Eveleigh_NWCRailmotor_SRA.png") {template_old_8(187, 64)}

spriteset(spriteset_Eveleigh_NWCRailmotor_SRA_Trailer,   "gfx/Eveleigh_NWCRailmotor_SRA.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_SRA_forward, vehicle_is_flipped){
    0:    spriteset_Eveleigh_NWCRailmotor_SRA_Lead;
    1: spriteset_Eveleigh_NWCRailmotor_SRA_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_SRA_rev, vehicle_is_flipped){
    0:    spriteset_Eveleigh_NWCRailmotor_SRA_DT_Lead;
    1: spriteset_Eveleigh_NWCRailmotor_SRA_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_Eveleigh_NWCRailmotor_SRA_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_Eveleigh_NWCRailmotor_SRA_forward;
    1:    sw_Eveleigh_NWCRailmotor_SRA_rev;
}

item(FEAT_TRAINS, Item_Eveleigh_NWCRailmotor_SRA, 1682) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EVELEIGH_NWCRAILMOTOR);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  110;
        loading_speed: 20;

        variant_group: Item_Eveleigh_NWCRailmotor_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Eveleigh_NWCRailmotor_SRA_directioncheck;
        can_attach_wagon: sw_Eveleigh_NWCRailmotor_attach;
        purchase: spriteset_Eveleigh_NWCRailmotor_SRA_Purchase;
        additional_text: string(STR_INFO_EVELEIGH_NWCRAILMOTOR);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Eveleigh_NWCRailmotor_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (110/param_capacity_mod);
        power:                            300;
        weight:                        32;
        running_cost_factor:             32;
    }
}

//Eveleigh_NWCRailmotor_Cityrail
spriteset(spriteset_Eveleigh_NWCRailmotor_Cityrail_Purchase,   "gfx/Eveleigh_NWCRailmotor_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_Eveleigh_NWCRailmotor_Cityrail_Lead,   "gfx/Eveleigh_NWCRailmotor_Cityrail.png") {template_old_8(7, 39)}
spriteset(spriteset_Eveleigh_NWCRailmotor_Cityrail_Rear,   "gfx/Eveleigh_NWCRailmotor_Cityrail.png") {template_old_8(7, 64)}

spriteset(spriteset_Eveleigh_NWCRailmotor_Cityrail_DT_Lead,   "gfx/Eveleigh_NWCRailmotor_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_Eveleigh_NWCRailmotor_Cityrail_DT_Rear,   "gfx/Eveleigh_NWCRailmotor_Cityrail.png") {template_old_8(187, 64)}

spriteset(spriteset_Eveleigh_NWCRailmotor_Cityrail_Trailer,   "gfx/Eveleigh_NWCRailmotor_Cityrail.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_Cityrail_forward, vehicle_is_flipped){
    0:    spriteset_Eveleigh_NWCRailmotor_Cityrail_Lead;
    1: spriteset_Eveleigh_NWCRailmotor_Cityrail_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_Eveleigh_NWCRailmotor_Cityrail_rev, vehicle_is_flipped){
    0:    spriteset_Eveleigh_NWCRailmotor_Cityrail_DT_Lead;
    1: spriteset_Eveleigh_NWCRailmotor_Cityrail_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_Eveleigh_NWCRailmotor_Cityrail_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_Eveleigh_NWCRailmotor_Cityrail_forward;
    1:    sw_Eveleigh_NWCRailmotor_Cityrail_rev;
}

item(FEAT_TRAINS, Item_Eveleigh_NWCRailmotor_Cityrail, 1683) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EVELEIGH_NWCRAILMOTOR);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        32 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  110;
        loading_speed: 20;

        variant_group: Item_Eveleigh_NWCRailmotor_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Eveleigh_NWCRailmotor_Cityrail_directioncheck;
        can_attach_wagon: sw_Eveleigh_NWCRailmotor_attach;
        purchase: spriteset_Eveleigh_NWCRailmotor_Cityrail_Purchase;
        additional_text: string(STR_INFO_EVELEIGH_NWCRAILMOTOR);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_Eveleigh_NWCRailmotor_Cityrail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (110/param_capacity_mod);
        power:                            300;
        weight:                        32;
        running_cost_factor:             32;
    }
}

switch(FEAT_TRAINS, SELF, sw_ComengRailcar_attach, vehicle_type_id){
    Item_ComengRailcar_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengRailcar_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengRailcar_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengRailcar_SRA_MU     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengRailcar_Countrylink1_MU     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengRailcar_Countrylink2_MU     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengRailcar_Cityrail1_MU     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengRailcar_Cityrail2_MU     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengRailcar_SRA_RM
spriteset(spriteset_ComengRailcar_SRA_Purchase,   "gfx/ComengRailcar_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengRailcar_SRA,   "gfx/ComengRailcar_SRA.png") {template_old_8(7, 39)} // <- Define a wagon

item(FEAT_TRAINS, Item_ComengRailcar_SRA, 1701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ComengRailcar_SRA;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_SRA_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR);
}
}

//ComengRailcar_SRA_DMU
spriteset(spriteset_ComengRailcar_SRA_MU_Purchase,   "gfx/ComengRailcar_SRA.png") {template_purchase(187, 21)}
spriteset(spriteset_ComengRailcar_SRA_MU_Lead,   "gfx/ComengRailcar_SRA.png") {template_old_8(187, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengRailcar_SRA_MU_Rear,   "gfx/ComengRailcar_SRA.png") {template_old_8(187, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengRailcar_SRA_MU_Trailer,   "gfx/ComengRailcar_SRA.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengRailcar_SRA_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengRailcar_SRA_MU_Rear;
    spriteset_ComengRailcar_SRA_MU_Lead;
}

item(FEAT_TRAINS, Item_ComengRailcar_SRA_MU, 1726) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengRailcar_SRA_MU_last;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_SRA_MU_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengRailcar_SRA_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
		weight:                        29;
		running_cost_factor:             32;
    }

}

//ComengRailcar_Countrylink1_RM
spriteset(spriteset_ComengRailcar_Countrylink1_Purchase,   "gfx/ComengRailcar_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengRailcar_Countrylink1,   "gfx/ComengRailcar_Countrylink1.png") {template_old_8(7, 39)} // <- Define a wagon

item(FEAT_TRAINS, Item_ComengRailcar_Countrylink1, 1702) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ComengRailcar_Countrylink1;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Countrylink1_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR);
}
}

//ComengRailcar_Countrylink1_DMU
spriteset(spriteset_ComengRailcar_Countrylink1_MU_Purchase,   "gfx/ComengRailcar_Countrylink1.png") {template_purchase(187, 21)}
spriteset(spriteset_ComengRailcar_Countrylink1_MU_Lead,   "gfx/ComengRailcar_Countrylink1.png") {template_old_8(187, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengRailcar_Countrylink1_MU_Rear,   "gfx/ComengRailcar_Countrylink1.png") {template_old_8(187, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengRailcar_Countrylink1_MU_Trailer,   "gfx/ComengRailcar_Countrylink1.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengRailcar_Countrylink1_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengRailcar_Countrylink1_MU_Rear;
    spriteset_ComengRailcar_Countrylink1_MU_Lead;
}

item(FEAT_TRAINS, Item_ComengRailcar_Countrylink1_MU, 1727) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengRailcar_Countrylink1_MU_last;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Countrylink1_MU_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengRailcar_Countrylink1_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
		weight:                        29;
		running_cost_factor:             32;
    }

}

//ComengRailcar_Countrylink2_RM
spriteset(spriteset_ComengRailcar_Countrylink2_Purchase,   "gfx/ComengRailcar_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengRailcar_Countrylink2,   "gfx/ComengRailcar_Countrylink2.png") {template_old_8(7, 39)} // <- Define a wagon

item(FEAT_TRAINS, Item_ComengRailcar_Countrylink2, 1703) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ComengRailcar_Countrylink2;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Countrylink2_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR);
}
}

//ComengRailcar_Countrylink2_DMU
spriteset(spriteset_ComengRailcar_Countrylink2_MU_Purchase,   "gfx/ComengRailcar_Countrylink2.png") {template_purchase(187, 21)}
spriteset(spriteset_ComengRailcar_Countrylink2_MU_Lead,   "gfx/ComengRailcar_Countrylink2.png") {template_old_8(187, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengRailcar_Countrylink2_MU_Rear,   "gfx/ComengRailcar_Countrylink2.png") {template_old_8(187, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengRailcar_Countrylink2_MU_Trailer,   "gfx/ComengRailcar_Countrylink2.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengRailcar_Countrylink2_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengRailcar_Countrylink2_MU_Rear;
    spriteset_ComengRailcar_Countrylink2_MU_Lead;
}

item(FEAT_TRAINS, Item_ComengRailcar_Countrylink2_MU, 1728) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengRailcar_Countrylink2_MU_last;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Countrylink2_MU_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengRailcar_Countrylink2_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
		weight:                        29;
		running_cost_factor:             32;
    }

}

//ComengRailcar_Cityrail1_RM
spriteset(spriteset_ComengRailcar_Cityrail1_Purchase,   "gfx/ComengRailcar_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengRailcar_Cityrail1,   "gfx/ComengRailcar_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon

item(FEAT_TRAINS, Item_ComengRailcar_Cityrail1, 1704) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ComengRailcar_Cityrail1;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Cityrail1_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR);
}
}

//ComengRailcar_Cityrail1_DMU
spriteset(spriteset_ComengRailcar_Cityrail1_MU_Purchase,   "gfx/ComengRailcar_Cityrail1.png") {template_purchase(187, 21)}
spriteset(spriteset_ComengRailcar_Cityrail1_MU_Lead,   "gfx/ComengRailcar_Cityrail1.png") {template_old_8(187, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengRailcar_Cityrail1_MU_Rear,   "gfx/ComengRailcar_Cityrail1.png") {template_old_8(187, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengRailcar_Cityrail1_MU_Trailer,   "gfx/ComengRailcar_Cityrail1.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengRailcar_Cityrail1_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengRailcar_Cityrail1_MU_Rear;
    spriteset_ComengRailcar_Cityrail1_MU_Lead;
}

item(FEAT_TRAINS, Item_ComengRailcar_Cityrail1_MU, 1729) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengRailcar_Cityrail1_MU_last;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Cityrail1_MU_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengRailcar_Cityrail1_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
		weight:                        29;
		running_cost_factor:             32;
    }

}

//ComengRailcar_Cityrail2_RM
spriteset(spriteset_ComengRailcar_Cityrail2_Purchase,   "gfx/ComengRailcar_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengRailcar_Cityrail2,   "gfx/ComengRailcar_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon

item(FEAT_TRAINS, Item_ComengRailcar_Cityrail2, 1705) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            205 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             64;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ComengRailcar_Cityrail2;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Cityrail2_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR);
}
}

//ComengRailcar_Cityrail2_DMU
spriteset(spriteset_ComengRailcar_Cityrail2_MU_Purchase,   "gfx/ComengRailcar_Cityrail2.png") {template_purchase(187, 21)}
spriteset(spriteset_ComengRailcar_Cityrail2_MU_Lead,   "gfx/ComengRailcar_Cityrail2.png") {template_old_8(187, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengRailcar_Cityrail2_MU_Rear,   "gfx/ComengRailcar_Cityrail2.png") {template_old_8(187, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengRailcar_Cityrail2_MU_Trailer,   "gfx/ComengRailcar_Cityrail2.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengRailcar_Cityrail2_MU_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengRailcar_Cityrail2_MU_Rear;
    spriteset_ComengRailcar_Cityrail2_MU_Lead;
}

item(FEAT_TRAINS, Item_ComengRailcar_Cityrail2_MU, 1730) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGRAILCAR_MU);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            130 km/h;
        power:                            410 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             128;
        cargo_capacity:                  100/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_ComengRailcar_SRA_MU;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengRailcar_Cityrail2_MU_last;
        can_attach_wagon: sw_ComengRailcar_attach;
        purchase: spriteset_ComengRailcar_Cityrail2_MU_Purchase;
        additional_text: string(STR_INFO_COMENGRAILCAR_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengRailcar_Cityrail2_MU_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (100/param_capacity_mod);
        power:                            205;
		weight:                        29;
		running_cost_factor:             32;
    }

}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_attach, vehicle_type_id){
    Item_SSD_DMU_3000Class_STA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_3000Class_Metro1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_3000Class_Metro2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_3000Class_MU_STA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_3000Class_MU_Metro1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_3000Class_MU_Metro2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

spriteset(spriteset_SSD_DMU_3000Class_Headlights,   "gfx/SSD_DMU_3000Class_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_3000Class_Headlights_r,   "gfx/SSD_DMU_3000Class_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_3000Class_Markerlights,   "gfx/SSD_DMU_3000Class_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_3000Class_Markerlights_r,   "gfx/SSD_DMU_3000Class_Markerlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

//3000 Class Railmotor
//STA
spriteset(spriteset_SSD_DMU_3000Class_STA_Purchase,   "gfx/SSD_DMU_3000Class_STA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_STA,   "gfx/SSD_DMU_3000Class_STA.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_STA_r,   "gfx/SSD_DMU_3000Class_STA.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_STA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_STA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_STA_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_STA_r;
    spriteset_SSD_DMU_3000Class_STA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_STA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_STA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_STA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_STA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_STA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_STA_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_STA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_STA_markerlight_stack;
    return sw_SSD_DMU_3000Class_STA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_STA_headlight_stack;
    return sw_SSD_DMU_3000Class_STA_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_STA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_STA_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_STA_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_3000Class_STA, 1751) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             65;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_3000Class_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_STA_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_STA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class Railmotor
//Metro1
spriteset(spriteset_SSD_DMU_3000Class_Metro1_Purchase,   "gfx/SSD_DMU_3000Class_Metro1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_Metro1,   "gfx/SSD_DMU_3000Class_Metro1.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_Metro1_r,   "gfx/SSD_DMU_3000Class_Metro1.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro1_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro1_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro1_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_Metro1_r;
    spriteset_SSD_DMU_3000Class_Metro1 ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro1_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro1_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro1_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro1_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro1_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro1_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_Metro1_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_Metro1_markerlight_stack;
    return sw_SSD_DMU_3000Class_Metro1_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_Metro1_headlight_stack;
    return sw_SSD_DMU_3000Class_Metro1_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro1_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_Metro1_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_Metro1_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_3000Class_Metro1, 1752) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             65;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_3000Class_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_Metro1_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_Metro1_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class Railmotor
//Metro2
spriteset(spriteset_SSD_DMU_3000Class_Metro2_Purchase,   "gfx/SSD_DMU_3000Class_Metro2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_Metro2,   "gfx/SSD_DMU_3000Class_Metro2.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_3000Class_Metro2_r,   "gfx/SSD_DMU_3000Class_Metro2.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro2_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Headlights_r;
    spriteset_SSD_DMU_3000Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro2_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_3000Class_Markerlights_r;
    spriteset_SSD_DMU_3000Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_3000Class_Metro2_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_3000Class_Metro2_r;
    spriteset_SSD_DMU_3000Class_Metro2 ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro2_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro2_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro2_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro2_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_3000Class_Metro2_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_3000Class_Metro2_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_3000Class_Metro2_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_3000Class_Metro2_markerlight_stack;
    return sw_SSD_DMU_3000Class_Metro2_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_lead, position_in_consist) {
    0: sw_SSD_DMU_3000Class_Metro2_headlight_stack;
    return sw_SSD_DMU_3000Class_Metro2_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_Metro2_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_3000Class_Metro2_headlight_and_marker_stack;
return sw_SSD_DMU_3000Class_Metro2_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_3000Class_Metro2, 1753) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            340 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             65;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_3000Class_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_Metro2_solo;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_Metro2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS);
}
}

//3000 Class DMU
//STA
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Purchase,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Lead,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Rear,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Mid,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_STA_Trailer,   "gfx/SSD_DMU_3000Class_MU_STA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_STA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_STA_Rear;
    spriteset_SSD_DMU_3000Class_MU_STA_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_3000Class_MU_STA, 1776) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_3000Class_MU_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_STA_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_STA_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_STA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
		weight:                        48;
		running_cost_factor:             32;
    }
}

//3000 Class DMU
//Metro1
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Purchase,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Lead,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Rear,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Mid,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro1_Trailer,   "gfx/SSD_DMU_3000Class_MU_Metro1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_Metro1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_Metro1_Rear;
    spriteset_SSD_DMU_3000Class_MU_Metro1_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_3000Class_MU_Metro1, 1777) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_3000Class_MU_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_Metro1_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_Metro1_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_Metro1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
		weight:                        48;
		running_cost_factor:             32;
    }
}

//3000 Class DMU
//Metro2
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Purchase,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Lead,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Rear,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Mid,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_3000Class_MU_Metro2_Trailer,   "gfx/SSD_DMU_3000Class_MU_Metro2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_3000Class_MU_Metro2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_3000Class_MU_Metro2_Rear;
    spriteset_SSD_DMU_3000Class_MU_Metro2_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_3000Class_MU_Metro2, 1778) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_3000CLASS_MU);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            90 km/h;
        power:                            680 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_3000Class_MU_STA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_3000Class_MU_Metro2_last;
        can_attach_wagon: sw_SSD_DMU_3000Class_attach;
        purchase: spriteset_SSD_DMU_3000Class_MU_Metro2_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_3000CLASS_MU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_3000Class_MU_Metro2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            340;
		weight:                        48;
		running_cost_factor:             32;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_attach, vehicle_type_id){
    Item_SSD_DMU_Sprinter_Met     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_Sprinter_VlineEarly     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_Sprinter_VlineLate     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_Sprinter_PTV     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

spriteset(spriteset_SSD_DMU_Sprinter_Headlights,   "gfx/SSD_DMU_Sprinter_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Sprinter_Headlights_r,   "gfx/SSD_DMU_Sprinter_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_SSD_DMU_Sprinter_Markerlights,   "gfx/SSD_DMU_Sprinter_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_SSD_DMU_Sprinter_Markerlights_r,   "gfx/SSD_DMU_Sprinter_Markerlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

//Sprinter Railmotor
//Met
spriteset(spriteset_SSD_DMU_Sprinter_Met_Purchase,   "gfx/SSD_DMU_Sprinter_Met.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_Met,   "gfx/SSD_DMU_Sprinter_Met.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_Met_r,   "gfx/SSD_DMU_Sprinter_Met.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_Met_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_Met_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_Met_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_Met_r;
    spriteset_SSD_DMU_Sprinter_Met ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_Met_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_Met_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_Met_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_Met_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_Met_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_Met_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_Met_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_Met_markerlight_stack;
    return sw_SSD_DMU_Sprinter_Met_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_Met_headlight_stack;
    return sw_SSD_DMU_Sprinter_Met_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_Met_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_Met_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_Met_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Sprinter_Met, 1801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             75;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Sprinter_Met;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_Met_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_Met_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//VlineEarly
spriteset(spriteset_SSD_DMU_Sprinter_VlineEarly_Purchase,   "gfx/SSD_DMU_Sprinter_VlineEarly.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_VlineEarly,   "gfx/SSD_DMU_Sprinter_VlineEarly.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_VlineEarly_r,   "gfx/SSD_DMU_Sprinter_VlineEarly.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineEarly_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineEarly_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineEarly_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_VlineEarly_r;
    spriteset_SSD_DMU_Sprinter_VlineEarly ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineEarly_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineEarly_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineEarly_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_VlineEarly_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_VlineEarly_markerlight_stack;
    return sw_SSD_DMU_Sprinter_VlineEarly_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_VlineEarly_headlight_stack;
    return sw_SSD_DMU_Sprinter_VlineEarly_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineEarly_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_VlineEarly_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_VlineEarly_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Sprinter_VlineEarly, 1802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             75;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Sprinter_Met;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_VlineEarly_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_VlineEarly_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//VlineLate
spriteset(spriteset_SSD_DMU_Sprinter_VlineLate_Purchase,   "gfx/SSD_DMU_Sprinter_VlineLate.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_VlineLate,   "gfx/SSD_DMU_Sprinter_VlineLate.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_VlineLate_r,   "gfx/SSD_DMU_Sprinter_VlineLate.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineLate_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineLate_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_VlineLate_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_VlineLate_r;
    spriteset_SSD_DMU_Sprinter_VlineLate ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineLate_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineLate_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineLate_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineLate_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_VlineLate_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_VlineLate_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_VlineLate_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_VlineLate_markerlight_stack;
    return sw_SSD_DMU_Sprinter_VlineLate_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_VlineLate_headlight_stack;
    return sw_SSD_DMU_Sprinter_VlineLate_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_VlineLate_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_VlineLate_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_VlineLate_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Sprinter_VlineLate, 1803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             75;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Sprinter_Met;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_VlineLate_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_VlineLate_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}

//Sprinter Railmotor
//PTV
spriteset(spriteset_SSD_DMU_Sprinter_PTV_Purchase,   "gfx/SSD_DMU_Sprinter_PTV.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Sprinter_PTV,   "gfx/SSD_DMU_Sprinter_PTV.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_SSD_DMU_Sprinter_PTV_r,   "gfx/SSD_DMU_Sprinter_PTV.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_PTV_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Headlights_r;
    spriteset_SSD_DMU_Sprinter_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_PTV_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_SSD_DMU_Sprinter_Markerlights_r;
    spriteset_SSD_DMU_Sprinter_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_SSD_DMU_Sprinter_PTV_flipcheck, vehicle_is_reversed){
    1: spriteset_SSD_DMU_Sprinter_PTV_r;
    spriteset_SSD_DMU_Sprinter_PTV ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_PTV_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_PTV_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_PTV_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_PTV_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_SSD_DMU_Sprinter_PTV_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_SSD_DMU_Sprinter_PTV_headlight_flipcheck;    // Return the headlight overlay
    return sw_SSD_DMU_Sprinter_PTV_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_rear, position_in_consist_from_end){
    0 : return sw_SSD_DMU_Sprinter_PTV_markerlight_stack;
    return sw_SSD_DMU_Sprinter_PTV_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_lead, position_in_consist) {
    0: sw_SSD_DMU_Sprinter_PTV_headlight_stack;
    return sw_SSD_DMU_Sprinter_PTV_rear;
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Sprinter_PTV_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_SSD_DMU_Sprinter_PTV_headlight_and_marker_stack;
return sw_SSD_DMU_Sprinter_PTV_lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Sprinter_PTV, 1804) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_SPRINTER);
        introduction_date:                date(1993,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            630 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             75;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Sprinter_Met;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Sprinter_PTV_solo;
        can_attach_wagon: sw_SSD_DMU_Sprinter_attach;
        purchase: spriteset_SSD_DMU_Sprinter_PTV_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_SPRINTER);
}
}


switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_attach, vehicle_type_id){
    Item_SSD_DMU_Hunter_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_Hunter_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Hunter Railcar
//CityRail
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Purchase,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Lead,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Rear,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Mid,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter_CityRail_Trailer,   "gfx/SSD_DMU_Hunter_CityRail.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter_CityRail_Rear;
    spriteset_SSD_DMU_Hunter_CityRail_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Hunter_CityRail, 1901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTER);
        introduction_date:                date(2006,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        61 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             140;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Hunter_CityRail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_Hunter_attach;
        purchase: spriteset_SSD_DMU_Hunter_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
		weight:                        61;
		running_cost_factor:             33;
    }
}

//Hunter Railcar
//Trainlink
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Purchase,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Lead,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Rear,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Mid,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter_Trainlink_Trailer,   "gfx/SSD_DMU_Hunter_Trainlink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter_Trainlink_Rear;
    spriteset_SSD_DMU_Hunter_Trainlink_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Hunter_Trainlink, 1902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTER);
        introduction_date:                date(2006,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        61 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             140;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Hunter_CityRail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_Hunter_attach;
        purchase: spriteset_SSD_DMU_Hunter_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
		weight:                        61;
		running_cost_factor:             33;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter2_attach, vehicle_type_id){
    Item_SSD_DMU_Hunter2_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_DMU_Hunter2_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Hunter Mk2 Railcar
//CityRail
spriteset(spriteset_SSD_DMU_Hunter2_CityRail_Purchase,   "gfx/SSD_DMU_Hunter2_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter2_CityRail_Lead,   "gfx/SSD_DMU_Hunter2_CityRail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter2_CityRail_Rear,   "gfx/SSD_DMU_Hunter2_CityRail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter2_CityRail_Mid,   "gfx/SSD_DMU_Hunter2_CityRail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter2_CityRail_Trailer,   "gfx/SSD_DMU_Hunter2_CityRail.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter2_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter2_CityRail_Rear;
    spriteset_SSD_DMU_Hunter2_CityRail_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Hunter2_CityRail, 2001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTERMK2);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        59 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             145;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Hunter2_CityRail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter2_CityRail_last;
        can_attach_wagon: sw_SSD_DMU_Hunter2_attach;
        purchase: spriteset_SSD_DMU_Hunter2_CityRail_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTERMK2);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter2_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
		weight:                        59;
		running_cost_factor:             37;
    }
}

//Hunter Mk2 Railcar
//Trainlink
spriteset(spriteset_SSD_DMU_Hunter2_Trainlink_Purchase,   "gfx/SSD_DMU_Hunter2_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_Hunter2_Trainlink_Lead,   "gfx/SSD_DMU_Hunter2_Trainlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_Hunter2_Trainlink_Rear,   "gfx/SSD_DMU_Hunter2_Trainlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_Hunter2_Trainlink_Mid,   "gfx/SSD_DMU_Hunter2_Trainlink.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_Hunter2_Trainlink_Trailer,   "gfx/SSD_DMU_Hunter2_Trainlink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_Hunter2_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_Hunter2_Trainlink_Rear;
    spriteset_SSD_DMU_Hunter2_Trainlink_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_Hunter2_Trainlink, 2002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_HUNTERMK2);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        59 ton;
        speed:                            145 km/h;
        power:                            750 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             145;
        cargo_capacity:                  130/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_DMU_Hunter2_CityRail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_Hunter2_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_Hunter2_attach;
        purchase: spriteset_SSD_DMU_Hunter2_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_HUNTERMK2);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_Hunter2_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (130/param_capacity_mod);
        power:                            375;
		weight:                        59;
		running_cost_factor:             37;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_NRFSI_attach, vehicle_type_id){
    Item_SSD_DMU_NRFSI_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//New Regional Fleet Short Intercity
//Trainlink
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Purchase,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Lead,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Rear,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Mid,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_DMU_NRFSI_Trainlink_Trailer,   "gfx/SSD_DMU_NRFSI_Trainlink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_SSD_DMU_NRFSI_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SSD_DMU_NRFSI_Trainlink_Rear;
    spriteset_SSD_DMU_NRFSI_Trainlink_Lead;
}

item(FEAT_TRAINS, Item_SSD_DMU_NRFSI_Trainlink, 2101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_SSD_DMU_NRFSI);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            160 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             150;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_SSD_DMU_NRFSI_Trainlink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_DMU_NRFSI_Trainlink_last;
        can_attach_wagon: sw_SSD_DMU_NRFSI_attach;
        purchase: spriteset_SSD_DMU_NRFSI_Trainlink_Purchase;
        additional_text: string(STR_INFO_SSD_DMU_NRFSI);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SSD_DMU_NRFSI_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (120/param_capacity_mod);
        power:                            400;
		weight:                        55;
		running_cost_factor:             38;
    }
}

///////////////////
//Intercity NEMUs//
///////////////////

spriteset(spriteset_ICSD_DMU_CometPowerVan_Headlights,   "gfx/ICSD_DMU_Comet_PowerVan_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_CometPowerVan_Headlights_r,   "gfx/ICSD_DMU_Comet_PowerVan_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_ICSD_DMU_CometPowerVan_Markerlights,   "gfx/ICSD_DMU_Comet_PowerVan_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_CometPowerVan_Markerlights_r,   "gfx/ICSD_DMU_Comet_PowerVan_Markerlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

//Silver City Comet
//SilverCity
spriteset(spriteset_ICSD_DMU_CometPowerVan_SilverCity_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan_SilverCity,   "gfx/ICSD_DMU_Comet_PowerVan_SilverCity.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_SilverCity_r,   "gfx/ICSD_DMU_Comet_PowerVan_SilverCity.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_SilverCity_r;
    spriteset_ICSD_DMU_CometPowerVan_SilverCity ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_SilverCity_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SilverCity_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SilverCity_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SilverCity_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_SilverCity_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_SilverCity_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_CometPowerVan_SilverCity, 3001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

        variant_group: Item_ICSD_DMU_CometPowerVan_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_SilverCity_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_SilverCity_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet
//Tuscan
spriteset(spriteset_ICSD_DMU_CometPowerVan_Tuscan_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan_Tuscan,   "gfx/ICSD_DMU_Comet_PowerVan_Tuscan.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_Tuscan_r,   "gfx/ICSD_DMU_Comet_PowerVan_Tuscan.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_Tuscan_r;
    spriteset_ICSD_DMU_CometPowerVan_Tuscan ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_Tuscan_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_Tuscan_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_Tuscan_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_Tuscan_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_Tuscan_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_Tuscan_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_CometPowerVan_Tuscan, 3002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

        variant_group: Item_ICSD_DMU_CometPowerVan_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_Tuscan_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_Tuscan_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet
//SRA
spriteset(spriteset_ICSD_DMU_CometPowerVan_SRA_Purchase,   "gfx/ICSD_DMU_Comet_PowerVan_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPowerVan_SRA,   "gfx/ICSD_DMU_Comet_PowerVan_SRA.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_CometPowerVan_SRA_r,   "gfx/ICSD_DMU_Comet_PowerVan_SRA.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SRA_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Headlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SRA_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_CometPowerVan_Markerlights_r;
    spriteset_ICSD_DMU_CometPowerVan_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_CometPowerVan_SRA_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_CometPowerVan_SRA_r;
    spriteset_ICSD_DMU_CometPowerVan_SRA ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SRA_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SRA_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_CometPowerVan_SRA_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_CometPowerVan_SRA_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_CometPowerVan_SRA_markerlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SRA_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_lead, position_in_consist) {
    0: sw_ICSD_DMU_CometPowerVan_SRA_headlight_stack;
    return sw_ICSD_DMU_CometPowerVan_SRA_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPowerVan_SRA_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_CometPowerVan_SRA_headlight_and_marker_stack;
return sw_ICSD_DMU_CometPowerVan_SRA_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_CometPowerVan_SRA, 3003) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_COMETPOWERVAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                         59 ton;
        speed:                            130 km/h;
        power:                            660 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     4;
        running_cost_factor:             35;

        variant_group: Item_ICSD_DMU_CometPowerVan_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_CometPowerVan_SRA_solo;
        purchase: spriteset_ICSD_DMU_CometPowerVan_SRA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_COMETPOWERVAN);
}
}

//Silver City Comet Passenger Car
//SilverCity
spriteset(spriteset_ICSD_DMU_CometPassCar_SilverCity_Purchase,   "gfx/ICSD_DMU_Comet_PassCar_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SilverCity,   "gfx/ICSD_DMU_Comet_PassCar_SilverCity.png") {template_old_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SilverCity_Guard,   "gfx/ICSD_DMU_Comet_PassCar_SilverCity.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_SilverCity_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_SilverCity_Guard;
    return spriteset_ICSD_DMU_CometPassCar_SilverCity;
}

item (FEAT_TRAINS, Item_ICSD_ComentPassCar_SilverCity) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    118;
        running_cost_factor:            3;

        variant_group: Item_ICSD_ComentPassCar_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_SilverCity_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_SilverCity_Purchase;
}
}

//Silver City Comet Passenger Car
//Tuscan
spriteset(spriteset_ICSD_DMU_CometPassCar_Tuscan_Purchase,   "gfx/ICSD_DMU_Comet_PassCar_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar_Tuscan,   "gfx/ICSD_DMU_Comet_PassCar_Tuscan.png") {template_old_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_Tuscan_Guard,   "gfx/ICSD_DMU_Comet_PassCar_Tuscan.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_Tuscan_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_Tuscan_Guard;
    return spriteset_ICSD_DMU_CometPassCar_Tuscan;
}

item (FEAT_TRAINS, Item_ICSD_ComentPassCar_Tuscan) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    118;
        running_cost_factor:            3;

        variant_group: Item_ICSD_ComentPassCar_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_Tuscan_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_Tuscan_Purchase;
}
}

//Silver City Comet Passenger Car
//SRA
spriteset(spriteset_ICSD_DMU_CometPassCar_SRA_Purchase,   "gfx/ICSD_DMU_Comet_PassCar_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SRA,   "gfx/ICSD_DMU_Comet_PassCar_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_ICSD_DMU_CometPassCar_SRA_Guard,   "gfx/ICSD_DMU_Comet_PassCar_SRA.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_CometPassCar_SRA_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_CometPassCar_SRA_Guard;
    return spriteset_ICSD_DMU_CometPassCar_SRA;
}

item (FEAT_TRAINS, Item_ICSD_ComentPassCar_SRA) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    118;
        running_cost_factor:            3;

        variant_group: Item_ICSD_ComentPassCar_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        loading_speed:                    10;

        name:                             string(STR_NAME_ICSD_DMU_COMETPASSCAR);
        introduction_date:                date(1937, 1, 1);

        speed:                            130 km/h;
        weight:                            22 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_CometPassCar_SRA_guardcheck;
    purchase:                            spriteset_ICSD_DMU_CometPassCar_SRA_Purchase;
}
}

//Meteor Power Van
//SilverCity
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Purchase,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Lead,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Rear,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_old_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Mid,   "gfx/ICSD_DMU_Meteor_PowerVan_SilverCity.png") {template_old_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_SilverCity_articulated_part, extra_callback_info1) {
    1: return Item_ICSD_DMU_MeteorPowerVan_SilverCity_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, Item_ICSD_DMU_MeteorPowerVan_SilverCity, 3102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

        variant_group: Item_ICSD_DMU_MeteorPowerVan_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_SilverCity_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, Item_ICSD_DMU_MeteorPowerVan_SilverCity_rear, 3103) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SilverCity_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Power Van
//Tuscan
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Purchase,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Lead,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Rear,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_old_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Mid,   "gfx/ICSD_DMU_Meteor_PowerVan_Tuscan.png") {template_old_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_Tuscan_articulated_part, extra_callback_info1) {
    1: return Item_ICSD_DMU_MeteorPowerVan_Tuscan_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, Item_ICSD_DMU_MeteorPowerVan_Tuscan, 3104) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

        variant_group: Item_ICSD_DMU_MeteorPowerVan_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_Tuscan_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, Item_ICSD_DMU_MeteorPowerVan_Tuscan_rear, 3105) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_Tuscan_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Power Van
//SRA
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Purchase,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Lead,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_old_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Rear,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_old_7(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_MeteorPowerVan_SRA_Mid,   "gfx/ICSD_DMU_Meteor_PowerVan_SRA.png") {template_old_7(7, 89)}

// Articulated part callback
switch(FEAT_TRAINS, SELF, switch_ICSD_DMU_MeteorPowerVan_SRA_articulated_part, extra_callback_info1) {
    1: return Item_ICSD_DMU_MeteorPowerVan_SRA_rear;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}

item(FEAT_TRAINS, Item_ICSD_DMU_MeteorPowerVan_SRA, 3106) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                         80 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             45;

        variant_group: Item_ICSD_DMU_MeteorPowerVan_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SRA_Lead;
        purchase: spriteset_ICSD_DMU_MeteorPowerVan_SRA_Purchase;
        articulated_part: switch_ICSD_DMU_MeteorPowerVan_SRA_articulated_part;
        additional_text: string(STR_INFO_ICSD_DMU_METEORPOWERVAN);
}
}

item(FEAT_TRAINS, Item_ICSD_DMU_MeteorPowerVan_SRA_rear, 3107) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available:                NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_METEORPOWERVAN);
        introduction_date:                date(1942,1,1);
        length:                            7;

    }
    graphics {
        default: spriteset_ICSD_DMU_MeteorPowerVan_SRA_Rear;
        cargo_capacity: return 0;
        power: return 0;
}
}

//Meteor Passenger Car
//SilverCity
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar_SilverCity.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SilverCity,   "gfx/ICSD_DMU_Meteor_PassCar_SilverCity.png") {template_old_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Guard,   "gfx/ICSD_DMU_Meteor_PassCar_SilverCity.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_SilverCity_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar_SilverCity;
}

item (FEAT_TRAINS, Item_ICSD_MeteorPassCar_SilverCity) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    118;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_ICSD_MeteorPassCar_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_SilverCity_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_SilverCity_Purchase;
}
}

//Meteor Passenger Car
//Tuscan
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar_Tuscan.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Tuscan,   "gfx/ICSD_DMU_Meteor_PassCar_Tuscan.png") {template_old_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Guard,   "gfx/ICSD_DMU_Meteor_PassCar_Tuscan.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_Tuscan_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar_Tuscan;
}

item (FEAT_TRAINS, Item_ICSD_MeteorPassCar_Tuscan) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    118;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_ICSD_MeteorPassCar_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_Tuscan_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_Tuscan_Purchase;
}
}

//Meteor Passenger Car
//SRA
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SRA_Purchase,   "gfx/ICSD_DMU_Meteor_PassCar_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SRA,   "gfx/ICSD_DMU_Meteor_PassCar_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_ICSD_DMU_MeteorPassCar_SRA_Guard,   "gfx/ICSD_DMU_Meteor_PassCar_SRA.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_MeteorPassCar_SRA_guardcheck, position_in_consist_from_end){
    0 : spriteset_ICSD_DMU_MeteorPassCar_SRA_Guard;
    return spriteset_ICSD_DMU_MeteorPassCar_SRA;
}

item (FEAT_TRAINS, Item_ICSD_MeteorPassCar_SRA) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        running_cost_base:                RUNNING_COST_NONE;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    118;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_ICSD_MeteorPassCar_SilverCity;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ICSD_DMU_METEORPASSCAR);
        introduction_date:                date(1942, 1, 1);

        speed:                            130 km/h;
        weight:                            25 ton;
        cargo_capacity:                    59/param_capacity_mod;
    }
    graphics {
    default:                             sw_ICSD_DMU_MeteorPassCar_SRA_guardcheck;
    purchase:                            spriteset_ICSD_DMU_MeteorPassCar_SRA_Purchase;
}
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SpeedLiner_attach, vehicle_type_id){
    Item_ICSD_DMU_SpeedLiner_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Speedliner
//Silver
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Purchase,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Lead,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Rear,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Mid,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_SpeedLiner_Silver_Trailer,   "gfx/ICSD_DMU_SpeedLiner_Silver.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_SpeedLiner_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_SpeedLiner_Silver_Rear;
    spriteset_ICSD_DMU_SpeedLiner_Silver_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_SpeedLiner_Silver, 3151) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SPEEDLINER);
        introduction_date:                date(1944,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        29 ton;
        speed:                            145 km/h;
        power:                            300 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             110;
        cargo_capacity:                  45/param_capacity_mod;
        loading_speed: 5;

        variant_group: Item_ICSD_DMU_SpeedLiner_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_SpeedLiner_Silver_last;
        can_attach_wagon: sw_ICSD_DMU_SpeedLiner_attach;
        purchase: spriteset_ICSD_DMU_SpeedLiner_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SPEEDLINER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_SpeedLiner_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (45/param_capacity_mod);
        power:                            150;
		weight:                        29;
		running_cost_factor:             28;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_attach, vehicle_type_id){
    Item_ICSD_DMU_DEBset_Pinstripe     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_DEBset_Buff1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_DEBset_Buff2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_DEBset_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//DEB Set
//Pinstripe
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Purchase,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Lead,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Rear,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Mid,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Pinstripe_Trailer,   "gfx/ICSD_DMU_DEBset_Pinstripe.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_Pinstripe_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Pinstripe_Rear;
    spriteset_ICSD_DMU_DEBset_Pinstripe_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_DEBset_Pinstripe, 3201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: Item_ICSD_DMU_DEBset_Pinstripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_Pinstripe_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Pinstripe_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Pinstripe_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
		weight:                        38;
		running_cost_factor:             29;
    }
}

//DEB Set
//Buff1
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Purchase,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Lead,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Rear,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Mid,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff1_Trailer,   "gfx/ICSD_DMU_DEBset_Buff1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_Buff1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Buff1_Rear;
    spriteset_ICSD_DMU_DEBset_Buff1_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_DEBset_Buff1, 3202) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: Item_ICSD_DMU_DEBset_Pinstripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_Buff1_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Buff1_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Buff1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
		weight:                        38;
		running_cost_factor:             29;
    }
}

//DEB Set
//Buff2
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Purchase,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Lead,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Rear,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Mid,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_Buff2_Trailer,   "gfx/ICSD_DMU_DEBset_Buff2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_Buff2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_Buff2_Rear;
    spriteset_ICSD_DMU_DEBset_Buff2_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_DEBset_Buff2, 3203) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: Item_ICSD_DMU_DEBset_Pinstripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_Buff2_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_Buff2_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_Buff2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
		weight:                        38;
		running_cost_factor:             29;
    }
}

//DEB Set
//SRA
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Purchase,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Lead,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Rear,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Mid,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_DEBset_SRA_Trailer,   "gfx/ICSD_DMU_DEBset_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_DEBset_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_DEBset_SRA_Rear;
    spriteset_ICSD_DMU_DEBset_SRA_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_DEBset_SRA, 3204) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_DEBSET);
        introduction_date:                date(1951,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            250 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 5;

        variant_group: Item_ICSD_DMU_DEBset_Pinstripe;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_DEBset_SRA_last;
        can_attach_wagon: sw_ICSD_DMU_DEBset_attach;
        purchase: spriteset_ICSD_DMU_DEBset_SRA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_DEBSET);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_DEBset_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
		weight:                        38;
		running_cost_factor:             29;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_attach, vehicle_type_id){
    Item_ICSD_DMU_Twinset_BlueStreak     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Twinset_NZR     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Twin Set
//BlueStreak
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Purchase,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Lead,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Rear,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Mid,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Twinset_BlueStreak_Trailer,   "gfx/ICSD_DMU_TwinSet_BlueStreak.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_BlueStreak_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Twinset_BlueStreak_Rear;
    spriteset_ICSD_DMU_Twinset_BlueStreak_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Twinset_BlueStreak, 3251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_TWINSET);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            130 km/h;
        power:                            210 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Twinset_BlueStreak;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Twinset_BlueStreak_last;
        can_attach_wagon: sw_ICSD_DMU_Twinset_attach;
        purchase: spriteset_ICSD_DMU_Twinset_BlueStreak_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_TWINSET);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Twinset_BlueStreak_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
		weight:                        35;
		running_cost_factor: 29;
    }
}

//Twin Set
//NZR
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Purchase,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Lead,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Rear,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Mid,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Twinset_NZR_Trailer,   "gfx/ICSD_DMU_TwinSet_NZR.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Twinset_NZR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Twinset_NZR_Rear;
    spriteset_ICSD_DMU_Twinset_NZR_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Twinset_NZR, 3252) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_TWINSET);
        introduction_date:                date(1955,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            130 km/h;
        power:                            210 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             115;
        cargo_capacity:                  54/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Twinset_BlueStreak;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Twinset_NZR_last;
        can_attach_wagon: sw_ICSD_DMU_Twinset_attach;
        purchase: spriteset_ICSD_DMU_Twinset_NZR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_TWINSET);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Twinset_NZR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (54/param_capacity_mod);
        power:                            125;
		weight:                        35;
		running_cost_factor: 29;
    }
}

spriteset(spriteset_ICSD_DMU_1100Class_Headlights,   "gfx/ICSD_DMU_1100Class_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_1100Class_Headlights_r,   "gfx/ICSD_DMU_1100Class_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_ICSD_DMU_1100Class_Markerlights,   "gfx/ICSD_DMU_1100Class_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_1100Class_Markerlights_r,   "gfx/ICSD_DMU_1100Class.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_attach, vehicle_type_id){
    Item_ICSD_DMU_1100Class_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_1100Class_Vline     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//1100 Class Railmotor
//Silver
spriteset(spriteset_ICSD_DMU_1100Class_Silver_Purchase,   "gfx/ICSD_DMU_1100Class_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_1100Class_Silver,   "gfx/ICSD_DMU_1100Class_Silver.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_1100Class_Silver_r,   "gfx/ICSD_DMU_1100Class_Silver.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Silver_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Headlights_r;
    spriteset_ICSD_DMU_1100Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Silver_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Markerlights_r;
    spriteset_ICSD_DMU_1100Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Silver_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_1100Class_Silver_r;
    spriteset_ICSD_DMU_1100Class_Silver ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Silver_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Silver_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Silver_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_1100Class_Silver_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_1100Class_Silver_markerlight_stack;
    return sw_ICSD_DMU_1100Class_Silver_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_lead, position_in_consist) {
    0: sw_ICSD_DMU_1100Class_Silver_headlight_stack;
    return sw_ICSD_DMU_1100Class_Silver_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Silver_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_1100Class_Silver_headlight_and_marker_stack;
return sw_ICSD_DMU_1100Class_Silver_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_1100Class_Silver, 3301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_1100CLASS);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             64;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ICSD_DMU_1100Class_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_1100Class_Silver_solo;
        can_attach_wagon: sw_ICSD_DMU_1100Class_attach;
        purchase: spriteset_ICSD_DMU_1100Class_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_1100CLASS);
}
}

//1100 Class Railmotor
//Vline
spriteset(spriteset_ICSD_DMU_1100Class_Vline_Purchase,   "gfx/ICSD_DMU_1100Class_Vline.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_1100Class_Vline,   "gfx/ICSD_DMU_1100Class_Vline.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_1100Class_Vline_r,   "gfx/ICSD_DMU_1100Class_Vline.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Vline_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Headlights_r;
    spriteset_ICSD_DMU_1100Class_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Vline_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_1100Class_Markerlights_r;
    spriteset_ICSD_DMU_1100Class_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_1100Class_Vline_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_1100Class_Vline_r;
    spriteset_ICSD_DMU_1100Class_Vline ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Vline_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Vline_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Vline_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Vline_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_1100Class_Vline_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_1100Class_Vline_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_1100Class_Vline_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_1100Class_Vline_markerlight_stack;
    return sw_ICSD_DMU_1100Class_Vline_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_lead, position_in_consist) {
    0: sw_ICSD_DMU_1100Class_Vline_headlight_stack;
    return sw_ICSD_DMU_1100Class_Vline_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_1100Class_Vline_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_1100Class_Vline_headlight_and_marker_stack;
return sw_ICSD_DMU_1100Class_Vline_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_1100Class_Vline, 3302) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_1100CLASS);
        introduction_date:                date(1961,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             64;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ICSD_DMU_1100Class_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_1100Class_Vline_solo;
        can_attach_wagon: sw_ICSD_DMU_1100Class_attach;
        purchase: spriteset_ICSD_DMU_1100Class_Vline_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_1100CLASS);
}
}

switch(FEAT_TRAINS, SELF, sw_Tulloch_DRC_attach, vehicle_type_id){
	Item_Tulloch_DRC_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Tulloch_DRC_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Tulloch_DRC_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Tulloch_DRC_Liv4    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HType_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HType_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HType_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HType_Liv4    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HType_Liv5    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Tulloch_DRC_Liv1
spriteset(spriteset_Tulloch_DRC_Liv1_Purchase,   "gfx/Tulloch_DRC_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_Tulloch_DRC_Liv1,   "gfx/Tulloch_DRC_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Tulloch_DRC_Liv1, 3380) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHDRC);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             64;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tulloch_DRC_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Tulloch_DRC_Liv1;
        can_attach_wagon: sw_Tulloch_DRC_attach;
        purchase: spriteset_Tulloch_DRC_Liv1_Purchase;
        additional_text: string(STR_INFO_TULLOCHDRC);
		reverse_build_probability: return 50;
}
}

//Tulloch_DRC_Liv2
spriteset(spriteset_Tulloch_DRC_Liv2_Purchase,   "gfx/Tulloch_DRC_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_Tulloch_DRC_Liv2,   "gfx/Tulloch_DRC_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Tulloch_DRC_Liv2, 3381) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHDRC);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             64;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tulloch_DRC_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Tulloch_DRC_Liv2;
        can_attach_wagon: sw_Tulloch_DRC_attach;
        purchase: spriteset_Tulloch_DRC_Liv2_Purchase;
        additional_text: string(STR_INFO_TULLOCHDRC);
		reverse_build_probability: return 50;
}
}

//Tulloch_DRC_Liv3
spriteset(spriteset_Tulloch_DRC_Liv3_Purchase,   "gfx/Tulloch_DRC_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_Tulloch_DRC_Liv3,   "gfx/Tulloch_DRC_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Tulloch_DRC_Liv3, 3382) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHDRC);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             64;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tulloch_DRC_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Tulloch_DRC_Liv3;
        can_attach_wagon: sw_Tulloch_DRC_attach;
        purchase: spriteset_Tulloch_DRC_Liv3_Purchase;
        additional_text: string(STR_INFO_TULLOCHDRC);
		reverse_build_probability: return 50;
}
}

//Tulloch_DRC_Liv4
spriteset(spriteset_Tulloch_DRC_Liv4_Purchase,   "gfx/Tulloch_DRC_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_Tulloch_DRC_Liv4,   "gfx/Tulloch_DRC_Liv4.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab

item(FEAT_TRAINS, Item_Tulloch_DRC_Liv4, 3383) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    0; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_TULLOCHDRC);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        34 ton;
        speed:                            130 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     5;
        running_cost_factor:             64;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tulloch_DRC_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: spriteset_Tulloch_DRC_Liv4;
        can_attach_wagon: sw_Tulloch_DRC_attach;
        purchase: spriteset_Tulloch_DRC_Liv4_Purchase;
        additional_text: string(STR_INFO_TULLOCHDRC);
		reverse_build_probability: return 50;
}
}

spriteset(spriteset_ICSD_DMU_Prospector_Headlights,   "gfx/ICSD_DMU_Prospector_Headlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_Prospector_Headlights_r,   "gfx/ICSD_DMU_Prospector_Headlights.png") {template_old_8(7, 64)} // <- Define headlights (flipped)
spriteset(spriteset_ICSD_DMU_Prospector_Markerlights,   "gfx/ICSD_DMU_Prospector_Markerlights.png") {template_old_8(7, 39)} // <- Define headlights
spriteset(spriteset_ICSD_DMU_Prospector_Markerlights_r,   "gfx/ICSD_DMU_Prospector.png") {template_old_8(7, 64)} // <- Define headlights (flipped)

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_attach, vehicle_type_id){
    Item_ICSD_DMU_Prospector_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Prospector_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Prospector_WAGR     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Prospector Railcar
//Silver
spriteset(spriteset_ICSD_DMU_Prospector_Silver_Purchase,   "gfx/ICSD_DMU_Prospector_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector_Silver,   "gfx/ICSD_DMU_Prospector_Silver.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_Silver_r,   "gfx/ICSD_DMU_Prospector_Silver.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Silver_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Silver_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Silver_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_Silver_r;
    spriteset_ICSD_DMU_Prospector_Silver ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Silver_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Silver_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Silver_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Silver_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_Silver_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_Silver_markerlight_stack;
    return sw_ICSD_DMU_Prospector_Silver_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_Silver_headlight_stack;
    return sw_ICSD_DMU_Prospector_Silver_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Silver_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_Silver_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_Silver_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Prospector_Silver, 3401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             60;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Prospector_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_Silver_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

//Prospector Railcar
//Early
spriteset(spriteset_ICSD_DMU_Prospector_Early_Purchase,   "gfx/ICSD_DMU_Prospector_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector_Early,   "gfx/ICSD_DMU_Prospector_Early.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_Early_r,   "gfx/ICSD_DMU_Prospector_Early.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Early_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Early_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_Early_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_Early_r;
    spriteset_ICSD_DMU_Prospector_Early ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Early_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Early_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_Early_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_Early_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_Early_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_Early_markerlight_stack;
    return sw_ICSD_DMU_Prospector_Early_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_Early_headlight_stack;
    return sw_ICSD_DMU_Prospector_Early_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_Early_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_Early_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_Early_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Prospector_Early, 3402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             60;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Prospector_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_Early_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_Early_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

//Prospector Railcar
//WAGR
spriteset(spriteset_ICSD_DMU_Prospector_WAGR_Purchase,   "gfx/ICSD_DMU_Prospector_WAGR.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Prospector_WAGR,   "gfx/ICSD_DMU_Prospector_WAGR.png") {template_old_8(7, 39)} // <- Define a wagon
spriteset(spriteset_ICSD_DMU_Prospector_WAGR_r,   "gfx/ICSD_DMU_Prospector_WAGR.png") {template_old_8(7, 64)} // <- Define a wagon (flipped)

// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_WAGR_headlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Headlights_r;
    spriteset_ICSD_DMU_Prospector_Headlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_WAGR_markerlight_flipcheck, vehicle_is_flipped){
    1: spriteset_ICSD_DMU_Prospector_Markerlights_r;
    spriteset_ICSD_DMU_Prospector_Markerlights ;
}
// NEW: Switch to check if we're flipped or not
switch(FEAT_TRAINS, PARENT, sw_ICSD_DMU_Prospector_WAGR_flipcheck, vehicle_is_reversed){
    1: spriteset_ICSD_DMU_Prospector_WAGR_r;
    spriteset_ICSD_DMU_Prospector_WAGR ;
}

//Headlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_headlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_WAGR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_WAGR_headlight_flipcheck;    // Return the overlay
}
//Markerlight stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_markerlight_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 1 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_WAGR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_WAGR_markerlight_flipcheck;    // Return the overlay
}

//both stacker
switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_headlight_and_marker_stack, [
    STORE_TEMP((getbits(extra_callback_info1, 8, 8) < 2 ? CB_FLAG_MORE_SPRITES : 0) | PALETTE_USE_DEFAULT, 0x100),
    getbits(extra_callback_info1, 8, 8)
    ]) {
    0: return sw_ICSD_DMU_Prospector_WAGR_flipcheck;    // Return the NEW FLIP CHECK
    1: return sw_ICSD_DMU_Prospector_WAGR_headlight_flipcheck;    // Return the headlight overlay
    return sw_ICSD_DMU_Prospector_WAGR_markerlight_flipcheck; // Return the marker light overlay
}
/* If this loco is leading the train, display headlights.  */

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_rear, position_in_consist_from_end){
    0 : return sw_ICSD_DMU_Prospector_WAGR_markerlight_stack;
    return sw_ICSD_DMU_Prospector_WAGR_flipcheck; // Return the NEW FLIP CHECK
}

switch (FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_lead, position_in_consist) {
    0: sw_ICSD_DMU_Prospector_WAGR_headlight_stack;
    return sw_ICSD_DMU_Prospector_WAGR_rear;
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Prospector_WAGR_solo, position_in_consist == 0 && position_in_consist_from_end == 0) {
1: return sw_ICSD_DMU_Prospector_WAGR_headlight_and_marker_stack;
return sw_ICSD_DMU_Prospector_WAGR_lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Prospector_WAGR, 3403) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_PROSPECTOR);
        introduction_date:                date(1971,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            160 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     6;
        running_cost_factor:             60;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Prospector_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Prospector_WAGR_solo;
        can_attach_wagon: sw_ICSD_DMU_Prospector_attach;
        purchase: spriteset_ICSD_DMU_Prospector_WAGR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_PROSPECTOR);
}
}

switch(FEAT_TRAINS, SELF, sw_SilverFern_attach, vehicle_type_id){
    Item_SilverFern_Silver     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SilverFern_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SilverFern_Late     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//SilverFern_Silver
spriteset(spriteset_SilverFern_Silver_Purchase,   "gfx/SilverFern_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_SilverFern_Silver_Lead,   "gfx/SilverFern_Silver.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SilverFern_Silver_Rear,   "gfx/SilverFern_Silver.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SilverFern_Silver_Trailer,   "gfx/SilverFern_Silver.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_SilverFern_Silver_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SilverFern_Silver_Rear;
    spriteset_SilverFern_Silver_Lead;
}

item(FEAT_TRAINS, Item_SilverFern_Silver, 3451) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SilverFern_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SilverFern_Silver_last;
        can_attach_wagon: sw_SilverFern_attach;
        purchase: spriteset_SilverFern_Silver_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SilverFern_Silver_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
		weight:                        45;
		running_cost_factor:             32;
    }
}

//SilverFern_Early
spriteset(spriteset_SilverFern_Early_Purchase,   "gfx/SilverFern_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SilverFern_Early_Lead,   "gfx/SilverFern_Early.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SilverFern_Early_Rear,   "gfx/SilverFern_Early.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SilverFern_Early_Trailer,   "gfx/SilverFern_Early.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_SilverFern_Early_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SilverFern_Early_Rear;
    spriteset_SilverFern_Early_Lead;
}

item(FEAT_TRAINS, Item_SilverFern_Early, 3452) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SilverFern_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SilverFern_Early_last;
        can_attach_wagon: sw_SilverFern_attach;
        purchase: spriteset_SilverFern_Early_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SilverFern_Early_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
		weight:                        45;
		running_cost_factor:             32;
    }
}

//SilverFern_Late
spriteset(spriteset_SilverFern_Late_Purchase,   "gfx/SilverFern_Late.png") {template_purchase(7, 21)}
spriteset(spriteset_SilverFern_Late_Lead,   "gfx/SilverFern_Late.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SilverFern_Late_Rear,   "gfx/SilverFern_Late.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SilverFern_Late_Trailer,   "gfx/SilverFern_Late.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_SilverFern_Late_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_SilverFern_Late_Rear;
    spriteset_SilverFern_Late_Lead;
}

item(FEAT_TRAINS, Item_SilverFern_Late, 3453) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_SILVERFERN);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            145 km/h;
        power:                            900 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             125;
        cargo_capacity:                  75/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_SilverFern_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SilverFern_Late_last;
        can_attach_wagon: sw_SilverFern_attach;
        purchase: spriteset_SilverFern_Late_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_SILVERFERN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_SilverFern_Late_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (75/param_capacity_mod);
        power:                            450;
		weight:                        45;
		running_cost_factor:             32;
    }
}


switch(FEAT_TRAINS, SELF, sw_ComengKoru_attach, vehicle_type_id){
    Item_ComengKoru_NZR     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengKoru_Liv1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengKoru_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengKoru_NZR
spriteset(spriteset_ComengKoru_NZR_Purchase,   "gfx/ComengKoru_NZR.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengKoru_NZR_Lead,   "gfx/ComengKoru_NZR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengKoru_NZR_Rear,   "gfx/ComengKoru_NZR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengKoru_NZR_Trailer,   "gfx/ComengKoru_NZR.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengKoru_NZR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengKoru_NZR_Rear;
    spriteset_ComengKoru_NZR_Lead;
}

item(FEAT_TRAINS, Item_ComengKoru_NZR, 3501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_KORU);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            160 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ComengKoru_NZR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengKoru_NZR_last;
        can_attach_wagon: sw_ComengKoru_attach;
        purchase: spriteset_ComengKoru_NZR_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_KORU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengKoru_NZR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            460;
		weight:                        43;
		running_cost_factor:             33;
    }
}

//ComengKoru_Liv1
spriteset(spriteset_ComengKoru_Liv1_Purchase,   "gfx/ComengKoru_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengKoru_Liv1_Lead,   "gfx/ComengKoru_Liv1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengKoru_Liv1_Rear,   "gfx/ComengKoru_Liv1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengKoru_Liv1_Trailer,   "gfx/ComengKoru_Liv1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengKoru_Liv1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengKoru_Liv1_Rear;
    spriteset_ComengKoru_Liv1_Lead;
}

item(FEAT_TRAINS, Item_ComengKoru_Liv1, 3502) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_KORU);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            160 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ComengKoru_NZR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengKoru_Liv1_last;
        can_attach_wagon: sw_ComengKoru_attach;
        purchase: spriteset_ComengKoru_Liv1_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_KORU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengKoru_Liv1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            460;
		weight:                        43;
		running_cost_factor:             33;
    }
}

//ComengKoru_Liv2
spriteset(spriteset_ComengKoru_Liv2_Purchase,   "gfx/ComengKoru_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengKoru_Liv2_Lead,   "gfx/ComengKoru_Liv2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengKoru_Liv2_Rear,   "gfx/ComengKoru_Liv2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengKoru_Liv2_Trailer,   "gfx/ComengKoru_Liv2.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengKoru_Liv2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengKoru_Liv2_Rear;
    spriteset_ComengKoru_Liv2_Lead;
}

item(FEAT_TRAINS, Item_ComengKoru_Liv2, 3503) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_KORU);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            160 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ComengKoru_NZR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengKoru_Liv2_last;
        can_attach_wagon: sw_ComengKoru_attach;
        purchase: spriteset_ComengKoru_Liv2_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_KORU);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ComengKoru_Liv2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            460;
		weight:                        43;
		running_cost_factor:             33;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_attach, vehicle_type_id){
    Item_ICSD_DMU_ADPADQ_Early     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_ADPADQ_Mid     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_ADPADQ_Late     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//WAGR ADP/ADQ
//Early
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Purchase,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Lead,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Rear,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Mid,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Early_Trailer,   "gfx/ICSD_DMU_ADPADQ_Early.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_Early_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Early_Rear;
    spriteset_ICSD_DMU_ADPADQ_Early_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_ADPADQ_Early, 3551) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_ADPADQ_Early;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_Early_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Early_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Early_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
		weight:                        48;
		running_cost_factor:             33;
    }
}

//WAGR ADP/ADQ
//Mid
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Purchase,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Lead,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Rear,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Mid,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Mid_Trailer,   "gfx/ICSD_DMU_ADPADQ_Mid.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_Mid_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Mid_Rear;
    spriteset_ICSD_DMU_ADPADQ_Mid_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_ADPADQ_Mid, 3552) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_ADPADQ_Early;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_Mid_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Mid_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Mid_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
		weight:                        48;
		running_cost_factor:             33;
    }
}

//WAGR ADP/ADQ
//Late
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Purchase,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Lead,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Rear,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Mid,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_ADPADQ_Late_Trailer,   "gfx/ICSD_DMU_ADPADQ_Late.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_ADPADQ_Late_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_ADPADQ_Late_Rear;
    spriteset_ICSD_DMU_ADPADQ_Late_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_ADPADQ_Late, 3553) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_ADPADQ);
        introduction_date:                date(1987,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            160 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             130;
        cargo_capacity:                  80/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_ADPADQ_Early;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_ADPADQ_Late_last;
        can_attach_wagon: sw_ICSD_DMU_ADPADQ_attach;
        purchase: spriteset_ICSD_DMU_ADPADQ_Late_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_ADPADQ);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_ADPADQ_Late_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            500;
		weight:                        48;
		running_cost_factor:             33;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_attach, vehicle_type_id){
    Item_ICSD_DMU_Xplorer_Countrylink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Xplorer_CityRailEarly     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Xplorer_CityRail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Xplorer_Trainlink1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_Xplorer_Trainlink2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Xplorer
//Countrylink
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Purchase,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Lead,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Rear,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Mid,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Countrylink_Trailer,   "gfx/ICSD_DMU_Xplorer_Countrylink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_Countrylink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Countrylink_Rear;
    spriteset_ICSD_DMU_Xplorer_Countrylink_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Xplorer_Countrylink, 3601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             130;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Xplorer_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_Countrylink_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Countrylink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Countrylink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
		weight:                        56;
		running_cost_factor:             33;
    }
}

//Xplorer
//CityRailEarly
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Purchase,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Lead,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Rear,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Mid,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRailEarly_Trailer,   "gfx/ICSD_DMU_Xplorer_CityRailEarly.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_CityRailEarly_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_CityRailEarly_Rear;
    spriteset_ICSD_DMU_Xplorer_CityRailEarly_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Xplorer_CityRailEarly, 3602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             130;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Xplorer_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_CityRailEarly_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_CityRailEarly_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_CityRailEarly_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
		weight:                        56;
		running_cost_factor:             33;
    }
}

//Xplorer
//CityRailEarly
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Purchase,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Lead,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Rear,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Mid,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_CityRail_Trailer,   "gfx/ICSD_DMU_Xplorer_CityRail.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_CityRail_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_CityRail_Rear;
    spriteset_ICSD_DMU_Xplorer_CityRail_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Xplorer_CityRail, 3603) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             130;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Xplorer_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_CityRail_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_CityRail_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_CityRail_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
		weight:                        56;
		running_cost_factor:             33;
    }
}

//Xplorer
//Trainlink1
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Purchase,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Lead,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Rear,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Mid,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink1_Trailer,   "gfx/ICSD_DMU_Xplorer_Trainlink1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_Trainlink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Trainlink1_Rear;
    spriteset_ICSD_DMU_Xplorer_Trainlink1_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Xplorer_Trainlink1, 3604) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             130;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Xplorer_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_Trainlink1_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Trainlink1_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Trainlink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
		weight:                        56;
		running_cost_factor:             33;
    }
}

//Xplorer
//Trainlink2
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Purchase,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Lead,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Rear,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Mid,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Xplorer_Trainlink2_Trailer,   "gfx/ICSD_DMU_Xplorer_Trainlink2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Xplorer_Trainlink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Xplorer_Trainlink2_Rear;
    spriteset_ICSD_DMU_Xplorer_Trainlink2_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Xplorer_Trainlink2, 3605) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_XPLORER);
        introduction_date:                date(1994,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        56 ton;
        speed:                            160 km/h;
        power:                            1028 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             130;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_Xplorer_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Xplorer_Trainlink2_last;
        can_attach_wagon: sw_ICSD_DMU_Xplorer_attach;
        purchase: spriteset_ICSD_DMU_Xplorer_Trainlink2_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_XPLORER);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Xplorer_Trainlink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (82/param_capacity_mod);
        power:                            514;
		weight:                        56;
		running_cost_factor:             33;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_WDClass_attach, vehicle_type_id){
    Item_ICSD_DMU_WDClass_TransWA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//WD Class
//TransWA
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Purchase,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Lead,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Rear,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Mid,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_WDClass_TransWA_Trailer,   "gfx/ICSD_DMU_WDClass_TransWA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_WDClass_TransWA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_WDClass_TransWA_Rear;
    spriteset_ICSD_DMU_WDClass_TransWA_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_WDClass_TransWA, 3701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_WDCLASS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        62 ton;
        speed:                            200 km/h;
        power:                            1036 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             130;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_WDClass_TransWA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_WDClass_TransWA_last;
        can_attach_wagon: sw_ICSD_DMU_WDClass_attach;
        purchase: spriteset_ICSD_DMU_WDClass_TransWA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_WDCLASS);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_WDClass_TransWA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            518;
		weight:                        62;
		running_cost_factor:             33;
    }
}

switch(FEAT_TRAINS, SELF, sw_VLo_attach, vehicle_type_id){
    Item_VLo_Liv1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_VLo_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_VLo_Liv3     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_VLo_Liv4     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//VLo_Liv1
spriteset(spriteset_VLo_Liv1_Purchase,   "gfx/VLo_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_VLo_Liv1_Lead,   "gfx/VLo_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VLo_Liv1_Rear,   "gfx/VLo_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VLo_Liv1_Trailer,   "gfx/VLo_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VLo_Liv1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VLo_Liv1_Rear;
    spriteset_VLo_Liv1_Lead;
}

item(FEAT_TRAINS, Item_VLo_Liv1, 3750) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             138;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_VLo_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VLo_Liv1_last;
        can_attach_wagon: sw_VLo_attach;
        purchase: spriteset_VLo_Liv1_Purchase;
        additional_text: string(STR_INFO_VLOCITY);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_VLo_Liv1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
		weight:                        57;
		running_cost_factor:             35;
    }
}

//VLo_Liv2
spriteset(spriteset_VLo_Liv2_Purchase,   "gfx/VLo_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_VLo_Liv2_Lead,   "gfx/VLo_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VLo_Liv2_Rear,   "gfx/VLo_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VLo_Liv2_Trailer,   "gfx/VLo_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VLo_Liv2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VLo_Liv2_Rear;
    spriteset_VLo_Liv2_Lead;
}

item(FEAT_TRAINS, Item_VLo_Liv2, 3751) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             138;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_VLo_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VLo_Liv2_last;
        can_attach_wagon: sw_VLo_attach;
        purchase: spriteset_VLo_Liv2_Purchase;
        additional_text: string(STR_INFO_VLOCITY);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_VLo_Liv2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
		weight:                        57;
		running_cost_factor:             35;
    }
}

//VLo_Liv3
spriteset(spriteset_VLo_Liv3_Purchase,   "gfx/VLo_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_VLo_Liv3_Lead,   "gfx/VLo_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VLo_Liv3_Rear,   "gfx/VLo_Liv3.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VLo_Liv3_Trailer,   "gfx/VLo_Liv3.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VLo_Liv3_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VLo_Liv3_Rear;
    spriteset_VLo_Liv3_Lead;
}

item(FEAT_TRAINS, Item_VLo_Liv3, 3752) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             138;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_VLo_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VLo_Liv3_last;
        can_attach_wagon: sw_VLo_attach;
        purchase: spriteset_VLo_Liv3_Purchase;
        additional_text: string(STR_INFO_VLOCITY);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_VLo_Liv3_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
		weight:                        57;
		running_cost_factor:             35;
    }
}

//VLo_Liv4
spriteset(spriteset_VLo_Liv4_Purchase,   "gfx/VLo_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_VLo_Liv4_Lead,   "gfx/VLo_Liv4.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_VLo_Liv4_Rear,   "gfx/VLo_Liv4.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_VLo_Liv4_Trailer,   "gfx/VLo_Liv4.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VLo_Liv4_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VLo_Liv4_Rear;
    spriteset_VLo_Liv4_Lead;
}

item(FEAT_TRAINS, Item_VLo_Liv4, 3753) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_VLOCITY);
        introduction_date:                date(2005,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        57 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             138;
        cargo_capacity:                  93/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_VLo_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VLo_Liv4_last;
        can_attach_wagon: sw_VLo_attach;
        purchase: spriteset_VLo_Liv4_Purchase;
        additional_text: string(STR_INFO_VLOCITY);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_VLo_Liv4_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (93/param_capacity_mod);
        power:                            750;
		weight:                        57;
		running_cost_factor:             35;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_attach, vehicle_type_id){
    Item_ICSD_DMU_BHRC_Countrylink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ICSD_DMU_BHRC_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Broken Hill Railcar
//Countrylink
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Purchase,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Lead,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Rear,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Mid,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_BHRC_Countrylink_Trailer,   "gfx/ICSD_DMU_BHRC_Countrylink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_Countrylink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_BHRC_Countrylink_Rear;
    spriteset_ICSD_DMU_BHRC_Countrylink_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_BHRC_Countrylink, 3801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_BHRC);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        63 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             140;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_BHRC_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_BHRC_Countrylink_last;
        can_attach_wagon: sw_ICSD_DMU_BHRC_attach;
        purchase: spriteset_ICSD_DMU_BHRC_Countrylink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_BHRC);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_BHRC_Countrylink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            750;
		weight:                        63;
		running_cost_factor:             35;
    }
}

//Broken Hill Railcar
//Trainlink
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Purchase,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Lead,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Rear,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Mid,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_BHRC_Trainlink_Trailer,   "gfx/ICSD_DMU_BHRC_Trainlink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_BHRC_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_BHRC_Trainlink_Rear;
    spriteset_ICSD_DMU_BHRC_Trainlink_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_BHRC_Trainlink, 3802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_BHRC);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        63 ton;
        speed:                            200 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             140;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ICSD_DMU_BHRC_Countrylink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_BHRC_Trainlink_last;
        can_attach_wagon: sw_ICSD_DMU_BHRC_attach;
        purchase: spriteset_ICSD_DMU_BHRC_Trainlink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_BHRC);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_BHRC_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            750;
		weight:                        63;
		running_cost_factor:             35;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Australind_attach, vehicle_type_id){
    Item_ICSD_DMU_Australind_TransWA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Australind Railcar
//TransWA
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Purchase,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Lead,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Rear,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Mid,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_Australind_TransWA_Trailer,   "gfx/ICSD_DMU_Australind_TransWA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_Australind_TransWA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_Australind_TransWA_Rear;
    spriteset_ICSD_DMU_Australind_TransWA_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_Australind_TransWA, 3901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_AUSTRALIND);
        introduction_date:                date(2025,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            1350 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     12;
        running_cost_factor:             148;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_ICSD_DMU_Australind_TransWA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_Australind_TransWA_last;
        can_attach_wagon: sw_ICSD_DMU_Australind_attach;
        purchase: spriteset_ICSD_DMU_Australind_TransWA_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_AUSTRALIND);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_Australind_TransWA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            675;
		weight:                        55;
		running_cost_factor:             47;
    }
}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_NRFLR_attach, vehicle_type_id){
    Item_ICSD_DMU_NRFLR_Trainlink     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//New Regional Fleet Long Regional
//Trainlink
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Purchase,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Lead,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Rear,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Mid,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_old_8(7, 89)}
spriteset(spriteset_ICSD_DMU_NRFLR_Trainlink_Trailer,   "gfx/ICSD_DMU_NRFLR_Trainlink.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_ICSD_DMU_NRFLR_Trainlink_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ICSD_DMU_NRFLR_Trainlink_Rear;
    spriteset_ICSD_DMU_NRFLR_Trainlink_Lead;
}

item(FEAT_TRAINS, Item_ICSD_DMU_NRFLR_Trainlink, 3951) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_ICSD_DMU_NRFLR);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        55 ton;
        speed:                            200 km/h;
        power:                            1350 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             150;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ICSD_DMU_NRFLR_Trainlink;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ICSD_DMU_NRFLR_Trainlink_last;
        can_attach_wagon: sw_ICSD_DMU_NRFLR_attach;
        purchase: spriteset_ICSD_DMU_NRFLR_Trainlink_Purchase;
        additional_text: string(STR_INFO_ICSD_DMU_NRFLR);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_ICSD_DMU_NRFLR_Trainlink_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (98/param_capacity_mod);
        power:                            675;
		weight:                        55;
		running_cost_factor:             38;
    }
}

/////////////////
//Express NEMUs//
/////////////////

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_attach, vehicle_type_id){
	Item_XPTInterurban_PTC1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_XPTInterurban_PTC2     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_XPTInterurban_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_XPTInterurban_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_XPTInterurban_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//XPTInterurban_PTC1
spriteset(spriteset_XPTInterurban_PTC1_Purchase,   "gfx/XPTInterurban_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_XPTInterurban_PTC1_Lead,   "gfx/XPTInterurban_PTC1.png") {template_old_8(7, 39)}
spriteset(spriteset_XPTInterurban_PTC1_Rear,   "gfx/XPTInterurban_PTC1.png") {template_old_8(7, 64)}

spriteset(spriteset_XPTInterurban_PTC1_DT_Lead,   "gfx/XPTInterurban_PTC1.png") {template_old_8(187, 39)}
spriteset(spriteset_XPTInterurban_PTC1_DT_Rear,   "gfx/XPTInterurban_PTC1.png") {template_old_8(187, 64)}

spriteset(spriteset_XPTInterurban_PTC1_Trailer,   "gfx/XPTInterurban_PTC1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_PTC1_forward, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_PTC1_Lead;
    1: spriteset_XPTInterurban_PTC1_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_PTC1_rev, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_PTC1_DT_Lead;
    1: spriteset_XPTInterurban_PTC1_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_XPTInterurban_PTC1_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_XPTInterurban_PTC1_forward;
    1:    sw_XPTInterurban_PTC1_rev;
}

item(FEAT_TRAINS, Item_XPTInterurban_PTC1, 4901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_XPTINTERURBAN);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            160 km/h;
        power:                            2000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_XPTInterurban_PTC1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_XPTInterurban_PTC1_directioncheck;
        can_attach_wagon: sw_XPTInterurban_attach;
        purchase: spriteset_XPTInterurban_PTC1_Purchase;
        additional_text: string(STR_INFO_XPTINTERURBAN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_XPTInterurban_PTC1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        40;
        running_cost_factor:             18;
    }
}

//XPTInterurban_PTC2
spriteset(spriteset_XPTInterurban_PTC2_Purchase,   "gfx/XPTInterurban_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_XPTInterurban_PTC2_Lead,   "gfx/XPTInterurban_PTC2.png") {template_old_8(7, 39)}
spriteset(spriteset_XPTInterurban_PTC2_Rear,   "gfx/XPTInterurban_PTC2.png") {template_old_8(7, 64)}

spriteset(spriteset_XPTInterurban_PTC2_DT_Lead,   "gfx/XPTInterurban_PTC2.png") {template_old_8(187, 39)}
spriteset(spriteset_XPTInterurban_PTC2_DT_Rear,   "gfx/XPTInterurban_PTC2.png") {template_old_8(187, 64)}

spriteset(spriteset_XPTInterurban_PTC2_Trailer,   "gfx/XPTInterurban_PTC2.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_PTC2_forward, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_PTC2_Lead;
    1: spriteset_XPTInterurban_PTC2_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_PTC2_rev, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_PTC2_DT_Lead;
    1: spriteset_XPTInterurban_PTC2_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_XPTInterurban_PTC2_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_XPTInterurban_PTC2_forward;
    1:    sw_XPTInterurban_PTC2_rev;
}

item(FEAT_TRAINS, Item_XPTInterurban_PTC2, 4902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_XPTINTERURBAN);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            160 km/h;
        power:                            2000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_XPTInterurban_PTC1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_XPTInterurban_PTC2_directioncheck;
        can_attach_wagon: sw_XPTInterurban_attach;
        purchase: spriteset_XPTInterurban_PTC2_Purchase;
        additional_text: string(STR_INFO_XPTINTERURBAN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_XPTInterurban_PTC2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        40;
        running_cost_factor:             18;
    }
}

//XPTInterurban_SRA
spriteset(spriteset_XPTInterurban_SRA_Purchase,   "gfx/XPTInterurban_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_XPTInterurban_SRA_Lead,   "gfx/XPTInterurban_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_XPTInterurban_SRA_Rear,   "gfx/XPTInterurban_SRA.png") {template_old_8(7, 64)}

spriteset(spriteset_XPTInterurban_SRA_DT_Lead,   "gfx/XPTInterurban_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_XPTInterurban_SRA_DT_Rear,   "gfx/XPTInterurban_SRA.png") {template_old_8(187, 64)}

spriteset(spriteset_XPTInterurban_SRA_Trailer,   "gfx/XPTInterurban_SRA.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_SRA_forward, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_SRA_Lead;
    1: spriteset_XPTInterurban_SRA_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_SRA_rev, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_SRA_DT_Lead;
    1: spriteset_XPTInterurban_SRA_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_XPTInterurban_SRA_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_XPTInterurban_SRA_forward;
    1:    sw_XPTInterurban_SRA_rev;
}

item(FEAT_TRAINS, Item_XPTInterurban_SRA, 4903) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_XPTINTERURBAN);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            160 km/h;
        power:                            2000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_XPTInterurban_PTC1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_XPTInterurban_SRA_directioncheck;
        can_attach_wagon: sw_XPTInterurban_attach;
        purchase: spriteset_XPTInterurban_SRA_Purchase;
        additional_text: string(STR_INFO_XPTINTERURBAN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_XPTInterurban_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        40;
        running_cost_factor:             18;
    }
}

//XPTInterurban_Countrylink1
spriteset(spriteset_XPTInterurban_Countrylink1_Purchase,   "gfx/XPTInterurban_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_XPTInterurban_Countrylink1_Lead,   "gfx/XPTInterurban_Countrylink1.png") {template_old_8(7, 39)}
spriteset(spriteset_XPTInterurban_Countrylink1_Rear,   "gfx/XPTInterurban_Countrylink1.png") {template_old_8(7, 64)}

spriteset(spriteset_XPTInterurban_Countrylink1_DT_Lead,   "gfx/XPTInterurban_Countrylink1.png") {template_old_8(187, 39)}
spriteset(spriteset_XPTInterurban_Countrylink1_DT_Rear,   "gfx/XPTInterurban_Countrylink1.png") {template_old_8(187, 64)}

spriteset(spriteset_XPTInterurban_Countrylink1_Trailer,   "gfx/XPTInterurban_Countrylink1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_Countrylink1_forward, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_Countrylink1_Lead;
    1: spriteset_XPTInterurban_Countrylink1_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_Countrylink1_rev, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_Countrylink1_DT_Lead;
    1: spriteset_XPTInterurban_Countrylink1_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_XPTInterurban_Countrylink1_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_XPTInterurban_Countrylink1_forward;
    1:    sw_XPTInterurban_Countrylink1_rev;
}

item(FEAT_TRAINS, Item_XPTInterurban_Countrylink1, 4904) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_XPTINTERURBAN);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            160 km/h;
        power:                            2000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_XPTInterurban_PTC1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_XPTInterurban_Countrylink1_directioncheck;
        can_attach_wagon: sw_XPTInterurban_attach;
        purchase: spriteset_XPTInterurban_Countrylink1_Purchase;
        additional_text: string(STR_INFO_XPTINTERURBAN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_XPTInterurban_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        40;
        running_cost_factor:             18;
    }
}

//XPTInterurban_Countrylink2
spriteset(spriteset_XPTInterurban_Countrylink2_Purchase,   "gfx/XPTInterurban_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_XPTInterurban_Countrylink2_Lead,   "gfx/XPTInterurban_Countrylink2.png") {template_old_8(7, 39)}
spriteset(spriteset_XPTInterurban_Countrylink2_Rear,   "gfx/XPTInterurban_Countrylink2.png") {template_old_8(7, 64)}

spriteset(spriteset_XPTInterurban_Countrylink2_DT_Lead,   "gfx/XPTInterurban_Countrylink2.png") {template_old_8(187, 39)}
spriteset(spriteset_XPTInterurban_Countrylink2_DT_Rear,   "gfx/XPTInterurban_Countrylink2.png") {template_old_8(187, 64)}

spriteset(spriteset_XPTInterurban_Countrylink2_Trailer,   "gfx/XPTInterurban_Countrylink2.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_Countrylink2_forward, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_Countrylink2_Lead;
    1: spriteset_XPTInterurban_Countrylink2_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_XPTInterurban_Countrylink2_rev, vehicle_is_flipped){
    0:    spriteset_XPTInterurban_Countrylink2_DT_Lead;
    1: spriteset_XPTInterurban_Countrylink2_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_XPTInterurban_Countrylink2_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_XPTInterurban_Countrylink2_forward;
    1:    sw_XPTInterurban_Countrylink2_rev;
}

item(FEAT_TRAINS, Item_XPTInterurban_Countrylink2, 4905) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_XPTINTERURBAN);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            160 km/h;
        power:                            2000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_XPTInterurban_PTC1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_XPTInterurban_Countrylink2_directioncheck;
        can_attach_wagon: sw_XPTInterurban_attach;
        purchase: spriteset_XPTInterurban_Countrylink2_Purchase;
        additional_text: string(STR_INFO_XPTINTERURBAN);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_XPTInterurban_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        40;
        running_cost_factor:             18;
    }
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_attach, vehicle_type_id){
	Item_ComengXPT_PTC     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengXPT_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengXPT_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengXPT_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengXPT_AN     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengXPT_PTC
spriteset(spriteset_ComengXPT_PTC_Purchase,   "gfx/ComengXPT_PTC.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengXPT_PTC_Lead,   "gfx/ComengXPT_PTC.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengXPT_PTC_Rear,   "gfx/ComengXPT_PTC.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT

spriteset(spriteset_ComengXPT_PTC_Trailer_Lead,   "gfx/ComengXPT_PTC.png") {template_old_8_r(187, 39)}
spriteset(spriteset_ComengXPT_PTC_Trailer_Rear,   "gfx/ComengXPT_PTC.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengXPT_PTC_Trailer,   "gfx/ComengXPT_PTC.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengXPT_PTC_Trailer_Buffet,   "gfx/ComengXPT_PTC.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_PTC_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_PTC_Rear;
    spriteset_ComengXPT_PTC_Lead;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_PTC_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengXPT_PTC_Trailer_Buffet;
  spriteset_ComengXPT_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_PTC_Trailer_Rear, position_in_vehid_chain_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_PTC_Trailer_Rear;
    sw_ComengXPT_PTC_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_PTC_Trailer_Lead, position_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_PTC_Trailer_Lead;
    sw_ComengXPT_PTC_Trailer_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_PTC_solo, num_vehs_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    1:    spriteset_ComengXPT_PTC_Trailer;
    sw_ComengXPT_PTC_Trailer_Lead;
}

item(FEAT_TRAINS, Item_ComengXPT_PTC, 5001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGXPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            180 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_ComengXPT_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengXPT_PTC_last;
        can_attach_wagon: sw_ComengXPT_attach;
        purchase: spriteset_ComengXPT_PTC_Purchase;
        additional_text: string(STR_INFO_COMENGXPT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        sw_ComengXPT_PTC_solo; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor:             18;
    }
}

//ComengXPT_SRA
spriteset(spriteset_ComengXPT_SRA_Purchase,   "gfx/ComengXPT_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengXPT_SRA_Lead,   "gfx/ComengXPT_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengXPT_SRA_Rear,   "gfx/ComengXPT_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT

spriteset(spriteset_ComengXPT_SRA_Trailer_Lead,   "gfx/ComengXPT_SRA.png") {template_old_8_r(187, 39)}
spriteset(spriteset_ComengXPT_SRA_Trailer_Rear,   "gfx/ComengXPT_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengXPT_SRA_Trailer,   "gfx/ComengXPT_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengXPT_SRA_Trailer_Buffet,   "gfx/ComengXPT_SRA.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_SRA_Rear;
    spriteset_ComengXPT_SRA_Lead;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_SRA_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengXPT_SRA_Trailer_Buffet;
  spriteset_ComengXPT_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_SRA_Trailer_Rear, position_in_vehid_chain_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_SRA_Trailer_Rear;
    sw_ComengXPT_SRA_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_SRA_Trailer_Lead, position_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_SRA_Trailer_Lead;
    sw_ComengXPT_SRA_Trailer_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_SRA_solo, num_vehs_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    1:    spriteset_ComengXPT_SRA_Trailer;
    sw_ComengXPT_SRA_Trailer_Lead;
}

item(FEAT_TRAINS, Item_ComengXPT_SRA, 5002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGXPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            180 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_ComengXPT_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengXPT_SRA_last;
        can_attach_wagon: sw_ComengXPT_attach;
        purchase: spriteset_ComengXPT_SRA_Purchase;
        additional_text: string(STR_INFO_COMENGXPT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        sw_ComengXPT_SRA_solo; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor:             18;
    }
}

//ComengXPT_Countrylink1
spriteset(spriteset_ComengXPT_Countrylink1_Purchase,   "gfx/ComengXPT_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengXPT_Countrylink1_Lead,   "gfx/ComengXPT_Countrylink1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengXPT_Countrylink1_Rear,   "gfx/ComengXPT_Countrylink1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT

spriteset(spriteset_ComengXPT_Countrylink1_Trailer_Lead,   "gfx/ComengXPT_Countrylink1.png") {template_old_8_r(187, 39)}
spriteset(spriteset_ComengXPT_Countrylink1_Trailer_Rear,   "gfx/ComengXPT_Countrylink1.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengXPT_Countrylink1_Trailer,   "gfx/ComengXPT_Countrylink1.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengXPT_Countrylink1_Trailer_Buffet,   "gfx/ComengXPT_Countrylink1.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_Countrylink1_Rear;
    spriteset_ComengXPT_Countrylink1_Lead;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengXPT_Countrylink1_Trailer_Buffet;
  spriteset_ComengXPT_Countrylink1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink1_Trailer_Rear, position_in_vehid_chain_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_Countrylink1_Trailer_Rear;
    sw_ComengXPT_Countrylink1_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink1_Trailer_Lead, position_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_Countrylink1_Trailer_Lead;
    sw_ComengXPT_Countrylink1_Trailer_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink1_solo, num_vehs_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    1:    spriteset_ComengXPT_Countrylink1_Trailer;
    sw_ComengXPT_Countrylink1_Trailer_Lead;
}

item(FEAT_TRAINS, Item_ComengXPT_Countrylink1, 5003) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGXPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            180 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_ComengXPT_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengXPT_Countrylink1_last;
        can_attach_wagon: sw_ComengXPT_attach;
        purchase: spriteset_ComengXPT_Countrylink1_Purchase;
        additional_text: string(STR_INFO_COMENGXPT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        sw_ComengXPT_Countrylink1_solo; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor:             18;
    }
}

//ComengXPT_Countrylink2
spriteset(spriteset_ComengXPT_Countrylink2_Purchase,   "gfx/ComengXPT_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengXPT_Countrylink2_Lead,   "gfx/ComengXPT_Countrylink2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengXPT_Countrylink2_Rear,   "gfx/ComengXPT_Countrylink2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT

spriteset(spriteset_ComengXPT_Countrylink2_Trailer_Lead,   "gfx/ComengXPT_Countrylink2.png") {template_old_8_r(187, 39)}
spriteset(spriteset_ComengXPT_Countrylink2_Trailer_Rear,   "gfx/ComengXPT_Countrylink2.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengXPT_Countrylink2_Trailer,   "gfx/ComengXPT_Countrylink2.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengXPT_Countrylink2_Trailer_Buffet,   "gfx/ComengXPT_Countrylink2.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_Countrylink2_Rear;
    spriteset_ComengXPT_Countrylink2_Lead;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengXPT_Countrylink2_Trailer_Buffet;
  spriteset_ComengXPT_Countrylink2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink2_Trailer_Rear, position_in_vehid_chain_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_Countrylink2_Trailer_Rear;
    sw_ComengXPT_Countrylink2_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink2_Trailer_Lead, position_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_Countrylink2_Trailer_Lead;
    sw_ComengXPT_Countrylink2_Trailer_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_Countrylink2_solo, num_vehs_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    1:    spriteset_ComengXPT_Countrylink2_Trailer;
    sw_ComengXPT_Countrylink2_Trailer_Lead;
}

item(FEAT_TRAINS, Item_ComengXPT_Countrylink2, 5004) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGXPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            180 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_ComengXPT_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengXPT_Countrylink2_last;
        can_attach_wagon: sw_ComengXPT_attach;
        purchase: spriteset_ComengXPT_Countrylink2_Purchase;
        additional_text: string(STR_INFO_COMENGXPT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        sw_ComengXPT_Countrylink2_solo; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor:             18;
    }
}

//ComengXPT_AN
spriteset(spriteset_ComengXPT_AN_Purchase,   "gfx/ComengXPT_AN.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengXPT_AN_Lead,   "gfx/ComengXPT_AN.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengXPT_AN_Rear,   "gfx/ComengXPT_AN.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT

spriteset(spriteset_ComengXPT_AN_Trailer_Lead,   "gfx/ComengXPT_AN.png") {template_old_8_r(187, 39)}
spriteset(spriteset_ComengXPT_AN_Trailer_Rear,   "gfx/ComengXPT_AN.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengXPT_AN_Trailer,   "gfx/ComengXPT_AN.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengXPT_AN_Trailer_Buffet,   "gfx/ComengXPT_AN.png") {template_old_8(187, 89)}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_AN_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_AN_Rear;
    spriteset_ComengXPT_AN_Lead;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_AN_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengXPT_AN_Trailer_Buffet;
  spriteset_ComengXPT_AN_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_AN_Trailer_Rear, position_in_vehid_chain_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_AN_Trailer_Rear;
    sw_ComengXPT_AN_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_AN_Trailer_Lead, position_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_ComengXPT_AN_Trailer_Lead;
    sw_ComengXPT_AN_Trailer_Rear;
}

switch(FEAT_TRAINS, SELF, sw_ComengXPT_AN_solo, num_vehs_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    1:    spriteset_ComengXPT_AN_Trailer;
    sw_ComengXPT_AN_Trailer_Lead;
}

item(FEAT_TRAINS, Item_ComengXPT_AN, 5005) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_COMENGXPT);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            180 km/h;
        power:                            4000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     25;
        running_cost_factor:             143;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_ComengXPT_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengXPT_AN_last;
        can_attach_wagon: sw_ComengXPT_attach;
        purchase: spriteset_ComengXPT_AN_Purchase;
        additional_text: string(STR_INFO_COMENGXPT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        sw_ComengXPT_AN_solo; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor:             18;
    }
}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_attach, vehicle_type_id){
	Item_HPTIntrastate_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HPTIntrastate_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HPTIntrastate_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HPTIntrastate_Countrylink3     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//HPTIntrastate_SRA
spriteset(spriteset_HPTIntrastate_SRA_Purchase,   "gfx/HPTIntrastate_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTIntrastate_SRA_Lead,   "gfx/HPTIntrastate_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_HPTIntrastate_SRA_Rear,   "gfx/HPTIntrastate_SRA.png") {template_old_8(7, 64)}

spriteset(spriteset_HPTIntrastate_SRA_DT_Lead,   "gfx/HPTIntrastate_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_HPTIntrastate_SRA_DT_Rear,   "gfx/HPTIntrastate_SRA.png") {template_old_8(187, 64)}

spriteset(spriteset_HPTIntrastate_SRA_Trailer,   "gfx/HPTIntrastate_SRA.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_SRA_forward, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_SRA_Lead;
    1: spriteset_HPTIntrastate_SRA_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_SRA_rev, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_SRA_DT_Lead;
    1: spriteset_HPTIntrastate_SRA_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_HPTIntrastate_SRA_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_HPTIntrastate_SRA_forward;
    1:    sw_HPTIntrastate_SRA_rev;
}

item(FEAT_TRAINS, Item_HPTIntrastate_SRA, 5101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTRASTATE);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        68 ton;
        speed:                            180 km/h;
        power:                            4220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             160;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_HPTIntrastate_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTIntrastate_SRA_directioncheck;
        can_attach_wagon: sw_HPTIntrastate_attach;
        purchase: spriteset_HPTIntrastate_SRA_Purchase;
        additional_text: string(STR_INFO_HPTINTRASTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTIntrastate_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        45;
        running_cost_factor:             20;
    }
}

//HPTIntrastate_Countrylink1
spriteset(spriteset_HPTIntrastate_Countrylink1_Purchase,   "gfx/HPTIntrastate_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTIntrastate_Countrylink1_Lead,   "gfx/HPTIntrastate_Countrylink1.png") {template_old_8(7, 39)}
spriteset(spriteset_HPTIntrastate_Countrylink1_Rear,   "gfx/HPTIntrastate_Countrylink1.png") {template_old_8(7, 64)}

spriteset(spriteset_HPTIntrastate_Countrylink1_DT_Lead,   "gfx/HPTIntrastate_Countrylink1.png") {template_old_8(187, 39)}
spriteset(spriteset_HPTIntrastate_Countrylink1_DT_Rear,   "gfx/HPTIntrastate_Countrylink1.png") {template_old_8(187, 64)}

spriteset(spriteset_HPTIntrastate_Countrylink1_Trailer,   "gfx/HPTIntrastate_Countrylink1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_Countrylink1_forward, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_Countrylink1_Lead;
    1: spriteset_HPTIntrastate_Countrylink1_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_Countrylink1_rev, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_Countrylink1_DT_Lead;
    1: spriteset_HPTIntrastate_Countrylink1_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_HPTIntrastate_Countrylink1_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_HPTIntrastate_Countrylink1_forward;
    1:    sw_HPTIntrastate_Countrylink1_rev;
}

item(FEAT_TRAINS, Item_HPTIntrastate_Countrylink1, 5102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTRASTATE);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        68 ton;
        speed:                            180 km/h;
        power:                            4220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             160;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_HPTIntrastate_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTIntrastate_Countrylink1_directioncheck;
        can_attach_wagon: sw_HPTIntrastate_attach;
        purchase: spriteset_HPTIntrastate_Countrylink1_Purchase;
        additional_text: string(STR_INFO_HPTINTRASTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTIntrastate_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        45;
        running_cost_factor:             20;
    }
}

//HPTIntrastate_Countrylink2
spriteset(spriteset_HPTIntrastate_Countrylink2_Purchase,   "gfx/HPTIntrastate_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTIntrastate_Countrylink2_Lead,   "gfx/HPTIntrastate_Countrylink2.png") {template_old_8(7, 39)}
spriteset(spriteset_HPTIntrastate_Countrylink2_Rear,   "gfx/HPTIntrastate_Countrylink2.png") {template_old_8(7, 64)}

spriteset(spriteset_HPTIntrastate_Countrylink2_DT_Lead,   "gfx/HPTIntrastate_Countrylink2.png") {template_old_8(187, 39)}
spriteset(spriteset_HPTIntrastate_Countrylink2_DT_Rear,   "gfx/HPTIntrastate_Countrylink2.png") {template_old_8(187, 64)}

spriteset(spriteset_HPTIntrastate_Countrylink2_Trailer,   "gfx/HPTIntrastate_Countrylink2.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_Countrylink2_forward, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_Countrylink2_Lead;
    1: spriteset_HPTIntrastate_Countrylink2_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_Countrylink2_rev, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_Countrylink2_DT_Lead;
    1: spriteset_HPTIntrastate_Countrylink2_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_HPTIntrastate_Countrylink2_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_HPTIntrastate_Countrylink2_forward;
    1:    sw_HPTIntrastate_Countrylink2_rev;
}

item(FEAT_TRAINS, Item_HPTIntrastate_Countrylink2, 5103) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTRASTATE);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        68 ton;
        speed:                            180 km/h;
        power:                            4220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             160;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_HPTIntrastate_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTIntrastate_Countrylink2_directioncheck;
        can_attach_wagon: sw_HPTIntrastate_attach;
        purchase: spriteset_HPTIntrastate_Countrylink2_Purchase;
        additional_text: string(STR_INFO_HPTINTRASTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTIntrastate_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        45;
        running_cost_factor:             20;
    }
}

//HPTIntrastate_Countrylink3
spriteset(spriteset_HPTIntrastate_Countrylink3_Purchase,   "gfx/HPTIntrastate_Countrylink3.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTIntrastate_Countrylink3_Lead,   "gfx/HPTIntrastate_Countrylink3.png") {template_old_8(7, 39)}
spriteset(spriteset_HPTIntrastate_Countrylink3_Rear,   "gfx/HPTIntrastate_Countrylink3.png") {template_old_8(7, 64)}

spriteset(spriteset_HPTIntrastate_Countrylink3_DT_Lead,   "gfx/HPTIntrastate_Countrylink3.png") {template_old_8(187, 39)}
spriteset(spriteset_HPTIntrastate_Countrylink3_DT_Rear,   "gfx/HPTIntrastate_Countrylink3.png") {template_old_8(187, 64)}

spriteset(spriteset_HPTIntrastate_Countrylink3_Trailer,   "gfx/HPTIntrastate_Countrylink3.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_Countrylink3_forward, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_Countrylink3_Lead;
    1: spriteset_HPTIntrastate_Countrylink3_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_HPTIntrastate_Countrylink3_rev, vehicle_is_flipped){
    0:    spriteset_HPTIntrastate_Countrylink3_DT_Lead;
    1: spriteset_HPTIntrastate_Countrylink3_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_HPTIntrastate_Countrylink3_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_HPTIntrastate_Countrylink3_forward;
    1:    sw_HPTIntrastate_Countrylink3_rev;
}

item(FEAT_TRAINS, Item_HPTIntrastate_Countrylink3, 5104) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTRASTATE);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        68 ton;
        speed:                            180 km/h;
        power:                            4220 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     26;
        running_cost_factor:             160;
        cargo_capacity:                  40;
        loading_speed: 10;

        variant_group: Item_HPTIntrastate_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTIntrastate_Countrylink3_directioncheck;
        can_attach_wagon: sw_HPTIntrastate_attach;
        purchase: spriteset_HPTIntrastate_Countrylink3_Purchase;
        additional_text: string(STR_INFO_HPTINTRASTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTIntrastate_Countrylink3_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
        weight:                        45;
        running_cost_factor:             20;
    }
}

switch(FEAT_TRAINS, SELF, sw_HPTInterState_attach, vehicle_type_id){
	Item_HPTInterState_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HPTInterState_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HPTInterState_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HPTInterState_Countrylink3     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//HPTInterState_SRA
spriteset(spriteset_HPTInterState_SRA_Purchase,   "gfx/HPTInterState_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTInterState_SRA_Lead,   "gfx/HPTInterState_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HPTInterState_SRA_Rear,   "gfx/HPTInterState_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HPTInterState_SRA_Trailer,   "gfx/HPTInterState_SRA.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTInterState_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_HPTInterState_SRA_Rear;
    spriteset_HPTInterState_SRA_Lead;
}

item(FEAT_TRAINS, Item_HPTInterState_SRA, 5121) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTERSTATE);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        72 ton;
        speed:                            210 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     27;
        running_cost_factor:             180;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_HPTInterState_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTInterState_SRA_last;
        can_attach_wagon: sw_HPTInterState_attach;
        purchase: spriteset_HPTInterState_SRA_Purchase;
        additional_text: string(STR_INFO_HPTINTERSTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTInterState_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
		weight:                        45;
		running_cost_factor:             45;
    }
}

//HPTInterState_Countrylink1
spriteset(spriteset_HPTInterState_Countrylink1_Purchase,   "gfx/HPTInterState_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTInterState_Countrylink1_Lead,   "gfx/HPTInterState_Countrylink1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HPTInterState_Countrylink1_Rear,   "gfx/HPTInterState_Countrylink1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HPTInterState_Countrylink1_Trailer,   "gfx/HPTInterState_Countrylink1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTInterState_Countrylink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_HPTInterState_Countrylink1_Rear;
    spriteset_HPTInterState_Countrylink1_Lead;
}

item(FEAT_TRAINS, Item_HPTInterState_Countrylink1, 5122) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTERSTATE);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        72 ton;
        speed:                            210 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     27;
        running_cost_factor:             180;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_HPTInterState_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTInterState_Countrylink1_last;
        can_attach_wagon: sw_HPTInterState_attach;
        purchase: spriteset_HPTInterState_Countrylink1_Purchase;
        additional_text: string(STR_INFO_HPTINTERSTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTInterState_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
		weight:                        45;
		running_cost_factor:             45;
    }
}

//HPTInterState_Countrylink2
spriteset(spriteset_HPTInterState_Countrylink2_Purchase,   "gfx/HPTInterState_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTInterState_Countrylink2_Lead,   "gfx/HPTInterState_Countrylink2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HPTInterState_Countrylink2_Rear,   "gfx/HPTInterState_Countrylink2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HPTInterState_Countrylink2_Trailer,   "gfx/HPTInterState_Countrylink2.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTInterState_Countrylink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_HPTInterState_Countrylink2_Rear;
    spriteset_HPTInterState_Countrylink2_Lead;
}

item(FEAT_TRAINS, Item_HPTInterState_Countrylink2, 5123) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTERSTATE);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        72 ton;
        speed:                            210 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     27;
        running_cost_factor:             180;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_HPTInterState_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTInterState_Countrylink2_last;
        can_attach_wagon: sw_HPTInterState_attach;
        purchase: spriteset_HPTInterState_Countrylink2_Purchase;
        additional_text: string(STR_INFO_HPTINTERSTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTInterState_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
		weight:                        45;
		running_cost_factor:             45;
    }
}

//HPTInterState_Countrylink3
spriteset(spriteset_HPTInterState_Countrylink3_Purchase,   "gfx/HPTInterState_Countrylink3.png") {template_purchase(7, 21)}
spriteset(spriteset_HPTInterState_Countrylink3_Lead,   "gfx/HPTInterState_Countrylink3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HPTInterState_Countrylink3_Rear,   "gfx/HPTInterState_Countrylink3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HPTInterState_Countrylink3_Trailer,   "gfx/HPTInterState_Countrylink3.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_HPTInterState_Countrylink3_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_HPTInterState_Countrylink3_Rear;
    spriteset_HPTInterState_Countrylink3_Lead;
}

item(FEAT_TRAINS, Item_HPTInterState_Countrylink3, 5124) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_HPTINTERSTATE);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        72 ton;
        speed:                            210 km/h;
        power:                            4500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     27;
        running_cost_factor:             180;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_HPTInterState_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HPTInterState_Countrylink3_last;
        can_attach_wagon: sw_HPTInterState_attach;
        purchase: spriteset_HPTInterState_Countrylink3_Purchase;
        additional_text: string(STR_INFO_HPTINTERSTATE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_HPTInterState_Countrylink3_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
		weight:                        45;
		running_cost_factor:             45;
    }
}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_attach, vehicle_type_id){
    Item_EXP_DMU_DTT_Liv1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_EXP_DMU_DTT_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Diesel Tilt Train
//Liv1
spriteset(spriteset_EXP_DMU_DTT_Liv1_Purchase,   "gfx/EXP_DMU_DTT_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_DTT_Liv1_Lead,   "gfx/EXP_DMU_DTT_Liv1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_DTT_Liv1_Rear,   "gfx/EXP_DMU_DTT_Liv1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_DTT_Liv1_Mid,   "gfx/EXP_DMU_DTT_Liv1.png") {template_old_8(7, 89)}
spriteset(spriteset_EXP_DMU_DTT_Liv1_Trailer,   "gfx/EXP_DMU_DTT_Liv1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_Liv1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_DTT_Liv1_Rear;
    spriteset_EXP_DMU_DTT_Liv1_Lead;
}

item(FEAT_TRAINS, Item_EXP_DMU_DTT_Liv1, 5201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_DTT);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        60 ton;
        speed:                            210 km/h;
        power:                            3640 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             170;
        cargo_capacity:                  0;
        loading_speed: 5;

        variant_group: Item_EXP_DMU_DTT_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_DTT_Liv1_last;
        can_attach_wagon: sw_EXP_DMU_DTT_attach;
        purchase: spriteset_EXP_DMU_DTT_Liv1_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_DTT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_DTT_Liv1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
		weight:                        36;
		running_cost_factor:             21;
    }
}

//Diesel Tilt Train
//Liv2
spriteset(spriteset_EXP_DMU_DTT_Liv2_Purchase,   "gfx/EXP_DMU_DTT_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_DMU_DTT_Liv2_Lead,   "gfx/EXP_DMU_DTT_Liv2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_DMU_DTT_Liv2_Rear,   "gfx/EXP_DMU_DTT_Liv2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_DMU_DTT_Liv2_Mid,   "gfx/EXP_DMU_DTT_Liv2.png") {template_old_8(7, 89)}
spriteset(spriteset_EXP_DMU_DTT_Liv2_Trailer,   "gfx/EXP_DMU_DTT_Liv2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_DMU_DTT_Liv2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_DMU_DTT_Liv2_Rear;
    spriteset_EXP_DMU_DTT_Liv2_Lead;
}

item(FEAT_TRAINS, Item_EXP_DMU_DTT_Liv2, 5202) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        RAIL;
        running_cost_base:                RUNNING_COST_DIESEL;
        engine_class:                     ENGINE_CLASS_DIESEL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_DIESEL;

        name:                            string(STR_NAME_EXP_DMU_DTT);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        60 ton;
        speed:                            210 km/h;
        power:                            3640 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             170;
        cargo_capacity:                  0;
        loading_speed: 5;

        variant_group: Item_EXP_DMU_DTT_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_DMU_DTT_Liv2_last;
        can_attach_wagon: sw_EXP_DMU_DTT_attach;
        purchase: spriteset_EXP_DMU_DTT_Liv2_Purchase;
        additional_text: string(STR_INFO_EXP_DMU_DTT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_DMU_DTT_Liv2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (80/param_capacity_mod);
        power:                            0;
		weight:                        36;
		running_cost_factor:             21;
    }
}

/////////////////
//Suburban EMUs//
/////////////////

switch(FEAT_TRAINS, SELF, sw_Tait_attach, vehicle_type_id){
    Item_Tait_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Tait_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Tait_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Tait_Liv1
spriteset(spriteset_Tait_Liv1_purchase,   "gfx/Tait_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_Tait_Liv1_Motor_lead,   "gfx/Tait_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Tait_Liv1_Motor_rear,   "gfx/Tait_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Tait_Liv1_DrivingTrailer_lead,   "gfx/Tait_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_Tait_Liv1_DrivingTrailer_rear,   "gfx/Tait_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_Tait_Liv1_Trailer,   "gfx/Tait_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_Tait_Liv1_NonControlMotor,   "gfx/Tait_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_Tait_Liv1_NonControlMotor_r,   "gfx/Tait_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Tait_Liv1_NonControlMotor_r;
    return spriteset_Tait_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Tait_Liv1_NonControlMotor;
    return spriteset_Tait_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv1_NonControlMotor_r;
    return spriteset_Tait_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv1_Trailer;
    return spriteset_Tait_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Tait_Liv1_NonControlMotor;
    return spriteset_Tait_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv1_pantocheck_at_1_r;
    return sw_Tait_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Tait_Liv1_Trailer;
    return sw_Tait_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv1_pantocheck_at_2_r;
    return sw_Tait_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Tait_Liv1_Trailer;
    3 : sw_Tait_Liv1_pantocheck_at_1_r;
    4 : sw_Tait_Liv1_sidecheck_4_r;
    5 : sw_Tait_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_Tait_Liv1_sidecheck_6_r;
    return sw_Tait_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Tait_Liv1_NonControlMotor_r;
    return spriteset_Tait_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Tait_Liv1_NonControlMotor;
    return spriteset_Tait_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv1_NonControlMotor_r;
    return spriteset_Tait_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Tait_Liv1_NonControlMotor;
    return spriteset_Tait_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv1_pantocheck_at_1;
    return sw_Tait_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv1_pantocheck_at_1;
    return spriteset_Tait_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv1_pantocheck_at_2;
    return sw_Tait_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Tait_Liv1_Trailer;
    3 : sw_Tait_Liv1_pantocheck_at_1;
    4 : sw_Tait_Liv1_sidecheck_4;
    5 : sw_Tait_Liv1_pantocheck_at_2;
    6 .. 7 : sw_Tait_Liv1_sidecheck_6;
    return sw_Tait_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Tait_Liv1_Motor_lead; //Panto
    return spriteset_Tait_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_Tait_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_Tait_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Tait_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Tait_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_Tait_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Tait_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_Tait_Liv1_Motor_lead;        //Front panto
    return spriteset_Tait_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Tait_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_Tait_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_Tait_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_Tait_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Tait_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_Tait_Liv1_frontcheck; //We are going forwards
    return sw_Tait_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Tait_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_Tait_Liv1_lencheck;
    return sw_Tait_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_Tait_Liv1, 10100) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAIT);
        introduction_date:                date(1919,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            80 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  87/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tait_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Tait_Liv1_directioncheck;
        can_attach_wagon: sw_Tait_attach ;
        purchase: spriteset_Tait_Liv1_purchase;
        additional_text: string(STR_INFO_TAIT);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Tait_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (87/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        35;
		running_cost_factor:             45;

    }
}

//Tait_Liv2
spriteset(spriteset_Tait_Liv2_purchase,   "gfx/Tait_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_Tait_Liv2_Motor_lead,   "gfx/Tait_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Tait_Liv2_Motor_rear,   "gfx/Tait_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Tait_Liv2_DrivingTrailer_lead,   "gfx/Tait_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_Tait_Liv2_DrivingTrailer_rear,   "gfx/Tait_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_Tait_Liv2_Trailer,   "gfx/Tait_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_Tait_Liv2_NonControlMotor,   "gfx/Tait_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_Tait_Liv2_NonControlMotor_r,   "gfx/Tait_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Tait_Liv2_NonControlMotor_r;
    return spriteset_Tait_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Tait_Liv2_NonControlMotor;
    return spriteset_Tait_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv2_NonControlMotor_r;
    return spriteset_Tait_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv2_Trailer;
    return spriteset_Tait_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Tait_Liv2_NonControlMotor;
    return spriteset_Tait_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv2_pantocheck_at_1_r;
    return sw_Tait_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Tait_Liv2_Trailer;
    return sw_Tait_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv2_pantocheck_at_2_r;
    return sw_Tait_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Tait_Liv2_Trailer;
    3 : sw_Tait_Liv2_pantocheck_at_1_r;
    4 : sw_Tait_Liv2_sidecheck_4_r;
    5 : sw_Tait_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_Tait_Liv2_sidecheck_6_r;
    return sw_Tait_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Tait_Liv2_NonControlMotor_r;
    return spriteset_Tait_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Tait_Liv2_NonControlMotor;
    return spriteset_Tait_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv2_NonControlMotor_r;
    return spriteset_Tait_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Tait_Liv2_NonControlMotor;
    return spriteset_Tait_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv2_pantocheck_at_1;
    return sw_Tait_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv2_pantocheck_at_1;
    return spriteset_Tait_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv2_pantocheck_at_2;
    return sw_Tait_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Tait_Liv2_Trailer;
    3 : sw_Tait_Liv2_pantocheck_at_1;
    4 : sw_Tait_Liv2_sidecheck_4;
    5 : sw_Tait_Liv2_pantocheck_at_2;
    6 .. 7 : sw_Tait_Liv2_sidecheck_6;
    return sw_Tait_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Tait_Liv2_Motor_lead; //Panto
    return spriteset_Tait_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_Tait_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_Tait_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Tait_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Tait_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_Tait_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Tait_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_Tait_Liv2_Motor_lead;        //Front panto
    return spriteset_Tait_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Tait_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_Tait_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_Tait_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_Tait_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Tait_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_Tait_Liv2_frontcheck; //We are going forwards
    return sw_Tait_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Tait_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_Tait_Liv2_lencheck;
    return sw_Tait_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_Tait_Liv2, 10101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAIT);
        introduction_date:                date(1919,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            80 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  87/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tait_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Tait_Liv2_directioncheck;
        can_attach_wagon: sw_Tait_attach ;
        purchase: spriteset_Tait_Liv2_purchase;
        additional_text: string(STR_INFO_TAIT);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Tait_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (87/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        35;
		running_cost_factor:             45;

    }
}

//Tait_Liv3
spriteset(spriteset_Tait_Liv3_purchase,   "gfx/Tait_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_Tait_Liv3_Motor_lead,   "gfx/Tait_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Tait_Liv3_Motor_rear,   "gfx/Tait_Liv3.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Tait_Liv3_DrivingTrailer_lead,   "gfx/Tait_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_Tait_Liv3_DrivingTrailer_rear,   "gfx/Tait_Liv3.png") {template_8(187, 69)}
spriteset(spriteset_Tait_Liv3_Trailer,   "gfx/Tait_Liv3.png") {template_8(7, 99)}
spriteset(spriteset_Tait_Liv3_NonControlMotor,   "gfx/Tait_Liv3.png") {template_8(187, 99)}
spriteset(spriteset_Tait_Liv3_NonControlMotor_r,   "gfx/Tait_Liv3.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Tait_Liv3_NonControlMotor_r;
    return spriteset_Tait_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Tait_Liv3_NonControlMotor;
    return spriteset_Tait_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv3_NonControlMotor_r;
    return spriteset_Tait_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv3_Trailer;
    return spriteset_Tait_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Tait_Liv3_NonControlMotor;
    return spriteset_Tait_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv3_pantocheck_at_1_r;
    return sw_Tait_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Tait_Liv3_Trailer;
    return sw_Tait_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv3_pantocheck_at_2_r;
    return sw_Tait_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Tait_Liv3_Trailer;
    3 : sw_Tait_Liv3_pantocheck_at_1_r;
    4 : sw_Tait_Liv3_sidecheck_4_r;
    5 : sw_Tait_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_Tait_Liv3_sidecheck_6_r;
    return sw_Tait_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Tait_Liv3_NonControlMotor_r;
    return spriteset_Tait_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Tait_Liv3_NonControlMotor;
    return spriteset_Tait_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Tait_Liv3_NonControlMotor_r;
    return spriteset_Tait_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Tait_Liv3_NonControlMotor;
    return spriteset_Tait_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv3_pantocheck_at_1;
    return sw_Tait_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv3_pantocheck_at_1;
    return spriteset_Tait_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Tait_Liv3_pantocheck_at_2;
    return sw_Tait_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Tait_Liv3_Trailer;
    3 : sw_Tait_Liv3_pantocheck_at_1;
    4 : sw_Tait_Liv3_sidecheck_4;
    5 : sw_Tait_Liv3_pantocheck_at_2;
    6 .. 7 : sw_Tait_Liv3_sidecheck_6;
    return sw_Tait_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Tait_Liv3_Motor_lead; //Panto
    return spriteset_Tait_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_Tait_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_Tait_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Tait_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Tait_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_Tait_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Tait_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_Tait_Liv3_Motor_lead;        //Front panto
    return spriteset_Tait_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Tait_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_Tait_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Tait_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_Tait_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_Tait_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Tait_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_Tait_Liv3_frontcheck; //We are going forwards
    return sw_Tait_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Tait_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_Tait_Liv3_lencheck;
    return sw_Tait_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_Tait_Liv3, 10102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAIT);
        introduction_date:                date(1919,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        35 ton;
        speed:                            80 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  87/param_capacity_mod;
        loading_speed: 25;

        variant_group: Item_Tait_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Tait_Liv3_directioncheck;
        can_attach_wagon: sw_Tait_attach ;
        purchase: spriteset_Tait_Liv3_purchase;
        additional_text: string(STR_INFO_TAIT);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Tait_Liv3_revcheck ;
        length                      : 8;
        cargo_capacity              : (87/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        35;
		running_cost_factor:             45;

    }
}

//Bradfield
//CC1
spriteset(spriteset_SSD_EMU_Bradfield_purchase,   "gfx/SSD_EMU_Bradfield.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Bradfield_Motor_lead,   "gfx/SSD_EMU_Bradfield.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Bradfield_Motor_rear,   "gfx/SSD_EMU_Bradfield.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Bradfield_DrivingTrailer_lead,   "gfx/SSD_EMU_Bradfield.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Bradfield_DrivingTrailer_rear,   "gfx/SSD_EMU_Bradfield.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Bradfield_Trailer,   "gfx/SSD_EMU_Bradfield.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Bradfield_NonControlMotor,   "gfx/SSD_EMU_Bradfield.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Bradfield_NonControlMotor_r,   "gfx/SSD_EMU_Bradfield.png") {template_old_8_r(187, 89)}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_SydneyFirstGen_Attach, vehicle_type_id){
    Item_SSD_EMU_Bradfield    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Bradfield_Stripes    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Standard    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Standard_Lined    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Standard_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Standard_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Standard_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Standard_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_Tulloch    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Tulloch_Lined    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Tulloch_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Tulloch_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Tulloch_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Tulloch_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_Bare    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Bradfield_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Bradfield_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Bradfield_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Bradfield_Trailer;
    return spriteset_SSD_EMU_Bradfield_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Bradfield_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_pantocheck_at_1_r;
    return sw_SSD_EMU_Bradfield_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Bradfield_Trailer;
    return sw_SSD_EMU_Bradfield_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_pantocheck_at_2_r;
    return sw_SSD_EMU_Bradfield_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Bradfield_Trailer;
    3 : sw_SSD_EMU_Bradfield_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Bradfield_sidecheck_4_r;
    5 : sw_SSD_EMU_Bradfield_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Bradfield_sidecheck_6_r;
    return sw_SSD_EMU_Bradfield_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Bradfield_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Bradfield_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Bradfield_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Bradfield_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_pantocheck_at_1;
    return sw_SSD_EMU_Bradfield_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_pantocheck_at_1;
    return spriteset_SSD_EMU_Bradfield_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_pantocheck_at_2;
    return sw_SSD_EMU_Bradfield_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Bradfield_Trailer;
    3 : sw_SSD_EMU_Bradfield_pantocheck_at_1;
    4 : sw_SSD_EMU_Bradfield_sidecheck_4;
    5 : sw_SSD_EMU_Bradfield_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Bradfield_sidecheck_6;
    return sw_SSD_EMU_Bradfield_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Bradfield_Motor_lead; //Panto
    return spriteset_SSD_EMU_Bradfield_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Bradfield_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Bradfield_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Bradfield_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Bradfield_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Bradfield_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Bradfield_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Bradfield_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Bradfield_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Bradfield_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Bradfield_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Bradfield_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Bradfield_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Bradfield_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Bradfield_frontcheck; //We are going forwards
    return sw_SSD_EMU_Bradfield_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Bradfield_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Bradfield_lencheck;
    return sw_SSD_EMU_Bradfield_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Bradfield, 10200) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_BRADFIELD);
        introduction_date:                date(1921,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            80 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 15;

//        variant_group: Item_SSD_EMU_Bradfield;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Bradfield_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Bradfield_purchase;
        additional_text: string(STR_INFO_SSD_EMU_BRADFIELD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Bradfield_revcheck ;
        length                      : 8;
        cargo_capacity              : (88/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             50;

    }
}

//Bradfield_Stripes
//CC1
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_purchase,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_Motor_lead,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_Motor_rear,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_DrivingTrailer_lead,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_DrivingTrailer_rear,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_Trailer,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor_r,   "gfx/SSD_EMU_Bradfield_Stripes.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
    return spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1_r;
    return sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
    return sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2_r;
    return sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
    3 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Bradfield_Stripes_sidecheck_4_r;
    5 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Bradfield_Stripes_sidecheck_6_r;
    return sw_SSD_EMU_Bradfield_Stripes_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor_r;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Bradfield_Stripes_NonControlMotor;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1;
    return sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1;
    return spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2;
    return sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Bradfield_Stripes_Trailer;
    3 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_1;
    4 : sw_SSD_EMU_Bradfield_Stripes_sidecheck_4;
    5 : sw_SSD_EMU_Bradfield_Stripes_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Bradfield_Stripes_sidecheck_6;
    return sw_SSD_EMU_Bradfield_Stripes_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Bradfield_Stripes_Motor_lead; //Panto
    return spriteset_SSD_EMU_Bradfield_Stripes_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Bradfield_Stripes_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Bradfield_Stripes_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Bradfield_Stripes_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Bradfield_Stripes_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Bradfield_Stripes_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Bradfield_Stripes_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Bradfield_Stripes_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Bradfield_Stripes_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Bradfield_Stripes_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Bradfield_Stripes_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Bradfield_Stripes_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Bradfield_Stripes_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Bradfield_Stripes_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Bradfield_Stripes_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Bradfield_Stripes_frontcheck; //We are going forwards
    return sw_SSD_EMU_Bradfield_Stripes_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Bradfield_Stripes_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Bradfield_Stripes_lencheck;
    return sw_SSD_EMU_Bradfield_Stripes_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Bradfield_Stripes, 10201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_BRADFIELD);
        introduction_date:                date(1921,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            80 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 15;

        variant_group: Item_SSD_EMU_Bradfield;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Bradfield_Stripes_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Bradfield_Stripes_purchase;
        additional_text: string(STR_INFO_SSD_EMU_BRADFIELD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Bradfield_Stripes_revcheck ;
        length                      : 8;
        cargo_capacity              : (88/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;

    }
}

//Standard
spriteset(spriteset_SSD_EMU_Standard_purchase,   "gfx/SSD_EMU_Standard.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Standard_Motor_lead,   "gfx/SSD_EMU_Standard.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Standard_Motor_rear,   "gfx/SSD_EMU_Standard.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Standard_DrivingTrailer_lead,   "gfx/SSD_EMU_Standard.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Standard_DrivingTrailer_rear,   "gfx/SSD_EMU_Standard.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Standard_Trailer,   "gfx/SSD_EMU_Standard.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Standard_NonControlMotor,   "gfx/SSD_EMU_Standard.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Standard_NonControlMotor_r,   "gfx/SSD_EMU_Standard.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Trailer;
    return spriteset_SSD_EMU_Standard_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_pantocheck_at_1_r;
    return sw_SSD_EMU_Standard_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Standard_Trailer;
    return sw_SSD_EMU_Standard_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_pantocheck_at_2_r;
    return sw_SSD_EMU_Standard_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_Trailer;
    3 : sw_SSD_EMU_Standard_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Standard_sidecheck_4_r;
    5 : sw_SSD_EMU_Standard_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Standard_sidecheck_6_r;
    return sw_SSD_EMU_Standard_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_pantocheck_at_1;
    return sw_SSD_EMU_Standard_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_pantocheck_at_1;
    return spriteset_SSD_EMU_Standard_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_pantocheck_at_2;
    return sw_SSD_EMU_Standard_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_Trailer;
    3 : sw_SSD_EMU_Standard_pantocheck_at_1;
    4 : sw_SSD_EMU_Standard_sidecheck_4;
    5 : sw_SSD_EMU_Standard_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Standard_sidecheck_6;
    return sw_SSD_EMU_Standard_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Standard_Motor_lead; //Panto
    return spriteset_SSD_EMU_Standard_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Standard_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Standard_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Standard_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Standard_frontcheck; //We are going forwards
    return sw_SSD_EMU_Standard_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Standard_lencheck;
    return sw_SSD_EMU_Standard_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Standard, 10250) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_STANDARD);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            100 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 30;

//        variant_group: Item_SSD_EMU_Standard;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Standard_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Standard_purchase;
        additional_text: string(STR_INFO_SSD_EMU_STANDARD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Standard_revcheck ;
        length                      : 8;
        cargo_capacity              : (85/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;
    }
}

//Standard_Lined
spriteset(spriteset_SSD_EMU_Standard_Lined_purchase,   "gfx/SSD_EMU_Standard_Lined.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Standard_Lined_Motor_lead,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Standard_Lined_Motor_rear,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Standard_Lined_DrivingTrailer_lead,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Standard_Lined_DrivingTrailer_rear,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Standard_Lined_Trailer,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Standard_Lined_NonControlMotor,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Standard_Lined_NonControlMotor_r,   "gfx/SSD_EMU_Standard_Lined.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Lined_Trailer;
    return spriteset_SSD_EMU_Standard_Lined_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Lined_pantocheck_at_1_r;
    return sw_SSD_EMU_Standard_Lined_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Standard_Lined_Trailer;
    return sw_SSD_EMU_Standard_Lined_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Lined_pantocheck_at_2_r;
    return sw_SSD_EMU_Standard_Lined_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_Lined_Trailer;
    3 : sw_SSD_EMU_Standard_Lined_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Standard_Lined_sidecheck_4_r;
    5 : sw_SSD_EMU_Standard_Lined_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Standard_Lined_sidecheck_6_r;
    return sw_SSD_EMU_Standard_Lined_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Lined_pantocheck_at_1;
    return sw_SSD_EMU_Standard_Lined_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Lined_pantocheck_at_1;
    return spriteset_SSD_EMU_Standard_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Lined_pantocheck_at_2;
    return sw_SSD_EMU_Standard_Lined_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_Lined_Trailer;
    3 : sw_SSD_EMU_Standard_Lined_pantocheck_at_1;
    4 : sw_SSD_EMU_Standard_Lined_sidecheck_4;
    5 : sw_SSD_EMU_Standard_Lined_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Standard_Lined_sidecheck_6;
    return sw_SSD_EMU_Standard_Lined_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Standard_Lined_Motor_lead; //Panto
    return spriteset_SSD_EMU_Standard_Lined_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_Lined_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Standard_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_Lined_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_Lined_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_Lined_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_Lined_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Standard_Lined_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Standard_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_Lined_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_Lined_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Lined_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_Lined_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_Lined_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_Lined_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Standard_Lined_frontcheck; //We are going forwards
    return sw_SSD_EMU_Standard_Lined_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_Lined_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Standard_Lined_lencheck;
    return sw_SSD_EMU_Standard_Lined_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Standard_Lined, 10251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_STANDARD);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            100 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Standard_Lined_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Standard_Lined_purchase;
        additional_text: string(STR_INFO_SSD_EMU_STANDARD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Standard_Lined_revcheck ;
        length                      : 8;
        cargo_capacity              : (85/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;
    }
}

//Standard_PTC1
spriteset(spriteset_SSD_EMU_Standard_PTC1_purchase,   "gfx/SSD_EMU_Standard_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Standard_PTC1_Motor_lead,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Standard_PTC1_Motor_rear,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Standard_PTC1_DrivingTrailer_lead,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Standard_PTC1_DrivingTrailer_rear,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Standard_PTC1_Trailer,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Standard_PTC1_NonControlMotor,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Standard_PTC1_NonControlMotor_r,   "gfx/SSD_EMU_Standard_PTC1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_PTC1_Trailer;
    return spriteset_SSD_EMU_Standard_PTC1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_1_r;
    return sw_SSD_EMU_Standard_PTC1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Standard_PTC1_Trailer;
    return sw_SSD_EMU_Standard_PTC1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_2_r;
    return sw_SSD_EMU_Standard_PTC1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_PTC1_Trailer;
    3 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Standard_PTC1_sidecheck_4_r;
    5 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Standard_PTC1_sidecheck_6_r;
    return sw_SSD_EMU_Standard_PTC1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_1;
    return sw_SSD_EMU_Standard_PTC1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_1;
    return spriteset_SSD_EMU_Standard_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_2;
    return sw_SSD_EMU_Standard_PTC1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_PTC1_Trailer;
    3 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_1;
    4 : sw_SSD_EMU_Standard_PTC1_sidecheck_4;
    5 : sw_SSD_EMU_Standard_PTC1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Standard_PTC1_sidecheck_6;
    return sw_SSD_EMU_Standard_PTC1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Standard_PTC1_Motor_lead; //Panto
    return spriteset_SSD_EMU_Standard_PTC1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_PTC1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Standard_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_PTC1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_PTC1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_PTC1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_PTC1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Standard_PTC1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Standard_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_PTC1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_PTC1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_PTC1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_PTC1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_PTC1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Standard_PTC1_frontcheck; //We are going forwards
    return sw_SSD_EMU_Standard_PTC1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_PTC1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Standard_PTC1_lencheck;
    return sw_SSD_EMU_Standard_PTC1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Standard_PTC1, 10252) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_STANDARD);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            100 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Standard_PTC1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Standard_PTC1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_STANDARD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Standard_PTC1_revcheck ;
        length                      : 8;
        cargo_capacity              : (88/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;
    }
}

//Standard_PTC2
spriteset(spriteset_SSD_EMU_Standard_PTC2_purchase,   "gfx/SSD_EMU_Standard_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Standard_PTC2_Motor_lead,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Standard_PTC2_Motor_rear,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Standard_PTC2_DrivingTrailer_lead,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Standard_PTC2_DrivingTrailer_rear,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Standard_PTC2_Trailer,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Standard_PTC2_NonControlMotor,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Standard_PTC2_NonControlMotor_r,   "gfx/SSD_EMU_Standard_PTC2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_PTC2_Trailer;
    return spriteset_SSD_EMU_Standard_PTC2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_1_r;
    return sw_SSD_EMU_Standard_PTC2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Standard_PTC2_Trailer;
    return sw_SSD_EMU_Standard_PTC2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_2_r;
    return sw_SSD_EMU_Standard_PTC2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_PTC2_Trailer;
    3 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Standard_PTC2_sidecheck_4_r;
    5 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Standard_PTC2_sidecheck_6_r;
    return sw_SSD_EMU_Standard_PTC2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_1;
    return sw_SSD_EMU_Standard_PTC2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_1;
    return spriteset_SSD_EMU_Standard_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_2;
    return sw_SSD_EMU_Standard_PTC2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_PTC2_Trailer;
    3 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_1;
    4 : sw_SSD_EMU_Standard_PTC2_sidecheck_4;
    5 : sw_SSD_EMU_Standard_PTC2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Standard_PTC2_sidecheck_6;
    return sw_SSD_EMU_Standard_PTC2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Standard_PTC2_Motor_lead; //Panto
    return spriteset_SSD_EMU_Standard_PTC2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_PTC2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Standard_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_PTC2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_PTC2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_PTC2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_PTC2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Standard_PTC2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Standard_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_PTC2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_PTC2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_PTC2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_PTC2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_PTC2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_PTC2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Standard_PTC2_frontcheck; //We are going forwards
    return sw_SSD_EMU_Standard_PTC2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_PTC2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Standard_PTC2_lencheck;
    return sw_SSD_EMU_Standard_PTC2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Standard_PTC2, 10253) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_STANDARD);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            100 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Standard_PTC2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Standard_PTC2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_STANDARD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Standard_PTC2_revcheck ;
        length                      : 8;
        cargo_capacity              : (88/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;
    }
}

//Standard_SRA
spriteset(spriteset_SSD_EMU_Standard_SRA_purchase,   "gfx/SSD_EMU_Standard_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Standard_SRA_Motor_lead,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Standard_SRA_Motor_rear,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Standard_SRA_DrivingTrailer_lead,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Standard_SRA_DrivingTrailer_rear,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Standard_SRA_Trailer,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Standard_SRA_NonControlMotor,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Standard_SRA_NonControlMotor_r,   "gfx/SSD_EMU_Standard_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_SRA_Trailer;
    return spriteset_SSD_EMU_Standard_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_SRA_pantocheck_at_1_r;
    return sw_SSD_EMU_Standard_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Standard_SRA_Trailer;
    return sw_SSD_EMU_Standard_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_SRA_pantocheck_at_2_r;
    return sw_SSD_EMU_Standard_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_SRA_Trailer;
    3 : sw_SSD_EMU_Standard_SRA_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Standard_SRA_sidecheck_4_r;
    5 : sw_SSD_EMU_Standard_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Standard_SRA_sidecheck_6_r;
    return sw_SSD_EMU_Standard_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_SRA_pantocheck_at_1;
    return sw_SSD_EMU_Standard_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_SRA_pantocheck_at_1;
    return spriteset_SSD_EMU_Standard_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_SRA_pantocheck_at_2;
    return sw_SSD_EMU_Standard_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_SRA_Trailer;
    3 : sw_SSD_EMU_Standard_SRA_pantocheck_at_1;
    4 : sw_SSD_EMU_Standard_SRA_sidecheck_4;
    5 : sw_SSD_EMU_Standard_SRA_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Standard_SRA_sidecheck_6;
    return sw_SSD_EMU_Standard_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Standard_SRA_Motor_lead; //Panto
    return spriteset_SSD_EMU_Standard_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Standard_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Standard_SRA_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Standard_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Standard_SRA_frontcheck; //We are going forwards
    return sw_SSD_EMU_Standard_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Standard_SRA_lencheck;
    return sw_SSD_EMU_Standard_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Standard_SRA, 10254) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_STANDARD);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            100 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Standard_SRA_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Standard_SRA_purchase;
        additional_text: string(STR_INFO_SSD_EMU_STANDARD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Standard_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (88/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;
    }
}

//Standard_Cityrail
spriteset(spriteset_SSD_EMU_Standard_Cityrail_purchase,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Standard_Cityrail_Motor_lead,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Standard_Cityrail_Motor_rear,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Standard_Cityrail_DrivingTrailer_lead,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Standard_Cityrail_DrivingTrailer_rear,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Standard_Cityrail_Trailer,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor_r,   "gfx/SSD_EMU_Standard_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Cityrail_Trailer;
    return spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1_r;
    return sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Standard_Cityrail_Trailer;
    return sw_SSD_EMU_Standard_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2_r;
    return sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_Cityrail_Trailer;
    3 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Standard_Cityrail_sidecheck_4_r;
    5 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Standard_Cityrail_sidecheck_6_r;
    return sw_SSD_EMU_Standard_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Standard_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1;
    return sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1;
    return spriteset_SSD_EMU_Standard_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2;
    return sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Standard_Cityrail_Trailer;
    3 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_1;
    4 : sw_SSD_EMU_Standard_Cityrail_sidecheck_4;
    5 : sw_SSD_EMU_Standard_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Standard_Cityrail_sidecheck_6;
    return sw_SSD_EMU_Standard_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Standard_Cityrail_Motor_lead; //Panto
    return spriteset_SSD_EMU_Standard_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Standard_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Standard_Cityrail_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Standard_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Standard_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Standard_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Standard_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Standard_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Standard_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Standard_Cityrail_frontcheck; //We are going forwards
    return sw_SSD_EMU_Standard_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Standard_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Standard_Cityrail_lencheck;
    return sw_SSD_EMU_Standard_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Standard_Cityrail, 10255) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_STANDARD);
        introduction_date:                date(1926,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            100 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             200;
        cargo_capacity:                  88/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Standard;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Standard_Cityrail_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Standard_Cityrail_purchase;
        additional_text: string(STR_INFO_SSD_EMU_STANDARD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Standard_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (88/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor:             200;
    }
}

//DM/D Class
spriteset(spriteset_SSD_EMU_DMD_purchase,   "gfx/SSD_EMU_DMD.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_DMD_Motor_lead,   "gfx/SSD_EMU_DMD.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_DMD_Motor_rear,   "gfx/SSD_EMU_DMD.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_DMD_DrivingTrailer_lead,   "gfx/SSD_EMU_DMD.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_DMD_DrivingTrailer_rear,   "gfx/SSD_EMU_DMD.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_DMD_Trailer,   "gfx/SSD_EMU_DMD.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_DMD_NonControlMotor,   "gfx/SSD_EMU_DMD.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_DMD_NonControlMotor_r,   "gfx/SSD_EMU_DMD.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Trailer;
    return spriteset_SSD_EMU_DMD_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_pantocheck_at_1_r;
    return sw_SSD_EMU_DMD_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_DMD_Trailer;
    return sw_SSD_EMU_DMD_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_pantocheck_at_2_r;
    return sw_SSD_EMU_DMD_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_Trailer;
    3 : sw_SSD_EMU_DMD_pantocheck_at_1_r;
    4 : sw_SSD_EMU_DMD_sidecheck_4_r;
    5 : sw_SSD_EMU_DMD_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_DMD_sidecheck_6_r;
    return sw_SSD_EMU_DMD_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_pantocheck_at_1;
    return sw_SSD_EMU_DMD_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_pantocheck_at_1;
    return spriteset_SSD_EMU_DMD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_pantocheck_at_2;
    return sw_SSD_EMU_DMD_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_Trailer;
    3 : sw_SSD_EMU_DMD_pantocheck_at_1;
    4 : sw_SSD_EMU_DMD_sidecheck_4;
    5 : sw_SSD_EMU_DMD_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_DMD_sidecheck_6;
    return sw_SSD_EMU_DMD_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_DMD_Motor_lead; //Panto
    return spriteset_SSD_EMU_DMD_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_DMD_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_DMD_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_DMD_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_DMD_frontcheck; //We are going forwards
    return sw_SSD_EMU_DMD_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_DMD_lencheck;
    return sw_SSD_EMU_DMD_lencheck_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_attach, vehicle_type_id){
    Item_SSD_EMU_DMD    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_DMD_Early    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_DMD_Highvis    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_DMD_TranzMetro    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_DMD_GreenandCream    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

item(FEAT_TRAINS, Item_SSD_EMU_DMD, 10300) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_DMD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 30;

//        variant_group: Item_SSD_EMU_DMD;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_DMD_directioncheck;
        can_attach_wagon: sw_SSD_EMU_DMD_attach ;
        purchase: spriteset_SSD_EMU_DMD_purchase;
        additional_text: string(STR_INFO_SSD_EMU_DMD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_DMD_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        43;
		running_cost_factor:             52;

    }
}

//DM/D Class
spriteset(spriteset_SSD_EMU_DMD_Early_purchase,   "gfx/SSD_EMU_DMD_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_DMD_Early_Motor_lead,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_DMD_Early_Motor_rear,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_DMD_Early_DrivingTrailer_lead,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_DMD_Early_DrivingTrailer_rear,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_DMD_Early_Trailer,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_DMD_Early_NonControlMotor,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_DMD_Early_NonControlMotor_r,   "gfx/SSD_EMU_DMD_Early.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_Early_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Early_Trailer;
    return spriteset_SSD_EMU_DMD_Early_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_Early_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Early_pantocheck_at_1_r;
    return sw_SSD_EMU_DMD_Early_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_DMD_Early_Trailer;
    return sw_SSD_EMU_DMD_Early_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Early_pantocheck_at_2_r;
    return sw_SSD_EMU_DMD_Early_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_Early_Trailer;
    3 : sw_SSD_EMU_DMD_Early_pantocheck_at_1_r;
    4 : sw_SSD_EMU_DMD_Early_sidecheck_4_r;
    5 : sw_SSD_EMU_DMD_Early_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_DMD_Early_sidecheck_6_r;
    return sw_SSD_EMU_DMD_Early_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_Early_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_Early_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Early_pantocheck_at_1;
    return sw_SSD_EMU_DMD_Early_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Early_pantocheck_at_1;
    return spriteset_SSD_EMU_DMD_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Early_pantocheck_at_2;
    return sw_SSD_EMU_DMD_Early_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_Early_Trailer;
    3 : sw_SSD_EMU_DMD_Early_pantocheck_at_1;
    4 : sw_SSD_EMU_DMD_Early_sidecheck_4;
    5 : sw_SSD_EMU_DMD_Early_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_DMD_Early_sidecheck_6;
    return sw_SSD_EMU_DMD_Early_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_DMD_Early_Motor_lead; //Panto
    return spriteset_SSD_EMU_DMD_Early_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_Early_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_DMD_Early_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_Early_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_Early_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_Early_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_Early_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_DMD_Early_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_DMD_Early_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_Early_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_Early_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Early_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_Early_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_Early_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_Early_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_DMD_Early_frontcheck; //We are going forwards
    return sw_SSD_EMU_DMD_Early_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_Early_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_DMD_Early_lencheck;
    return sw_SSD_EMU_DMD_Early_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_DMD_Early, 10301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_DMD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_DMD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_DMD_Early_directioncheck;
        can_attach_wagon: sw_SSD_EMU_DMD_attach ;
        purchase: spriteset_SSD_EMU_DMD_Early_purchase;
        additional_text: string(STR_INFO_SSD_EMU_DMD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_DMD_Early_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        43;
		running_cost_factor:             52;

    }
}

//DM/D Class
spriteset(spriteset_SSD_EMU_DMD_Highvis_purchase,   "gfx/SSD_EMU_DMD_Highvis.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_DMD_Highvis_Motor_lead,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_DMD_Highvis_Motor_rear,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_DMD_Highvis_DrivingTrailer_lead,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_DMD_Highvis_DrivingTrailer_rear,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_DMD_Highvis_Trailer,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_DMD_Highvis_NonControlMotor,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_DMD_Highvis_NonControlMotor_r,   "gfx/SSD_EMU_DMD_Highvis.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Highvis_Trailer;
    return spriteset_SSD_EMU_DMD_Highvis_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_1_r;
    return sw_SSD_EMU_DMD_Highvis_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_DMD_Highvis_Trailer;
    return sw_SSD_EMU_DMD_Highvis_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_2_r;
    return sw_SSD_EMU_DMD_Highvis_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_Highvis_Trailer;
    3 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_1_r;
    4 : sw_SSD_EMU_DMD_Highvis_sidecheck_4_r;
    5 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_DMD_Highvis_sidecheck_6_r;
    return sw_SSD_EMU_DMD_Highvis_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_Highvis_NonControlMotor;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_1;
    return sw_SSD_EMU_DMD_Highvis_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_1;
    return spriteset_SSD_EMU_DMD_Highvis_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_2;
    return sw_SSD_EMU_DMD_Highvis_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_Highvis_Trailer;
    3 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_1;
    4 : sw_SSD_EMU_DMD_Highvis_sidecheck_4;
    5 : sw_SSD_EMU_DMD_Highvis_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_DMD_Highvis_sidecheck_6;
    return sw_SSD_EMU_DMD_Highvis_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_DMD_Highvis_Motor_lead; //Panto
    return spriteset_SSD_EMU_DMD_Highvis_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_Highvis_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_DMD_Highvis_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_Highvis_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_Highvis_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_Highvis_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_Highvis_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_DMD_Highvis_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_DMD_Highvis_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_Highvis_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_Highvis_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_Highvis_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_Highvis_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_Highvis_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_Highvis_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_DMD_Highvis_frontcheck; //We are going forwards
    return sw_SSD_EMU_DMD_Highvis_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_Highvis_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_DMD_Highvis_lencheck;
    return sw_SSD_EMU_DMD_Highvis_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_DMD_Highvis, 10302) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_DMD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_DMD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_DMD_Highvis_directioncheck;
        can_attach_wagon: sw_SSD_EMU_DMD_attach ;
        purchase: spriteset_SSD_EMU_DMD_Highvis_purchase;
        additional_text: string(STR_INFO_SSD_EMU_DMD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_DMD_Highvis_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        43;
		running_cost_factor:             52;

    }
}

//DM/D Class
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_purchase,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_Motor_lead,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_Motor_rear,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_DrivingTrailer_lead,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_DrivingTrailer_rear,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_Trailer,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor_r,   "gfx/SSD_EMU_DMD_TranzMetro.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
    return spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1_r;
    return sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
    return sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2_r;
    return sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
    3 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1_r;
    4 : sw_SSD_EMU_DMD_TranzMetro_sidecheck_4_r;
    5 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_DMD_TranzMetro_sidecheck_6_r;
    return sw_SSD_EMU_DMD_TranzMetro_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1;
    return sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1;
    return spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2;
    return sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_TranzMetro_Trailer;
    3 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_1;
    4 : sw_SSD_EMU_DMD_TranzMetro_sidecheck_4;
    5 : sw_SSD_EMU_DMD_TranzMetro_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_DMD_TranzMetro_sidecheck_6;
    return sw_SSD_EMU_DMD_TranzMetro_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_DMD_TranzMetro_Motor_lead; //Panto
    return spriteset_SSD_EMU_DMD_TranzMetro_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_TranzMetro_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_DMD_TranzMetro_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_TranzMetro_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_TranzMetro_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_TranzMetro_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_TranzMetro_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_DMD_TranzMetro_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_DMD_TranzMetro_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_TranzMetro_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_TranzMetro_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_TranzMetro_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_TranzMetro_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_TranzMetro_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_TranzMetro_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_DMD_TranzMetro_frontcheck; //We are going forwards
    return sw_SSD_EMU_DMD_TranzMetro_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_TranzMetro_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_DMD_TranzMetro_lencheck;
    return sw_SSD_EMU_DMD_TranzMetro_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_DMD_TranzMetro, 10303) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_DMD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_DMD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_DMD_TranzMetro_directioncheck;
        can_attach_wagon: sw_SSD_EMU_DMD_attach ;
        purchase: spriteset_SSD_EMU_DMD_TranzMetro_purchase;
        additional_text: string(STR_INFO_SSD_EMU_DMD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_DMD_TranzMetro_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        43;
		running_cost_factor:             52;

    }
}

//DM/D Class
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_purchase,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_Motor_lead,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_Motor_rear,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_DrivingTrailer_lead,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_DrivingTrailer_rear,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_Trailer,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor_r,   "gfx/SSD_EMU_DMD_GreenandCream.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
    return spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1_r;
    return sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
    return sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2_r;
    return sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
    3 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1_r;
    4 : sw_SSD_EMU_DMD_GreenandCream_sidecheck_4_r;
    5 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_DMD_GreenandCream_sidecheck_6_r;
    return sw_SSD_EMU_DMD_GreenandCream_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor_r;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_DMD_GreenandCream_NonControlMotor;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1;
    return sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1;
    return spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2;
    return sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_DMD_GreenandCream_Trailer;
    3 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_1;
    4 : sw_SSD_EMU_DMD_GreenandCream_sidecheck_4;
    5 : sw_SSD_EMU_DMD_GreenandCream_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_DMD_GreenandCream_sidecheck_6;
    return sw_SSD_EMU_DMD_GreenandCream_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_DMD_GreenandCream_Motor_lead; //Panto
    return spriteset_SSD_EMU_DMD_GreenandCream_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_GreenandCream_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_DMD_GreenandCream_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_GreenandCream_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_GreenandCream_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_GreenandCream_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_GreenandCream_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_DMD_GreenandCream_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_DMD_GreenandCream_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_DMD_GreenandCream_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_DMD_GreenandCream_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_DMD_GreenandCream_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_DMD_GreenandCream_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_DMD_GreenandCream_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_GreenandCream_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_DMD_GreenandCream_frontcheck; //We are going forwards
    return sw_SSD_EMU_DMD_GreenandCream_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_DMD_GreenandCream_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_DMD_GreenandCream_lencheck;
    return sw_SSD_EMU_DMD_GreenandCream_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_DMD_GreenandCream, 10304) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_DMD);
        introduction_date:                date(1938,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        43 ton;
        speed:                            100 km/h;
        power:                            600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     10;
        running_cost_factor:             206;
        cargo_capacity:                  90/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_DMD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_DMD_GreenandCream_directioncheck;
        can_attach_wagon: sw_SSD_EMU_DMD_attach ;
        purchase: spriteset_SSD_EMU_DMD_GreenandCream_purchase;
        additional_text: string(STR_INFO_SSD_EMU_DMD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_DMD_GreenandCream_revcheck ;
        length                      : 8;
        cargo_capacity              : (90/param_capacity_mod) ;
        power                       : 300 ;
		weight:                        43;
		running_cost_factor:             52;

    }
}

//Tulloch
spriteset(spriteset_SSD_EMU_Tulloch_purchase,   "gfx/SSD_EMU_Tulloch.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Tulloch_Motor_lead,   "gfx/SSD_EMU_Tulloch.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Tulloch_Motor_rear,   "gfx/SSD_EMU_Tulloch.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Tulloch_DrivingTrailer_lead,   "gfx/SSD_EMU_Tulloch.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Tulloch_DrivingTrailer_rear,   "gfx/SSD_EMU_Tulloch.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Tulloch_Trailer,   "gfx/SSD_EMU_Tulloch.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_NonControlMotor,   "gfx/SSD_EMU_Tulloch.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_NonControlMotor_r,   "gfx/SSD_EMU_Tulloch.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Trailer;
    return spriteset_SSD_EMU_Tulloch_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_pantocheck_at_1_r;
    return sw_SSD_EMU_Tulloch_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Tulloch_Trailer;
    return sw_SSD_EMU_Tulloch_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_pantocheck_at_2_r;
    return sw_SSD_EMU_Tulloch_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_Trailer;
    3 : sw_SSD_EMU_Tulloch_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Tulloch_sidecheck_4_r;
    5 : sw_SSD_EMU_Tulloch_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Tulloch_sidecheck_6_r;
    return sw_SSD_EMU_Tulloch_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_pantocheck_at_1;
    return sw_SSD_EMU_Tulloch_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_pantocheck_at_1;
    return spriteset_SSD_EMU_Tulloch_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_pantocheck_at_2;
    return sw_SSD_EMU_Tulloch_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_Trailer;
    3 : sw_SSD_EMU_Tulloch_pantocheck_at_1;
    4 : sw_SSD_EMU_Tulloch_sidecheck_4;
    5 : sw_SSD_EMU_Tulloch_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Tulloch_sidecheck_6;
    return sw_SSD_EMU_Tulloch_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Tulloch_Motor_lead; //Panto
    return spriteset_SSD_EMU_Tulloch_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Tulloch_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Tulloch_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Tulloch_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Tulloch_frontcheck; //We are going forwards
    return sw_SSD_EMU_Tulloch_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Tulloch_lencheck;
    return sw_SSD_EMU_Tulloch_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Tulloch, 10400) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_TULLOCH);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 30;

//        variant_group: Item_SSD_EMU_Tulloch;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Tulloch_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Tulloch_purchase;
        additional_text: string(STR_INFO_SSD_EMU_TULLOCH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Tulloch_revcheck ;
        length                      : 8;
        cargo_capacity              : (98/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        45;
		running_cost_factor:             50;

    }
}

//Tulloch_Lined
spriteset(spriteset_SSD_EMU_Tulloch_Lined_purchase,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Tulloch_Lined_Motor_lead,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Tulloch_Lined_Motor_rear,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Tulloch_Lined_DrivingTrailer_lead,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Tulloch_Lined_DrivingTrailer_rear,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Tulloch_Lined_Trailer,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor_r,   "gfx/SSD_EMU_Tulloch_Lined.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Lined_Trailer;
    return spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1_r;
    return sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Tulloch_Lined_Trailer;
    return sw_SSD_EMU_Tulloch_Lined_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2_r;
    return sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_Lined_Trailer;
    3 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Tulloch_Lined_sidecheck_4_r;
    5 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Tulloch_Lined_sidecheck_6_r;
    return sw_SSD_EMU_Tulloch_Lined_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1;
    return sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1;
    return spriteset_SSD_EMU_Tulloch_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2;
    return sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_Lined_Trailer;
    3 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_1;
    4 : sw_SSD_EMU_Tulloch_Lined_sidecheck_4;
    5 : sw_SSD_EMU_Tulloch_Lined_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Tulloch_Lined_sidecheck_6;
    return sw_SSD_EMU_Tulloch_Lined_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Tulloch_Lined_Motor_lead; //Panto
    return spriteset_SSD_EMU_Tulloch_Lined_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_Lined_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Tulloch_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_Lined_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_Lined_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_Lined_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_Lined_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Tulloch_Lined_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Tulloch_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_Lined_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_Lined_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Lined_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_Lined_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_Lined_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_Lined_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Tulloch_Lined_frontcheck; //We are going forwards
    return sw_SSD_EMU_Tulloch_Lined_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_Lined_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Tulloch_Lined_lencheck;
    return sw_SSD_EMU_Tulloch_Lined_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Tulloch_Lined, 10401) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_TULLOCH);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Tulloch;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Tulloch_Lined_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Tulloch_Lined_purchase;
        additional_text: string(STR_INFO_SSD_EMU_TULLOCH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Tulloch_Lined_revcheck ;
        length                      : 8;
        cargo_capacity              : (98/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        45;
		running_cost_factor:             50;

    }
}

//Tulloch_PTC1
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_purchase,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_Motor_lead,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_Motor_rear,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_DrivingTrailer_lead,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_DrivingTrailer_rear,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_Trailer,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor_r,   "gfx/SSD_EMU_Tulloch_PTC1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
    return spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1_r;
    return sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
    return sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2_r;
    return sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
    3 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Tulloch_PTC1_sidecheck_4_r;
    5 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Tulloch_PTC1_sidecheck_6_r;
    return sw_SSD_EMU_Tulloch_PTC1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1;
    return sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1;
    return spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2;
    return sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_PTC1_Trailer;
    3 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_1;
    4 : sw_SSD_EMU_Tulloch_PTC1_sidecheck_4;
    5 : sw_SSD_EMU_Tulloch_PTC1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Tulloch_PTC1_sidecheck_6;
    return sw_SSD_EMU_Tulloch_PTC1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Tulloch_PTC1_Motor_lead; //Panto
    return spriteset_SSD_EMU_Tulloch_PTC1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_PTC1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Tulloch_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_PTC1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_PTC1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_PTC1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_PTC1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Tulloch_PTC1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Tulloch_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_PTC1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_PTC1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_PTC1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_PTC1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_PTC1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Tulloch_PTC1_frontcheck; //We are going forwards
    return sw_SSD_EMU_Tulloch_PTC1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_PTC1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Tulloch_PTC1_lencheck;
    return sw_SSD_EMU_Tulloch_PTC1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Tulloch_PTC1, 10402) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_TULLOCH);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Tulloch;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Tulloch_PTC1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Tulloch_PTC1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_TULLOCH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Tulloch_PTC1_revcheck ;
        length                      : 8;
        cargo_capacity              : (98/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        45;
		running_cost_factor:             50;

    }
}

//Tulloch_PTC2
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_purchase,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_Motor_lead,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_Motor_rear,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_DrivingTrailer_lead,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_DrivingTrailer_rear,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_Trailer,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor_r,   "gfx/SSD_EMU_Tulloch_PTC2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
    return spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1_r;
    return sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
    return sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2_r;
    return sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
    3 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Tulloch_PTC2_sidecheck_4_r;
    5 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Tulloch_PTC2_sidecheck_6_r;
    return sw_SSD_EMU_Tulloch_PTC2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1;
    return sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1;
    return spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2;
    return sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_PTC2_Trailer;
    3 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_1;
    4 : sw_SSD_EMU_Tulloch_PTC2_sidecheck_4;
    5 : sw_SSD_EMU_Tulloch_PTC2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Tulloch_PTC2_sidecheck_6;
    return sw_SSD_EMU_Tulloch_PTC2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Tulloch_PTC2_Motor_lead; //Panto
    return spriteset_SSD_EMU_Tulloch_PTC2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_PTC2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Tulloch_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_PTC2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_PTC2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_PTC2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_PTC2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Tulloch_PTC2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Tulloch_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_PTC2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_PTC2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_PTC2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_PTC2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_PTC2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_PTC2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Tulloch_PTC2_frontcheck; //We are going forwards
    return sw_SSD_EMU_Tulloch_PTC2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_PTC2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Tulloch_PTC2_lencheck;
    return sw_SSD_EMU_Tulloch_PTC2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Tulloch_PTC2, 10403) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_TULLOCH);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Tulloch;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Tulloch_PTC2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Tulloch_PTC2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_TULLOCH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Tulloch_PTC2_revcheck ;
        length                      : 8;
        cargo_capacity              : (98/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        45;
		running_cost_factor:             50;

    }
}

//Tulloch_SRA
spriteset(spriteset_SSD_EMU_Tulloch_SRA_purchase,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Tulloch_SRA_Motor_lead,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Tulloch_SRA_Motor_rear,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Tulloch_SRA_DrivingTrailer_lead,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Tulloch_SRA_DrivingTrailer_rear,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Tulloch_SRA_Trailer,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor_r,   "gfx/SSD_EMU_Tulloch_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_SRA_Trailer;
    return spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1_r;
    return sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Tulloch_SRA_Trailer;
    return sw_SSD_EMU_Tulloch_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2_r;
    return sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_SRA_Trailer;
    3 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Tulloch_SRA_sidecheck_4_r;
    5 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Tulloch_SRA_sidecheck_6_r;
    return sw_SSD_EMU_Tulloch_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1;
    return sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1;
    return spriteset_SSD_EMU_Tulloch_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2;
    return sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_SRA_Trailer;
    3 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_1;
    4 : sw_SSD_EMU_Tulloch_SRA_sidecheck_4;
    5 : sw_SSD_EMU_Tulloch_SRA_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Tulloch_SRA_sidecheck_6;
    return sw_SSD_EMU_Tulloch_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Tulloch_SRA_Motor_lead; //Panto
    return spriteset_SSD_EMU_Tulloch_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Tulloch_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Tulloch_SRA_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Tulloch_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Tulloch_SRA_frontcheck; //We are going forwards
    return sw_SSD_EMU_Tulloch_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Tulloch_SRA_lencheck;
    return sw_SSD_EMU_Tulloch_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Tulloch_SRA, 10404) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_TULLOCH);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Tulloch;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Tulloch_SRA_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Tulloch_SRA_purchase;
        additional_text: string(STR_INFO_SSD_EMU_TULLOCH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Tulloch_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (98/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        45;
		running_cost_factor:             50;

    }
}

//Tulloch_Cityrail
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_purchase,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_Motor_lead,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_Motor_rear,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_DrivingTrailer_lead,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_DrivingTrailer_rear,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_Trailer,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor_r,   "gfx/SSD_EMU_Tulloch_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
    return spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1_r;
    return sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
    return sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2_r;
    return sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
    3 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Tulloch_Cityrail_sidecheck_4_r;
    5 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Tulloch_Cityrail_sidecheck_6_r;
    return sw_SSD_EMU_Tulloch_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Tulloch_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1;
    return sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1;
    return spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2;
    return sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Tulloch_Cityrail_Trailer;
    3 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_1;
    4 : sw_SSD_EMU_Tulloch_Cityrail_sidecheck_4;
    5 : sw_SSD_EMU_Tulloch_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Tulloch_Cityrail_sidecheck_6;
    return sw_SSD_EMU_Tulloch_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Tulloch_Cityrail_Motor_lead; //Panto
    return spriteset_SSD_EMU_Tulloch_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Tulloch_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Tulloch_Cityrail_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Tulloch_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Tulloch_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Tulloch_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Tulloch_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Tulloch_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Tulloch_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Tulloch_Cityrail_frontcheck; //We are going forwards
    return sw_SSD_EMU_Tulloch_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Tulloch_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Tulloch_Cityrail_lencheck;
    return sw_SSD_EMU_Tulloch_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Tulloch_Cityrail, 10405) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_TULLOCH);
        introduction_date:                date(1940,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        45 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  98/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Tulloch;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Tulloch_Cityrail_directioncheck;
        can_attach_wagon: sw_SSD_EMU_SydneyFirstGen_Attach ;
        purchase: spriteset_SSD_EMU_Tulloch_Cityrail_purchase;
        additional_text: string(STR_INFO_SSD_EMU_TULLOCH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Tulloch_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (98/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        45;
		running_cost_factor:             50;

    }
}

switch(FEAT_TRAINS, SELF, sw_Harris_attach, vehicle_type_id){
	Item_Harris_2Door_VR    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Harris_3Door_VR    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Harris 2Door
spriteset(spriteset_Harris_2Door_VR_purchase,   "gfx/Harris_VR.png") {template_purchase(7, 21)}
spriteset(spriteset_Harris_2Door_VR_Motor_lead,   "gfx/Harris_VR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Harris_2Door_VR_Motor_rear,   "gfx/Harris_VR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Harris_2Door_VR_DrivingTrailer_lead,   "gfx/Harris_VR.png") {template_old_8(187, 39)}
spriteset(spriteset_Harris_2Door_VR_DrivingTrailer_rear,   "gfx/Harris_VR.png") {template_old_8(187, 64)}
spriteset(spriteset_Harris_2Door_VR_Trailer,   "gfx/Harris_VR.png") {template_old_8(7, 89)}
spriteset(spriteset_Harris_2Door_VR_NonControlMotor,   "gfx/Harris_VR.png") {template_old_8(187, 89)}
spriteset(spriteset_Harris_2Door_VR_NonControlMotor_r,   "gfx/Harris_VR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Harris_2Door_VR_NonControlMotor_r;
    return spriteset_Harris_2Door_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Harris_2Door_VR_NonControlMotor;
    return spriteset_Harris_2Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Harris_2Door_VR_NonControlMotor_r;
    return spriteset_Harris_2Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Harris_2Door_VR_Trailer;
    return spriteset_Harris_2Door_VR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Harris_2Door_VR_NonControlMotor;
    return spriteset_Harris_2Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_2Door_VR_pantocheck_at_1_r;
    return sw_Harris_2Door_VR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Harris_2Door_VR_Trailer;
    return sw_Harris_2Door_VR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_2Door_VR_pantocheck_at_2_r;
    return sw_Harris_2Door_VR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Harris_2Door_VR_Trailer;
    3 : sw_Harris_2Door_VR_pantocheck_at_1_r;
    4 : sw_Harris_2Door_VR_sidecheck_4_r;
    5 : sw_Harris_2Door_VR_pantocheck_at_2_r;
    6 .. 7 : sw_Harris_2Door_VR_sidecheck_6_r;
    return sw_Harris_2Door_VR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Harris_2Door_VR_NonControlMotor_r;
    return spriteset_Harris_2Door_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Harris_2Door_VR_NonControlMotor;
    return spriteset_Harris_2Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Harris_2Door_VR_NonControlMotor_r;
    return spriteset_Harris_2Door_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Harris_2Door_VR_NonControlMotor;
    return spriteset_Harris_2Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_2Door_VR_pantocheck_at_1;
    return sw_Harris_2Door_VR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_2Door_VR_pantocheck_at_1;
    return spriteset_Harris_2Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_2Door_VR_pantocheck_at_2;
    return sw_Harris_2Door_VR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Harris_2Door_VR_Trailer;
    3 : sw_Harris_2Door_VR_pantocheck_at_1;
    4 : sw_Harris_2Door_VR_sidecheck_4;
    5 : sw_Harris_2Door_VR_pantocheck_at_2;
    6 .. 7 : sw_Harris_2Door_VR_sidecheck_6;
    return sw_Harris_2Door_VR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Harris_2Door_VR_Motor_lead; //Panto
    return spriteset_Harris_2Door_VR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_panto_direction_r, vehicle_is_flipped){
    0 : sw_Harris_2Door_VR_panto_direction_r_pos;        //Front panto
    return spriteset_Harris_2Door_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Harris_2Door_VR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Harris_2Door_VR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_frontcheck_r, position_in_vehid_chain){
    0: sw_Harris_2Door_VR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Harris_2Door_VR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_panto_direction, vehicle_is_flipped){
    0 : spriteset_Harris_2Door_VR_Motor_lead;        //Front panto
    return spriteset_Harris_2Door_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Harris_2Door_VR_panto_direction;        //Not flipped, give Panto
    return spriteset_Harris_2Door_VR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_2Door_VR_frontcheck, position_in_vehid_chain){
    0: sw_Harris_2Door_VR_panto_direction; //We need a pantograph, guaranteed
    return sw_Harris_2Door_VR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Harris_2Door_VR_directioncheck, vehicle_is_reversed){
    0: sw_Harris_2Door_VR_frontcheck; //We are going forwards
    return sw_Harris_2Door_VR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Harris_2Door_VR_revcheck, vehicle_is_reversed){
    0 : sw_Harris_2Door_VR_lencheck;
    return sw_Harris_2Door_VR_lencheck_r;
}

item(FEAT_TRAINS, Item_Harris_2Door_VR, 10501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRIS_2DOOR);
        introduction_date:                date(1956,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            808 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_Harris_2Door_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Harris_2Door_VR_directioncheck;
        can_attach_wagon: sw_Harris_attach ;
        purchase: spriteset_Harris_2Door_VR_purchase;
        additional_text: string(STR_INFO_HARRIS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Harris_2Door_VR_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Harris 3Door
spriteset(spriteset_Harris_3Door_VR_purchase,   "gfx/Harris_VR.png") {template_purchase(367, 21)}
spriteset(spriteset_Harris_3Door_VR_Motor_lead,   "gfx/Harris_VR.png") {template_old_8(367, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Harris_3Door_VR_Motor_rear,   "gfx/Harris_VR.png") {template_old_8(367, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Harris_3Door_VR_DrivingTrailer_lead,   "gfx/Harris_VR.png") {template_old_8(547, 39)}
spriteset(spriteset_Harris_3Door_VR_DrivingTrailer_rear,   "gfx/Harris_VR.png") {template_old_8(547, 64)}
spriteset(spriteset_Harris_3Door_VR_Trailer,   "gfx/Harris_VR.png") {template_old_8(367, 89)}
spriteset(spriteset_Harris_3Door_VR_NonControlMotor,   "gfx/Harris_VR.png") {template_old_8(547, 89)}
spriteset(spriteset_Harris_3Door_VR_NonControlMotor_r,   "gfx/Harris_VR.png") {template_old_8_r(547, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Harris_3Door_VR_NonControlMotor_r;
    return spriteset_Harris_3Door_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Harris_3Door_VR_NonControlMotor;
    return spriteset_Harris_3Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Harris_3Door_VR_NonControlMotor_r;
    return spriteset_Harris_3Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Harris_3Door_VR_Trailer;
    return spriteset_Harris_3Door_VR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Harris_3Door_VR_NonControlMotor;
    return spriteset_Harris_3Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_3Door_VR_pantocheck_at_1_r;
    return sw_Harris_3Door_VR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Harris_3Door_VR_Trailer;
    return sw_Harris_3Door_VR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_3Door_VR_pantocheck_at_2_r;
    return sw_Harris_3Door_VR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Harris_3Door_VR_Trailer;
    3 : sw_Harris_3Door_VR_pantocheck_at_1_r;
    4 : sw_Harris_3Door_VR_sidecheck_4_r;
    5 : sw_Harris_3Door_VR_pantocheck_at_2_r;
    6 .. 7 : sw_Harris_3Door_VR_sidecheck_6_r;
    return sw_Harris_3Door_VR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Harris_3Door_VR_NonControlMotor_r;
    return spriteset_Harris_3Door_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Harris_3Door_VR_NonControlMotor;
    return spriteset_Harris_3Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Harris_3Door_VR_NonControlMotor_r;
    return spriteset_Harris_3Door_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Harris_3Door_VR_NonControlMotor;
    return spriteset_Harris_3Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_3Door_VR_pantocheck_at_1;
    return sw_Harris_3Door_VR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_3Door_VR_pantocheck_at_1;
    return spriteset_Harris_3Door_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Harris_3Door_VR_pantocheck_at_2;
    return sw_Harris_3Door_VR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Harris_3Door_VR_Trailer;
    3 : sw_Harris_3Door_VR_pantocheck_at_1;
    4 : sw_Harris_3Door_VR_sidecheck_4;
    5 : sw_Harris_3Door_VR_pantocheck_at_2;
    6 .. 7 : sw_Harris_3Door_VR_sidecheck_6;
    return sw_Harris_3Door_VR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Harris_3Door_VR_Motor_lead; //Panto
    return spriteset_Harris_3Door_VR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_panto_direction_r, vehicle_is_flipped){
    0 : sw_Harris_3Door_VR_panto_direction_r_pos;        //Front panto
    return spriteset_Harris_3Door_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Harris_3Door_VR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Harris_3Door_VR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_frontcheck_r, position_in_vehid_chain){
    0: sw_Harris_3Door_VR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Harris_3Door_VR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_panto_direction, vehicle_is_flipped){
    0 : spriteset_Harris_3Door_VR_Motor_lead;        //Front panto
    return spriteset_Harris_3Door_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Harris_3Door_VR_panto_direction;        //Not flipped, give Panto
    return spriteset_Harris_3Door_VR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Harris_3Door_VR_frontcheck, position_in_vehid_chain){
    0: sw_Harris_3Door_VR_panto_direction; //We need a pantograph, guaranteed
    return sw_Harris_3Door_VR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Harris_3Door_VR_directioncheck, vehicle_is_reversed){
    0: sw_Harris_3Door_VR_frontcheck; //We are going forwards
    return sw_Harris_3Door_VR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Harris_3Door_VR_revcheck, vehicle_is_reversed){
    0 : sw_Harris_3Door_VR_lencheck;
    return sw_Harris_3Door_VR_lencheck_r;
}

item(FEAT_TRAINS, Item_Harris_3Door_VR, 10526) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRIS_3DOOR);
        introduction_date:                date(1956,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            808 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Harris_3Door_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Harris_3Door_VR_directioncheck;
        can_attach_wagon: sw_Harris_attach ;
        purchase: spriteset_Harris_3Door_VR_purchase;
        additional_text: string(STR_INFO_HARRIS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Harris_3Door_VR_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Sputnik
spriteset(spriteset_SSD_EMU_Sputnik_purchase,   "gfx/SSD_EMU_Sputnik.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Sputnik_Motor_lead,   "gfx/SSD_EMU_Sputnik.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Sputnik_Motor_rear,   "gfx/SSD_EMU_Sputnik.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Sputnik_DrivingTrailer_lead,   "gfx/SSD_EMU_Sputnik.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Sputnik_DrivingTrailer_rear,   "gfx/SSD_EMU_Sputnik.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Sputnik_Trailer,   "gfx/SSD_EMU_Sputnik.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_NonControlMotor,   "gfx/SSD_EMU_Sputnik.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_NonControlMotor_r,   "gfx/SSD_EMU_Sputnik.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Trailer;
    return spriteset_SSD_EMU_Sputnik_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_pantocheck_at_1_r;
    return sw_SSD_EMU_Sputnik_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Sputnik_Trailer;
    return sw_SSD_EMU_Sputnik_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_pantocheck_at_2_r;
    return sw_SSD_EMU_Sputnik_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_Trailer;
    3 : sw_SSD_EMU_Sputnik_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Sputnik_sidecheck_4_r;
    5 : sw_SSD_EMU_Sputnik_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Sputnik_sidecheck_6_r;
    return sw_SSD_EMU_Sputnik_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_pantocheck_at_1;
    return sw_SSD_EMU_Sputnik_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_pantocheck_at_1;
    return spriteset_SSD_EMU_Sputnik_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_pantocheck_at_2;
    return sw_SSD_EMU_Sputnik_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_Trailer;
    3 : sw_SSD_EMU_Sputnik_pantocheck_at_1;
    4 : sw_SSD_EMU_Sputnik_sidecheck_4;
    5 : sw_SSD_EMU_Sputnik_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Sputnik_sidecheck_6;
    return sw_SSD_EMU_Sputnik_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Sputnik_Motor_lead; //Panto
    return spriteset_SSD_EMU_Sputnik_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Sputnik_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Sputnik_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Sputnik_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Sputnik_frontcheck; //We are going forwards
    return sw_SSD_EMU_Sputnik_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Sputnik_lencheck;
    return sw_SSD_EMU_Sputnik_lencheck_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_attach, vehicle_type_id){
    Item_SSD_EMU_Sputnik    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Sputnik_Lined    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Sputnik_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Sputnik_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Sputnik_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Sputnik_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_Bare    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

item(FEAT_TRAINS, Item_SSD_EMU_Sputnik, 10550) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_SPUTNIK);
        introduction_date:                date(1957,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

//        variant_group: Item_SSD_EMU_Sputnik;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Sputnik_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Sputnik_attach ;
        purchase: spriteset_SSD_EMU_Sputnik_purchase;
        additional_text: string(STR_INFO_SSD_EMU_SPUTNIK);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Sputnik_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Sputnik_Lined
spriteset(spriteset_SSD_EMU_Sputnik_Lined_purchase,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Sputnik_Lined_Motor_lead,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Sputnik_Lined_Motor_rear,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Sputnik_Lined_DrivingTrailer_lead,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Sputnik_Lined_DrivingTrailer_rear,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Sputnik_Lined_Trailer,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor_r,   "gfx/SSD_EMU_Sputnik_Lined.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Lined_Trailer;
    return spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1_r;
    return sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Sputnik_Lined_Trailer;
    return sw_SSD_EMU_Sputnik_Lined_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2_r;
    return sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_Lined_Trailer;
    3 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Sputnik_Lined_sidecheck_4_r;
    5 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Sputnik_Lined_sidecheck_6_r;
    return sw_SSD_EMU_Sputnik_Lined_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_Lined_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1;
    return sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1;
    return spriteset_SSD_EMU_Sputnik_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2;
    return sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_Lined_Trailer;
    3 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_1;
    4 : sw_SSD_EMU_Sputnik_Lined_sidecheck_4;
    5 : sw_SSD_EMU_Sputnik_Lined_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Sputnik_Lined_sidecheck_6;
    return sw_SSD_EMU_Sputnik_Lined_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Sputnik_Lined_Motor_lead; //Panto
    return spriteset_SSD_EMU_Sputnik_Lined_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_Lined_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Sputnik_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_Lined_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_Lined_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_Lined_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_Lined_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Sputnik_Lined_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Sputnik_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_Lined_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_Lined_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Lined_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_Lined_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_Lined_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_Lined_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Sputnik_Lined_frontcheck; //We are going forwards
    return sw_SSD_EMU_Sputnik_Lined_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_Lined_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Sputnik_Lined_lencheck;
    return sw_SSD_EMU_Sputnik_Lined_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Sputnik_Lined, 10551) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_SPUTNIK);
        introduction_date:                date(1957,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Sputnik;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Sputnik_Lined_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Sputnik_attach ;
        purchase: spriteset_SSD_EMU_Sputnik_Lined_purchase;
        additional_text: string(STR_INFO_SSD_EMU_SPUTNIK);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Sputnik_Lined_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Sputnik_PTC1
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_purchase,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_Motor_lead,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_Motor_rear,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_DrivingTrailer_lead,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_DrivingTrailer_rear,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_Trailer,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor_r,   "gfx/SSD_EMU_Sputnik_PTC1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
    return spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1_r;
    return sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
    return sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2_r;
    return sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
    3 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Sputnik_PTC1_sidecheck_4_r;
    5 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Sputnik_PTC1_sidecheck_6_r;
    return sw_SSD_EMU_Sputnik_PTC1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC1_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1;
    return sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1;
    return spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2;
    return sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_PTC1_Trailer;
    3 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_1;
    4 : sw_SSD_EMU_Sputnik_PTC1_sidecheck_4;
    5 : sw_SSD_EMU_Sputnik_PTC1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Sputnik_PTC1_sidecheck_6;
    return sw_SSD_EMU_Sputnik_PTC1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Sputnik_PTC1_Motor_lead; //Panto
    return spriteset_SSD_EMU_Sputnik_PTC1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_PTC1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Sputnik_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_PTC1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_PTC1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_PTC1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_PTC1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Sputnik_PTC1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Sputnik_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_PTC1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_PTC1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_PTC1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_PTC1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_PTC1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Sputnik_PTC1_frontcheck; //We are going forwards
    return sw_SSD_EMU_Sputnik_PTC1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_PTC1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Sputnik_PTC1_lencheck;
    return sw_SSD_EMU_Sputnik_PTC1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Sputnik_PTC1, 10552) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_SPUTNIK);
        introduction_date:                date(1957,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Sputnik;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Sputnik_PTC1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Sputnik_attach ;
        purchase: spriteset_SSD_EMU_Sputnik_PTC1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_SPUTNIK);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Sputnik_PTC1_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Sputnik_PTC2
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_purchase,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_Motor_lead,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_Motor_rear,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_DrivingTrailer_lead,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_DrivingTrailer_rear,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_Trailer,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor_r,   "gfx/SSD_EMU_Sputnik_PTC2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
    return spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1_r;
    return sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
    return sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2_r;
    return sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
    3 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Sputnik_PTC2_sidecheck_4_r;
    5 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Sputnik_PTC2_sidecheck_6_r;
    return sw_SSD_EMU_Sputnik_PTC2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_PTC2_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1;
    return sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1;
    return spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2;
    return sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_PTC2_Trailer;
    3 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_1;
    4 : sw_SSD_EMU_Sputnik_PTC2_sidecheck_4;
    5 : sw_SSD_EMU_Sputnik_PTC2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Sputnik_PTC2_sidecheck_6;
    return sw_SSD_EMU_Sputnik_PTC2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Sputnik_PTC2_Motor_lead; //Panto
    return spriteset_SSD_EMU_Sputnik_PTC2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_PTC2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Sputnik_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_PTC2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_PTC2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_PTC2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_PTC2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Sputnik_PTC2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Sputnik_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_PTC2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_PTC2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_PTC2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_PTC2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_PTC2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_PTC2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Sputnik_PTC2_frontcheck; //We are going forwards
    return sw_SSD_EMU_Sputnik_PTC2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_PTC2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Sputnik_PTC2_lencheck;
    return sw_SSD_EMU_Sputnik_PTC2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Sputnik_PTC2, 10553) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_SPUTNIK);
        introduction_date:                date(1957,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Sputnik;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Sputnik_PTC2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Sputnik_attach ;
        purchase: spriteset_SSD_EMU_Sputnik_PTC2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_SPUTNIK);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Sputnik_PTC2_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Sputnik_SRA
spriteset(spriteset_SSD_EMU_Sputnik_SRA_purchase,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Sputnik_SRA_Motor_lead,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Sputnik_SRA_Motor_rear,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Sputnik_SRA_DrivingTrailer_lead,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Sputnik_SRA_DrivingTrailer_rear,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Sputnik_SRA_Trailer,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor_r,   "gfx/SSD_EMU_Sputnik_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_SRA_Trailer;
    return spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1_r;
    return sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Sputnik_SRA_Trailer;
    return sw_SSD_EMU_Sputnik_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2_r;
    return sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_SRA_Trailer;
    3 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Sputnik_SRA_sidecheck_4_r;
    5 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Sputnik_SRA_sidecheck_6_r;
    return sw_SSD_EMU_Sputnik_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_SRA_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1;
    return sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1;
    return spriteset_SSD_EMU_Sputnik_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2;
    return sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_SRA_Trailer;
    3 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_1;
    4 : sw_SSD_EMU_Sputnik_SRA_sidecheck_4;
    5 : sw_SSD_EMU_Sputnik_SRA_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Sputnik_SRA_sidecheck_6;
    return sw_SSD_EMU_Sputnik_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Sputnik_SRA_Motor_lead; //Panto
    return spriteset_SSD_EMU_Sputnik_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Sputnik_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Sputnik_SRA_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Sputnik_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Sputnik_SRA_frontcheck; //We are going forwards
    return sw_SSD_EMU_Sputnik_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Sputnik_SRA_lencheck;
    return sw_SSD_EMU_Sputnik_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Sputnik_SRA, 10554) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_SPUTNIK);
        introduction_date:                date(1957,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Sputnik;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Sputnik_SRA_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Sputnik_attach ;
        purchase: spriteset_SSD_EMU_Sputnik_SRA_purchase;
        additional_text: string(STR_INFO_SSD_EMU_SPUTNIK);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Sputnik_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

//Sputnik_Cityrail
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_purchase,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_Motor_lead,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_Motor_rear,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_DrivingTrailer_lead,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_DrivingTrailer_rear,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_Trailer,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor_r,   "gfx/SSD_EMU_Sputnik_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
    return spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1_r;
    return sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
    return sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2_r;
    return sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
    3 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Sputnik_Cityrail_sidecheck_4_r;
    5 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Sputnik_Cityrail_sidecheck_6_r;
    return sw_SSD_EMU_Sputnik_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Sputnik_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1;
    return sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1;
    return spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2;
    return sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Sputnik_Cityrail_Trailer;
    3 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_1;
    4 : sw_SSD_EMU_Sputnik_Cityrail_sidecheck_4;
    5 : sw_SSD_EMU_Sputnik_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Sputnik_Cityrail_sidecheck_6;
    return sw_SSD_EMU_Sputnik_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Sputnik_Cityrail_Motor_lead; //Panto
    return spriteset_SSD_EMU_Sputnik_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Sputnik_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Sputnik_Cityrail_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Sputnik_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Sputnik_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Sputnik_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Sputnik_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Sputnik_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Sputnik_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Sputnik_Cityrail_frontcheck; //We are going forwards
    return sw_SSD_EMU_Sputnik_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Sputnik_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Sputnik_Cityrail_lencheck;
    return sw_SSD_EMU_Sputnik_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Sputnik_Cityrail, 10555) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_SPUTNIK);
        introduction_date:                date(1957,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  101/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Sputnik;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Sputnik_Cityrail_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Sputnik_attach ;
        purchase: spriteset_SSD_EMU_Sputnik_Cityrail_purchase;
        additional_text: string(STR_INFO_SSD_EMU_SPUTNIK);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Sputnik_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (101/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        46;
		running_cost_factor: 45;

    }
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_attach, vehicle_type_id){
    Item_SXEMU_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SXEMU_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SXEMU_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//SXEMU_Liv1
spriteset(spriteset_SXEMU_Liv1_purchase,   "gfx/SXEMU_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_SXEMU_Liv1_Motor_lead,   "gfx/SXEMU_Liv1.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SXEMU_Liv1_Motor_rear,   "gfx/SXEMU_Liv1.png") {template_7_alt_r(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SXEMU_Liv1_DrivingTrailer_lead,   "gfx/SXEMU_Liv1.png") {template_7(187, 39)}
spriteset(spriteset_SXEMU_Liv1_DrivingTrailer_rear,   "gfx/SXEMU_Liv1.png") {template_7_alt_r(187, 69)}
spriteset(spriteset_SXEMU_Liv1_Trailer,   "gfx/SXEMU_Liv1.png") {template_7(7, 99)}
spriteset(spriteset_SXEMU_Liv1_NonControlMotor,   "gfx/SXEMU_Liv1.png") {template_7_r(187, 99)}
spriteset(spriteset_SXEMU_Liv1_NonControlMotor_r,   "gfx/SXEMU_Liv1.png") {template_7(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SXEMU_Liv1_NonControlMotor_r;
    return spriteset_SXEMU_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SXEMU_Liv1_NonControlMotor;
    return spriteset_SXEMU_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv1_NonControlMotor_r;
    return spriteset_SXEMU_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv1_Trailer;
    return spriteset_SXEMU_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SXEMU_Liv1_NonControlMotor;
    return spriteset_SXEMU_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv1_pantocheck_at_1_r;
    return sw_SXEMU_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SXEMU_Liv1_Trailer;
    return sw_SXEMU_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv1_pantocheck_at_2_r;
    return sw_SXEMU_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SXEMU_Liv1_Trailer;
    3 : sw_SXEMU_Liv1_pantocheck_at_1_r;
    4 : sw_SXEMU_Liv1_sidecheck_4_r;
    5 : sw_SXEMU_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_SXEMU_Liv1_sidecheck_6_r;
    return sw_SXEMU_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SXEMU_Liv1_NonControlMotor_r;
    return spriteset_SXEMU_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SXEMU_Liv1_NonControlMotor;
    return spriteset_SXEMU_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv1_NonControlMotor_r;
    return spriteset_SXEMU_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SXEMU_Liv1_NonControlMotor;
    return spriteset_SXEMU_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv1_pantocheck_at_1;
    return sw_SXEMU_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv1_pantocheck_at_1;
    return spriteset_SXEMU_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv1_pantocheck_at_2;
    return sw_SXEMU_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SXEMU_Liv1_Trailer;
    3 : sw_SXEMU_Liv1_pantocheck_at_1;
    4 : sw_SXEMU_Liv1_sidecheck_4;
    5 : sw_SXEMU_Liv1_pantocheck_at_2;
    6 .. 7 : sw_SXEMU_Liv1_sidecheck_6;
    return sw_SXEMU_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SXEMU_Liv1_Motor_lead; //Panto
    return spriteset_SXEMU_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SXEMU_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_SXEMU_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SXEMU_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SXEMU_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_SXEMU_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SXEMU_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SXEMU_Liv1_Motor_lead;        //Front panto
    return spriteset_SXEMU_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SXEMU_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_SXEMU_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_SXEMU_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_SXEMU_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SXEMU_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_SXEMU_Liv1_frontcheck; //We are going forwards
    return sw_SXEMU_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SXEMU_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_SXEMU_Liv1_lencheck;
    return sw_SXEMU_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_SXEMU_Liv1, 10600) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SXEMU);
        introduction_date:                date(1965,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                        28 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             160;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SXEMU_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SXEMU_Liv1_directioncheck;
        can_attach_wagon: sw_SXEMU_attach ;
        purchase: spriteset_SXEMU_Liv1_purchase;
        additional_text: string(STR_INFO_SXEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SXEMU_Liv1_revcheck ;
        length                      : 7;
        cargo_capacity              : (82/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        27;
		running_cost_factor: 40;

    }
}

//SXEMU_Liv2
spriteset(spriteset_SXEMU_Liv2_purchase,   "gfx/SXEMU_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_SXEMU_Liv2_Motor_lead,   "gfx/SXEMU_Liv2.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SXEMU_Liv2_Motor_rear,   "gfx/SXEMU_Liv2.png") {template_7_alt_r(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SXEMU_Liv2_DrivingTrailer_lead,   "gfx/SXEMU_Liv2.png") {template_7(187, 39)}
spriteset(spriteset_SXEMU_Liv2_DrivingTrailer_rear,   "gfx/SXEMU_Liv2.png") {template_7_alt_r(187, 69)}
spriteset(spriteset_SXEMU_Liv2_Trailer,   "gfx/SXEMU_Liv2.png") {template_7(7, 99)}
spriteset(spriteset_SXEMU_Liv2_NonControlMotor,   "gfx/SXEMU_Liv2.png") {template_7_r(187, 99)}
spriteset(spriteset_SXEMU_Liv2_NonControlMotor_r,   "gfx/SXEMU_Liv2.png") {template_7(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SXEMU_Liv2_NonControlMotor_r;
    return spriteset_SXEMU_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SXEMU_Liv2_NonControlMotor;
    return spriteset_SXEMU_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv2_NonControlMotor_r;
    return spriteset_SXEMU_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv2_Trailer;
    return spriteset_SXEMU_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SXEMU_Liv2_NonControlMotor;
    return spriteset_SXEMU_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv2_pantocheck_at_1_r;
    return sw_SXEMU_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SXEMU_Liv2_Trailer;
    return sw_SXEMU_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv2_pantocheck_at_2_r;
    return sw_SXEMU_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SXEMU_Liv2_Trailer;
    3 : sw_SXEMU_Liv2_pantocheck_at_1_r;
    4 : sw_SXEMU_Liv2_sidecheck_4_r;
    5 : sw_SXEMU_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_SXEMU_Liv2_sidecheck_6_r;
    return sw_SXEMU_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SXEMU_Liv2_NonControlMotor_r;
    return spriteset_SXEMU_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SXEMU_Liv2_NonControlMotor;
    return spriteset_SXEMU_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv2_NonControlMotor_r;
    return spriteset_SXEMU_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SXEMU_Liv2_NonControlMotor;
    return spriteset_SXEMU_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv2_pantocheck_at_1;
    return sw_SXEMU_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv2_pantocheck_at_1;
    return spriteset_SXEMU_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv2_pantocheck_at_2;
    return sw_SXEMU_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SXEMU_Liv2_Trailer;
    3 : sw_SXEMU_Liv2_pantocheck_at_1;
    4 : sw_SXEMU_Liv2_sidecheck_4;
    5 : sw_SXEMU_Liv2_pantocheck_at_2;
    6 .. 7 : sw_SXEMU_Liv2_sidecheck_6;
    return sw_SXEMU_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SXEMU_Liv2_Motor_lead; //Panto
    return spriteset_SXEMU_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SXEMU_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_SXEMU_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SXEMU_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SXEMU_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_SXEMU_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SXEMU_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SXEMU_Liv2_Motor_lead;        //Front panto
    return spriteset_SXEMU_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SXEMU_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_SXEMU_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_SXEMU_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_SXEMU_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SXEMU_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_SXEMU_Liv2_frontcheck; //We are going forwards
    return sw_SXEMU_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SXEMU_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_SXEMU_Liv2_lencheck;
    return sw_SXEMU_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_SXEMU_Liv2, 10601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SXEMU);
        introduction_date:                date(1965,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                        28 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             160;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SXEMU_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SXEMU_Liv2_directioncheck;
        can_attach_wagon: sw_SXEMU_attach ;
        purchase: spriteset_SXEMU_Liv2_purchase;
        additional_text: string(STR_INFO_SXEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SXEMU_Liv2_revcheck ;
        length                      : 7;
        cargo_capacity              : (82/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        27;
		running_cost_factor: 40;

    }
}

//SXEMU_Liv3
spriteset(spriteset_SXEMU_Liv3_purchase,   "gfx/SXEMU_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_SXEMU_Liv3_Motor_lead,   "gfx/SXEMU_Liv3.png") {template_7(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SXEMU_Liv3_Motor_rear,   "gfx/SXEMU_Liv3.png") {template_7_alt_r(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SXEMU_Liv3_DrivingTrailer_lead,   "gfx/SXEMU_Liv3.png") {template_7(187, 39)}
spriteset(spriteset_SXEMU_Liv3_DrivingTrailer_rear,   "gfx/SXEMU_Liv3.png") {template_7_alt_r(187, 69)}
spriteset(spriteset_SXEMU_Liv3_Trailer,   "gfx/SXEMU_Liv3.png") {template_7(7, 99)}
spriteset(spriteset_SXEMU_Liv3_NonControlMotor,   "gfx/SXEMU_Liv3.png") {template_7_r(187, 99)}
spriteset(spriteset_SXEMU_Liv3_NonControlMotor_r,   "gfx/SXEMU_Liv3.png") {template_7(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SXEMU_Liv3_NonControlMotor_r;
    return spriteset_SXEMU_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SXEMU_Liv3_NonControlMotor;
    return spriteset_SXEMU_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv3_NonControlMotor_r;
    return spriteset_SXEMU_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv3_Trailer;
    return spriteset_SXEMU_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SXEMU_Liv3_NonControlMotor;
    return spriteset_SXEMU_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv3_pantocheck_at_1_r;
    return sw_SXEMU_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SXEMU_Liv3_Trailer;
    return sw_SXEMU_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv3_pantocheck_at_2_r;
    return sw_SXEMU_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SXEMU_Liv3_Trailer;
    3 : sw_SXEMU_Liv3_pantocheck_at_1_r;
    4 : sw_SXEMU_Liv3_sidecheck_4_r;
    5 : sw_SXEMU_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_SXEMU_Liv3_sidecheck_6_r;
    return sw_SXEMU_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SXEMU_Liv3_NonControlMotor_r;
    return spriteset_SXEMU_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SXEMU_Liv3_NonControlMotor;
    return spriteset_SXEMU_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SXEMU_Liv3_NonControlMotor_r;
    return spriteset_SXEMU_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SXEMU_Liv3_NonControlMotor;
    return spriteset_SXEMU_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv3_pantocheck_at_1;
    return sw_SXEMU_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv3_pantocheck_at_1;
    return spriteset_SXEMU_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SXEMU_Liv3_pantocheck_at_2;
    return sw_SXEMU_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SXEMU_Liv3_Trailer;
    3 : sw_SXEMU_Liv3_pantocheck_at_1;
    4 : sw_SXEMU_Liv3_sidecheck_4;
    5 : sw_SXEMU_Liv3_pantocheck_at_2;
    6 .. 7 : sw_SXEMU_Liv3_sidecheck_6;
    return sw_SXEMU_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SXEMU_Liv3_Motor_lead; //Panto
    return spriteset_SXEMU_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_SXEMU_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_SXEMU_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SXEMU_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SXEMU_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_SXEMU_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SXEMU_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_SXEMU_Liv3_Motor_lead;        //Front panto
    return spriteset_SXEMU_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SXEMU_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_SXEMU_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SXEMU_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_SXEMU_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_SXEMU_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SXEMU_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_SXEMU_Liv3_frontcheck; //We are going forwards
    return sw_SXEMU_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SXEMU_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_SXEMU_Liv3_lencheck;
    return sw_SXEMU_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_SXEMU_Liv3, 10602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SXEMU);
        introduction_date:                date(1965,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            7;

        weight:                        28 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             160;
        cargo_capacity:                  82/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SXEMU_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SXEMU_Liv3_directioncheck;
        can_attach_wagon: sw_SXEMU_attach ;
        purchase: spriteset_SXEMU_Liv3_purchase;
        additional_text: string(STR_INFO_SXEMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SXEMU_Liv3_revcheck ;
        length                      : 7;
        cargo_capacity              : (82/param_capacity_mod) ;
        power                       : 404 ;
		weight:                        27;
		running_cost_factor: 40;

    }
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_attach, vehicle_type_id){
    Item_Hitachi_Silver    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Hitachi_MTA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Hitachi_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Hitachi_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Hitachi_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Hitachi_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_Hitachi_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Hitachi
spriteset(spriteset_Hitachi_Silver_purchase,   "gfx/Hitachi_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_Silver_Motor_lead,   "gfx/Hitachi_Silver.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_Silver_Motor_rear,   "gfx/Hitachi_Silver.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_Silver_DrivingTrailer_lead,   "gfx/Hitachi_Silver.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_Silver_DrivingTrailer_rear,   "gfx/Hitachi_Silver.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_Silver_Trailer,   "gfx/Hitachi_Silver.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_Silver_NonControlMotor,   "gfx/Hitachi_Silver.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_Silver_NonControlMotor_r,   "gfx/Hitachi_Silver.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Silver_NonControlMotor_r;
    return spriteset_Hitachi_Silver_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Silver_NonControlMotor;
    return spriteset_Hitachi_Silver_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Silver_NonControlMotor_r;
    return spriteset_Hitachi_Silver_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Silver_Trailer;
    return spriteset_Hitachi_Silver_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Silver_NonControlMotor;
    return spriteset_Hitachi_Silver_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Silver_pantocheck_at_1_r;
    return sw_Hitachi_Silver_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_Silver_Trailer;
    return sw_Hitachi_Silver_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Silver_pantocheck_at_2_r;
    return sw_Hitachi_Silver_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Silver_Trailer;
    3 : sw_Hitachi_Silver_pantocheck_at_1_r;
    4 : sw_Hitachi_Silver_sidecheck_4_r;
    5 : sw_Hitachi_Silver_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_Silver_sidecheck_6_r;
    return sw_Hitachi_Silver_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Silver_NonControlMotor_r;
    return spriteset_Hitachi_Silver_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Silver_NonControlMotor;
    return spriteset_Hitachi_Silver_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Silver_NonControlMotor_r;
    return spriteset_Hitachi_Silver_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Silver_NonControlMotor;
    return spriteset_Hitachi_Silver_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Silver_pantocheck_at_1;
    return sw_Hitachi_Silver_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Silver_pantocheck_at_1;
    return spriteset_Hitachi_Silver_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Silver_pantocheck_at_2;
    return sw_Hitachi_Silver_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Silver_Trailer;
    3 : sw_Hitachi_Silver_pantocheck_at_1;
    4 : sw_Hitachi_Silver_sidecheck_4;
    5 : sw_Hitachi_Silver_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_Silver_sidecheck_6;
    return sw_Hitachi_Silver_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_Silver_Motor_lead; //Panto
    return spriteset_Hitachi_Silver_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_Silver_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_Silver_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_Silver_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_Silver_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_Silver_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_Silver_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_Silver_Motor_lead;        //Front panto
    return spriteset_Hitachi_Silver_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_Silver_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_Silver_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Silver_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_Silver_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_Silver_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Silver_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_Silver_frontcheck; //We are going forwards
    return sw_Hitachi_Silver_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Silver_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_Silver_lencheck;
    return sw_Hitachi_Silver_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_Silver, 10701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_Silver_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_Silver_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_Silver_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

//Hitachi
spriteset(spriteset_Hitachi_MTA_purchase,   "gfx/Hitachi_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_MTA_Motor_lead,   "gfx/Hitachi_MTA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_MTA_Motor_rear,   "gfx/Hitachi_MTA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_MTA_DrivingTrailer_lead,   "gfx/Hitachi_MTA.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_MTA_DrivingTrailer_rear,   "gfx/Hitachi_MTA.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_MTA_Trailer,   "gfx/Hitachi_MTA.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_MTA_NonControlMotor,   "gfx/Hitachi_MTA.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_MTA_NonControlMotor_r,   "gfx/Hitachi_MTA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_MTA_NonControlMotor_r;
    return spriteset_Hitachi_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_MTA_NonControlMotor;
    return spriteset_Hitachi_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_MTA_NonControlMotor_r;
    return spriteset_Hitachi_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_MTA_Trailer;
    return spriteset_Hitachi_MTA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_MTA_NonControlMotor;
    return spriteset_Hitachi_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTA_pantocheck_at_1_r;
    return sw_Hitachi_MTA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_MTA_Trailer;
    return sw_Hitachi_MTA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTA_pantocheck_at_2_r;
    return sw_Hitachi_MTA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_MTA_Trailer;
    3 : sw_Hitachi_MTA_pantocheck_at_1_r;
    4 : sw_Hitachi_MTA_sidecheck_4_r;
    5 : sw_Hitachi_MTA_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_MTA_sidecheck_6_r;
    return sw_Hitachi_MTA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_MTA_NonControlMotor_r;
    return spriteset_Hitachi_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_MTA_NonControlMotor;
    return spriteset_Hitachi_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_MTA_NonControlMotor_r;
    return spriteset_Hitachi_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_MTA_NonControlMotor;
    return spriteset_Hitachi_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTA_pantocheck_at_1;
    return sw_Hitachi_MTA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTA_pantocheck_at_1;
    return spriteset_Hitachi_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTA_pantocheck_at_2;
    return sw_Hitachi_MTA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_MTA_Trailer;
    3 : sw_Hitachi_MTA_pantocheck_at_1;
    4 : sw_Hitachi_MTA_sidecheck_4;
    5 : sw_Hitachi_MTA_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_MTA_sidecheck_6;
    return sw_Hitachi_MTA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_MTA_Motor_lead; //Panto
    return spriteset_Hitachi_MTA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_MTA_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_MTA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_MTA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_MTA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_MTA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_MTA_Motor_lead;        //Front panto
    return spriteset_Hitachi_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_MTA_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_MTA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTA_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_MTA_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_MTA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_MTA_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_MTA_frontcheck; //We are going forwards
    return sw_Hitachi_MTA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_MTA_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_MTA_lencheck;
    return sw_Hitachi_MTA_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_MTA, 10702) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_MTA_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_MTA_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_MTA_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

//Hitachi
spriteset(spriteset_Hitachi_Connex_purchase,   "gfx/Hitachi_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_Connex_Motor_lead,   "gfx/Hitachi_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_Connex_Motor_rear,   "gfx/Hitachi_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_Connex_DrivingTrailer_lead,   "gfx/Hitachi_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_Connex_DrivingTrailer_rear,   "gfx/Hitachi_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_Connex_Trailer,   "gfx/Hitachi_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_Connex_NonControlMotor,   "gfx/Hitachi_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_Connex_NonControlMotor_r,   "gfx/Hitachi_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Connex_NonControlMotor_r;
    return spriteset_Hitachi_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Connex_NonControlMotor;
    return spriteset_Hitachi_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Connex_NonControlMotor_r;
    return spriteset_Hitachi_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Connex_Trailer;
    return spriteset_Hitachi_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Connex_NonControlMotor;
    return spriteset_Hitachi_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Connex_pantocheck_at_1_r;
    return sw_Hitachi_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_Connex_Trailer;
    return sw_Hitachi_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Connex_pantocheck_at_2_r;
    return sw_Hitachi_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Connex_Trailer;
    3 : sw_Hitachi_Connex_pantocheck_at_1_r;
    4 : sw_Hitachi_Connex_sidecheck_4_r;
    5 : sw_Hitachi_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_Connex_sidecheck_6_r;
    return sw_Hitachi_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Connex_NonControlMotor_r;
    return spriteset_Hitachi_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Connex_NonControlMotor;
    return spriteset_Hitachi_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Connex_NonControlMotor_r;
    return spriteset_Hitachi_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Connex_NonControlMotor;
    return spriteset_Hitachi_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Connex_pantocheck_at_1;
    return sw_Hitachi_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Connex_pantocheck_at_1;
    return spriteset_Hitachi_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Connex_pantocheck_at_2;
    return sw_Hitachi_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Connex_Trailer;
    3 : sw_Hitachi_Connex_pantocheck_at_1;
    4 : sw_Hitachi_Connex_sidecheck_4;
    5 : sw_Hitachi_Connex_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_Connex_sidecheck_6;
    return sw_Hitachi_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_Connex_Motor_lead; //Panto
    return spriteset_Hitachi_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_Connex_Motor_lead;        //Front panto
    return spriteset_Hitachi_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Connex_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Connex_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_Connex_frontcheck; //We are going forwards
    return sw_Hitachi_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Connex_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_Connex_lencheck;
    return sw_Hitachi_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_Connex, 10703) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_Connex_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_Connex_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

//Hitachi
spriteset(spriteset_Hitachi_MTM_purchase,   "gfx/Hitachi_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_MTM_Motor_lead,   "gfx/Hitachi_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_MTM_Motor_rear,   "gfx/Hitachi_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_MTM_DrivingTrailer_lead,   "gfx/Hitachi_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_MTM_DrivingTrailer_rear,   "gfx/Hitachi_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_MTM_Trailer,   "gfx/Hitachi_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_MTM_NonControlMotor,   "gfx/Hitachi_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_MTM_NonControlMotor_r,   "gfx/Hitachi_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_MTM_NonControlMotor_r;
    return spriteset_Hitachi_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_MTM_NonControlMotor;
    return spriteset_Hitachi_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_MTM_NonControlMotor_r;
    return spriteset_Hitachi_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_MTM_Trailer;
    return spriteset_Hitachi_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_MTM_NonControlMotor;
    return spriteset_Hitachi_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTM_pantocheck_at_1_r;
    return sw_Hitachi_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_MTM_Trailer;
    return sw_Hitachi_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTM_pantocheck_at_2_r;
    return sw_Hitachi_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_MTM_Trailer;
    3 : sw_Hitachi_MTM_pantocheck_at_1_r;
    4 : sw_Hitachi_MTM_sidecheck_4_r;
    5 : sw_Hitachi_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_MTM_sidecheck_6_r;
    return sw_Hitachi_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_MTM_NonControlMotor_r;
    return spriteset_Hitachi_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_MTM_NonControlMotor;
    return spriteset_Hitachi_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_MTM_NonControlMotor_r;
    return spriteset_Hitachi_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_MTM_NonControlMotor;
    return spriteset_Hitachi_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTM_pantocheck_at_1;
    return sw_Hitachi_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTM_pantocheck_at_1;
    return spriteset_Hitachi_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_MTM_pantocheck_at_2;
    return sw_Hitachi_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_MTM_Trailer;
    3 : sw_Hitachi_MTM_pantocheck_at_1;
    4 : sw_Hitachi_MTM_sidecheck_4;
    5 : sw_Hitachi_MTM_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_MTM_sidecheck_6;
    return sw_Hitachi_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_MTM_Motor_lead; //Panto
    return spriteset_Hitachi_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_MTM_Motor_lead;        //Front panto
    return spriteset_Hitachi_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_MTM_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_MTM_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_MTM_frontcheck; //We are going forwards
    return sw_Hitachi_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_MTM_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_MTM_lencheck;
    return sw_Hitachi_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_MTM, 10704) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_MTM_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_MTM_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

//Hitachi
spriteset(spriteset_Hitachi_Liv1_purchase,   "gfx/Hitachi_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_Liv1_Motor_lead,   "gfx/Hitachi_Liv1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_Liv1_Motor_rear,   "gfx/Hitachi_Liv1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_Liv1_DrivingTrailer_lead,   "gfx/Hitachi_Liv1.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_Liv1_DrivingTrailer_rear,   "gfx/Hitachi_Liv1.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_Liv1_Trailer,   "gfx/Hitachi_Liv1.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_Liv1_NonControlMotor,   "gfx/Hitachi_Liv1.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_Liv1_NonControlMotor_r,   "gfx/Hitachi_Liv1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Liv1_NonControlMotor_r;
    return spriteset_Hitachi_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Liv1_NonControlMotor;
    return spriteset_Hitachi_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv1_NonControlMotor_r;
    return spriteset_Hitachi_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv1_Trailer;
    return spriteset_Hitachi_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Liv1_NonControlMotor;
    return spriteset_Hitachi_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv1_pantocheck_at_1_r;
    return sw_Hitachi_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_Liv1_Trailer;
    return sw_Hitachi_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv1_pantocheck_at_2_r;
    return sw_Hitachi_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Liv1_Trailer;
    3 : sw_Hitachi_Liv1_pantocheck_at_1_r;
    4 : sw_Hitachi_Liv1_sidecheck_4_r;
    5 : sw_Hitachi_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_Liv1_sidecheck_6_r;
    return sw_Hitachi_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Liv1_NonControlMotor_r;
    return spriteset_Hitachi_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Liv1_NonControlMotor;
    return spriteset_Hitachi_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv1_NonControlMotor_r;
    return spriteset_Hitachi_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Liv1_NonControlMotor;
    return spriteset_Hitachi_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv1_pantocheck_at_1;
    return sw_Hitachi_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv1_pantocheck_at_1;
    return spriteset_Hitachi_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv1_pantocheck_at_2;
    return sw_Hitachi_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Liv1_Trailer;
    3 : sw_Hitachi_Liv1_pantocheck_at_1;
    4 : sw_Hitachi_Liv1_sidecheck_4;
    5 : sw_Hitachi_Liv1_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_Liv1_sidecheck_6;
    return sw_Hitachi_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_Liv1_Motor_lead; //Panto
    return spriteset_Hitachi_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_Liv1_Motor_lead;        //Front panto
    return spriteset_Hitachi_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_Liv1_frontcheck; //We are going forwards
    return sw_Hitachi_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_Liv1_lencheck;
    return sw_Hitachi_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_Liv1, 10705) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_Liv1_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_Liv1_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

//Hitachi
spriteset(spriteset_Hitachi_Liv2_purchase,   "gfx/Hitachi_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_Liv2_Motor_lead,   "gfx/Hitachi_Liv2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_Liv2_Motor_rear,   "gfx/Hitachi_Liv2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_Liv2_DrivingTrailer_lead,   "gfx/Hitachi_Liv2.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_Liv2_DrivingTrailer_rear,   "gfx/Hitachi_Liv2.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_Liv2_Trailer,   "gfx/Hitachi_Liv2.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_Liv2_NonControlMotor,   "gfx/Hitachi_Liv2.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_Liv2_NonControlMotor_r,   "gfx/Hitachi_Liv2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Liv2_NonControlMotor_r;
    return spriteset_Hitachi_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Liv2_NonControlMotor;
    return spriteset_Hitachi_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv2_NonControlMotor_r;
    return spriteset_Hitachi_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv2_Trailer;
    return spriteset_Hitachi_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Liv2_NonControlMotor;
    return spriteset_Hitachi_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv2_pantocheck_at_1_r;
    return sw_Hitachi_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_Liv2_Trailer;
    return sw_Hitachi_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv2_pantocheck_at_2_r;
    return sw_Hitachi_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Liv2_Trailer;
    3 : sw_Hitachi_Liv2_pantocheck_at_1_r;
    4 : sw_Hitachi_Liv2_sidecheck_4_r;
    5 : sw_Hitachi_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_Liv2_sidecheck_6_r;
    return sw_Hitachi_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Liv2_NonControlMotor_r;
    return spriteset_Hitachi_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Liv2_NonControlMotor;
    return spriteset_Hitachi_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv2_NonControlMotor_r;
    return spriteset_Hitachi_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Liv2_NonControlMotor;
    return spriteset_Hitachi_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv2_pantocheck_at_1;
    return sw_Hitachi_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv2_pantocheck_at_1;
    return spriteset_Hitachi_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv2_pantocheck_at_2;
    return sw_Hitachi_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Liv2_Trailer;
    3 : sw_Hitachi_Liv2_pantocheck_at_1;
    4 : sw_Hitachi_Liv2_sidecheck_4;
    5 : sw_Hitachi_Liv2_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_Liv2_sidecheck_6;
    return sw_Hitachi_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_Liv2_Motor_lead; //Panto
    return spriteset_Hitachi_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_Liv2_Motor_lead;        //Front panto
    return spriteset_Hitachi_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_Liv2_frontcheck; //We are going forwards
    return sw_Hitachi_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_Liv2_lencheck;
    return sw_Hitachi_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_Liv2, 10706) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_Liv2_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_Liv2_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

//Hitachi
spriteset(spriteset_Hitachi_Liv3_purchase,   "gfx/Hitachi_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_Hitachi_Liv3_Motor_lead,   "gfx/Hitachi_Liv3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Hitachi_Liv3_Motor_rear,   "gfx/Hitachi_Liv3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Hitachi_Liv3_DrivingTrailer_lead,   "gfx/Hitachi_Liv3.png") {template_old_8(187, 39)}
spriteset(spriteset_Hitachi_Liv3_DrivingTrailer_rear,   "gfx/Hitachi_Liv3.png") {template_old_8(187, 64)}
spriteset(spriteset_Hitachi_Liv3_Trailer,   "gfx/Hitachi_Liv3.png") {template_old_8(7, 89)}
spriteset(spriteset_Hitachi_Liv3_NonControlMotor,   "gfx/Hitachi_Liv3.png") {template_old_8(187, 89)}
spriteset(spriteset_Hitachi_Liv3_NonControlMotor_r,   "gfx/Hitachi_Liv3.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Liv3_NonControlMotor_r;
    return spriteset_Hitachi_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Liv3_NonControlMotor;
    return spriteset_Hitachi_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv3_NonControlMotor_r;
    return spriteset_Hitachi_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv3_Trailer;
    return spriteset_Hitachi_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Liv3_NonControlMotor;
    return spriteset_Hitachi_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv3_pantocheck_at_1_r;
    return sw_Hitachi_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Hitachi_Liv3_Trailer;
    return sw_Hitachi_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv3_pantocheck_at_2_r;
    return sw_Hitachi_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Liv3_Trailer;
    3 : sw_Hitachi_Liv3_pantocheck_at_1_r;
    4 : sw_Hitachi_Liv3_sidecheck_4_r;
    5 : sw_Hitachi_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_Hitachi_Liv3_sidecheck_6_r;
    return sw_Hitachi_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Hitachi_Liv3_NonControlMotor_r;
    return spriteset_Hitachi_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Hitachi_Liv3_NonControlMotor;
    return spriteset_Hitachi_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Hitachi_Liv3_NonControlMotor_r;
    return spriteset_Hitachi_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Hitachi_Liv3_NonControlMotor;
    return spriteset_Hitachi_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv3_pantocheck_at_1;
    return sw_Hitachi_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv3_pantocheck_at_1;
    return spriteset_Hitachi_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Hitachi_Liv3_pantocheck_at_2;
    return sw_Hitachi_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Hitachi_Liv3_Trailer;
    3 : sw_Hitachi_Liv3_pantocheck_at_1;
    4 : sw_Hitachi_Liv3_sidecheck_4;
    5 : sw_Hitachi_Liv3_pantocheck_at_2;
    6 .. 7 : sw_Hitachi_Liv3_sidecheck_6;
    return sw_Hitachi_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Hitachi_Liv3_Motor_lead; //Panto
    return spriteset_Hitachi_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_Hitachi_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_Hitachi_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Hitachi_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Hitachi_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_Hitachi_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Hitachi_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_Hitachi_Liv3_Motor_lead;        //Front panto
    return spriteset_Hitachi_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Hitachi_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_Hitachi_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Hitachi_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_Hitachi_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_Hitachi_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_Hitachi_Liv3_frontcheck; //We are going forwards
    return sw_Hitachi_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Hitachi_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_Hitachi_Liv3_lencheck;
    return sw_Hitachi_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_Hitachi_Liv3, 10707) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HITACHI);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             170;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Hitachi_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Hitachi_Liv3_directioncheck;
        can_attach_wagon: sw_Hitachi_attach ;
        purchase: spriteset_Hitachi_Liv3_purchase;
        additional_text: string(STR_INFO_HITACHI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Hitachi_Liv3_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        41;
		running_cost_factor:             43;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_attach, vehicle_type_id){
	Item_SSD_EMU_AUPTMkI_DOT    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkI_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkI_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkI_MTA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkI_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkI_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//AUPTMkI_DOT
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_purchase,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_Motor_lead,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_Motor_rear,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_Trailer,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkI_DOT.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
    return spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
    return sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkI_DOT_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_DOT_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkI_DOT_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_DOT_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_DOT_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkI_DOT_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkI_DOT_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_DOT_sidecheck_6;
    return sw_SSD_EMU_AUPTMkI_DOT_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkI_DOT_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkI_DOT_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_DOT_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_DOT_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_DOT_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_DOT_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_DOT_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_DOT_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkI_DOT_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_DOT_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_DOT_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_DOT_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_DOT_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_DOT_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_DOT_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_DOT_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkI_DOT_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkI_DOT_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_DOT_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkI_DOT_lencheck;
    return sw_SSD_EMU_AUPTMkI_DOT_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkI_DOT, 10726) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKI);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 60;

        variant_group: Item_SSD_EMU_AUPTMkI_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkI_DOT_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkI_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkI_DOT_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkI_DOT_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 600 ;
		weight:                        41;
		running_cost_factor:             45;

    }
}

//AUPTMkI_SRA
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_purchase,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_Motor_lead,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_Motor_rear,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_Trailer,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkI_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
    return spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
    return sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkI_SRA_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_SRA_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkI_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_SRA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_SRA_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkI_SRA_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkI_SRA_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_SRA_sidecheck_6;
    return sw_SSD_EMU_AUPTMkI_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkI_SRA_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkI_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkI_SRA_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkI_SRA_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkI_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkI_SRA_lencheck;
    return sw_SSD_EMU_AUPTMkI_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkI_SRA, 10727) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKI);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 60;

        variant_group: Item_SSD_EMU_AUPTMkI_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkI_SRA_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkI_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkI_SRA_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkI_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 600 ;
		weight:                        41;
		running_cost_factor:             45;

    }
}

//AUPTMkI_Cityrail
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_purchase,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_lead,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_rear,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkI_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
    return sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Cityrail_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_Cityrail_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkI_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_6;
    return sw_SSD_EMU_AUPTMkI_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkI_Cityrail_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkI_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkI_Cityrail_lencheck;
    return sw_SSD_EMU_AUPTMkI_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkI_Cityrail, 10728) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKI);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 60;

        variant_group: Item_SSD_EMU_AUPTMkI_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkI_Cityrail_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkI_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkI_Cityrail_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkI_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 600 ;
		weight:                        41;
		running_cost_factor:             45;

    }
}

//AUPTMkI_MTA
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_purchase,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_Motor_lead,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_Motor_rear,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_Trailer,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkI_MTA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
    return spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
    return sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkI_MTA_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_MTA_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkI_MTA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTA_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_MTA_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkI_MTA_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkI_MTA_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_MTA_sidecheck_6;
    return sw_SSD_EMU_AUPTMkI_MTA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkI_MTA_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkI_MTA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_MTA_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_MTA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_MTA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_MTA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_MTA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkI_MTA_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_MTA_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_MTA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTA_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_MTA_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_MTA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_MTA_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkI_MTA_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkI_MTA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_MTA_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkI_MTA_lencheck;
    return sw_SSD_EMU_AUPTMkI_MTA_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkI_MTA, 10729) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKI);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 60;

        variant_group: Item_SSD_EMU_AUPTMkI_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkI_MTA_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkI_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkI_MTA_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkI_MTA_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 600 ;
		weight:                        41;
		running_cost_factor:             45;

    }
}

//AUPTMkI_Connex
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_purchase,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_Motor_lead,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_Motor_rear,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_Trailer,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkI_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
    return spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
    return sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkI_Connex_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_Connex_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkI_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_Connex_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_Connex_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkI_Connex_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkI_Connex_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_Connex_sidecheck_6;
    return sw_SSD_EMU_AUPTMkI_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkI_Connex_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkI_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkI_Connex_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_Connex_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_Connex_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkI_Connex_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkI_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_Connex_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkI_Connex_lencheck;
    return sw_SSD_EMU_AUPTMkI_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkI_Connex, 10730) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKI);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 60;

        variant_group: Item_SSD_EMU_AUPTMkI_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkI_Connex_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkI_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkI_Connex_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkI_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 600 ;
		weight:                        41;
		running_cost_factor:             45;

    }
}

//AUPTMkI_MTM
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_purchase,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_Motor_lead,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_Motor_rear,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_Trailer,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkI_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
    return spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
    return sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkI_MTM_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_MTM_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkI_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkI_MTM_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkI_MTM_Trailer;
    3 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkI_MTM_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkI_MTM_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkI_MTM_sidecheck_6;
    return sw_SSD_EMU_AUPTMkI_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkI_MTM_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkI_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkI_MTM_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkI_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkI_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkI_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkI_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkI_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkI_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkI_MTM_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkI_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkI_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkI_MTM_lencheck;
    return sw_SSD_EMU_AUPTMkI_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkI_MTM, 10731) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKI);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        41 ton;
        speed:                            115 km/h;
        power:                            1200 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  115/param_capacity_mod;
        loading_speed: 60;

        variant_group: Item_SSD_EMU_AUPTMkI_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkI_MTM_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkI_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkI_MTM_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkI_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (115/param_capacity_mod) ;
        power                       : 600 ;
		weight:                        41;
		running_cost_factor:             45;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_attach, vehicle_type_id){
	Item_SSD_EMU_AUPTMkII_DOT1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkII_DOT2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkII_QR1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AUPTMkII_QR2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//AUPTMkII_DOT1
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_purchase,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_lead,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_rear,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkII_DOT1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
    return sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_DOT1_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkII_DOT1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_6;
    return sw_SSD_EMU_AUPTMkII_DOT1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkII_DOT1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_DOT1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_DOT1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_DOT1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_DOT1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_DOT1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_DOT1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_DOT1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_DOT1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_DOT1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_DOT1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkII_DOT1_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkII_DOT1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_DOT1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkII_DOT1_lencheck;
    return sw_SSD_EMU_AUPTMkII_DOT1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkII_DOT1, 10751) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKII);
        introduction_date:                date(1977,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AUPTMkII_DOT1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkII_DOT1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkII_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkII_DOT1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKII);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkII_DOT1_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

//AUPTMkII_DOT2
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_purchase,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_lead,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_rear,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkII_DOT2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
    return sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_DOT2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_DOT2_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkII_DOT2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_6;
    return sw_SSD_EMU_AUPTMkII_DOT2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkII_DOT2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_DOT2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_DOT2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_DOT2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_DOT2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_DOT2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_DOT2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_DOT2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_DOT2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_DOT2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_DOT2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_DOT2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkII_DOT2_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkII_DOT2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_DOT2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkII_DOT2_lencheck;
    return sw_SSD_EMU_AUPTMkII_DOT2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkII_DOT2, 10752) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKII);
        introduction_date:                date(1977,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AUPTMkII_DOT1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkII_DOT2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkII_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkII_DOT2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKII);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkII_DOT2_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

//AUPTMkII_QR1
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_purchase,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_Motor_lead,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_Motor_rear,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_Trailer,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkII_QR1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
    return spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
    return sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkII_QR1_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_QR1_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkII_QR1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR1_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_QR1_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkII_QR1_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkII_QR1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_QR1_sidecheck_6;
    return sw_SSD_EMU_AUPTMkII_QR1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkII_QR1_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkII_QR1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_QR1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_QR1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_QR1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_QR1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_QR1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkII_QR1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_QR1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_QR1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_QR1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_QR1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_QR1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkII_QR1_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkII_QR1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_QR1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkII_QR1_lencheck;
    return sw_SSD_EMU_AUPTMkII_QR1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkII_QR1, 10753) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKII);
        introduction_date:                date(1977,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AUPTMkII_DOT1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkII_QR1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkII_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkII_QR1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKII);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkII_QR1_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

//AUPTMkII_QR2
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_purchase,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_Motor_lead,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_Motor_rear,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_DrivingTrailer_lead,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_DrivingTrailer_rear,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_Trailer,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor_r,   "gfx/SSD_EMU_AUPTMkII_QR2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
    return spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1_r;
    return sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
    return sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2_r;
    return sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AUPTMkII_QR2_sidecheck_4_r;
    5 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_QR2_sidecheck_6_r;
    return sw_SSD_EMU_AUPTMkII_QR2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AUPTMkII_QR2_NonControlMotor;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1;
    return sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1;
    return spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2;
    return sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AUPTMkII_QR2_Trailer;
    3 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_1;
    4 : sw_SSD_EMU_AUPTMkII_QR2_sidecheck_4;
    5 : sw_SSD_EMU_AUPTMkII_QR2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AUPTMkII_QR2_sidecheck_6;
    return sw_SSD_EMU_AUPTMkII_QR2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AUPTMkII_QR2_Motor_lead; //Panto
    return spriteset_SSD_EMU_AUPTMkII_QR2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_QR2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_QR2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_QR2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_QR2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_QR2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AUPTMkII_QR2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AUPTMkII_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AUPTMkII_QR2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AUPTMkII_QR2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AUPTMkII_QR2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AUPTMkII_QR2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AUPTMkII_QR2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_QR2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AUPTMkII_QR2_frontcheck; //We are going forwards
    return sw_SSD_EMU_AUPTMkII_QR2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AUPTMkII_QR2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AUPTMkII_QR2_lencheck;
    return sw_SSD_EMU_AUPTMkII_QR2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AUPTMkII_QR2, 10754) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AUPTMKII);
        introduction_date:                date(1977,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AUPTMkII_DOT1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AUPTMkII_QR2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AUPTMkII_attach ;
        purchase: spriteset_SSD_EMU_AUPTMkII_QR2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AUPTMKII);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AUPTMkII_QR2_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_attach, vehicle_type_id){
	Item_SSD_EMU_QREMU_QR1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_QREMU_QR2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_QREMU_QR3    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//QREMU_QR1
spriteset(spriteset_SSD_EMU_QREMU_QR1_purchase,   "gfx/SSD_EMU_QREMU_QR1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_QREMU_QR1_Motor_lead,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_QREMU_QR1_Motor_rear,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_QREMU_QR1_DrivingTrailer_lead,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_QREMU_QR1_DrivingTrailer_rear,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_QREMU_QR1_Trailer,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_QREMU_QR1_NonControlMotor,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_QREMU_QR1_NonControlMotor_r,   "gfx/SSD_EMU_QREMU_QR1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR1_Trailer;
    return spriteset_SSD_EMU_QREMU_QR1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_1_r;
    return sw_SSD_EMU_QREMU_QR1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_QREMU_QR1_Trailer;
    return sw_SSD_EMU_QREMU_QR1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_2_r;
    return sw_SSD_EMU_QREMU_QR1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_QREMU_QR1_Trailer;
    3 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_QREMU_QR1_sidecheck_4_r;
    5 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_QREMU_QR1_sidecheck_6_r;
    return sw_SSD_EMU_QREMU_QR1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_QREMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_1;
    return sw_SSD_EMU_QREMU_QR1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_1;
    return spriteset_SSD_EMU_QREMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_2;
    return sw_SSD_EMU_QREMU_QR1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_QREMU_QR1_Trailer;
    3 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_1;
    4 : sw_SSD_EMU_QREMU_QR1_sidecheck_4;
    5 : sw_SSD_EMU_QREMU_QR1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_QREMU_QR1_sidecheck_6;
    return sw_SSD_EMU_QREMU_QR1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_QREMU_QR1_Motor_lead; //Panto
    return spriteset_SSD_EMU_QREMU_QR1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_QREMU_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_QREMU_QR1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_QREMU_QR1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_QREMU_QR1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_QREMU_QR1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_QREMU_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_QREMU_QR1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_QREMU_QR1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_QREMU_QR1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_QREMU_QR1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_QREMU_QR1_frontcheck; //We are going forwards
    return sw_SSD_EMU_QREMU_QR1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_QREMU_QR1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_QREMU_QR1_lencheck;
    return sw_SSD_EMU_QREMU_QR1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_QREMU_QR1, 10776) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_QREMU);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_QREMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_QREMU_QR1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_QREMU_attach ;
        purchase: spriteset_SSD_EMU_QREMU_QR1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_QREMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_QREMU_QR1_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

//QREMU_QR2
spriteset(spriteset_SSD_EMU_QREMU_QR2_purchase,   "gfx/SSD_EMU_QREMU_QR2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_QREMU_QR2_Motor_lead,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_QREMU_QR2_Motor_rear,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_QREMU_QR2_DrivingTrailer_lead,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_QREMU_QR2_DrivingTrailer_rear,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_QREMU_QR2_Trailer,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_QREMU_QR2_NonControlMotor,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_QREMU_QR2_NonControlMotor_r,   "gfx/SSD_EMU_QREMU_QR2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR2_Trailer;
    return spriteset_SSD_EMU_QREMU_QR2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_1_r;
    return sw_SSD_EMU_QREMU_QR2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_QREMU_QR2_Trailer;
    return sw_SSD_EMU_QREMU_QR2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_2_r;
    return sw_SSD_EMU_QREMU_QR2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_QREMU_QR2_Trailer;
    3 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_QREMU_QR2_sidecheck_4_r;
    5 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_QREMU_QR2_sidecheck_6_r;
    return sw_SSD_EMU_QREMU_QR2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_QREMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_1;
    return sw_SSD_EMU_QREMU_QR2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_1;
    return spriteset_SSD_EMU_QREMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_2;
    return sw_SSD_EMU_QREMU_QR2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_QREMU_QR2_Trailer;
    3 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_1;
    4 : sw_SSD_EMU_QREMU_QR2_sidecheck_4;
    5 : sw_SSD_EMU_QREMU_QR2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_QREMU_QR2_sidecheck_6;
    return sw_SSD_EMU_QREMU_QR2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_QREMU_QR2_Motor_lead; //Panto
    return spriteset_SSD_EMU_QREMU_QR2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_QREMU_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_QREMU_QR2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_QREMU_QR2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_QREMU_QR2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_QREMU_QR2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_QREMU_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_QREMU_QR2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_QREMU_QR2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_QREMU_QR2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_QREMU_QR2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_QREMU_QR2_frontcheck; //We are going forwards
    return sw_SSD_EMU_QREMU_QR2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_QREMU_QR2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_QREMU_QR2_lencheck;
    return sw_SSD_EMU_QREMU_QR2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_QREMU_QR2, 10777) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_QREMU);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_QREMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_QREMU_QR2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_QREMU_attach ;
        purchase: spriteset_SSD_EMU_QREMU_QR2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_QREMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_QREMU_QR2_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

//QREMU_QR3
spriteset(spriteset_SSD_EMU_QREMU_QR3_purchase,   "gfx/SSD_EMU_QREMU_QR3.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_QREMU_QR3_Motor_lead,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_QREMU_QR3_Motor_rear,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_QREMU_QR3_DrivingTrailer_lead,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_QREMU_QR3_DrivingTrailer_rear,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_QREMU_QR3_Trailer,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_QREMU_QR3_NonControlMotor,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_QREMU_QR3_NonControlMotor_r,   "gfx/SSD_EMU_QREMU_QR3.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR3_Trailer;
    return spriteset_SSD_EMU_QREMU_QR3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_1_r;
    return sw_SSD_EMU_QREMU_QR3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_QREMU_QR3_Trailer;
    return sw_SSD_EMU_QREMU_QR3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_2_r;
    return sw_SSD_EMU_QREMU_QR3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_QREMU_QR3_Trailer;
    3 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_1_r;
    4 : sw_SSD_EMU_QREMU_QR3_sidecheck_4_r;
    5 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_QREMU_QR3_sidecheck_6_r;
    return sw_SSD_EMU_QREMU_QR3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_QREMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_1;
    return sw_SSD_EMU_QREMU_QR3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_1;
    return spriteset_SSD_EMU_QREMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_2;
    return sw_SSD_EMU_QREMU_QR3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_QREMU_QR3_Trailer;
    3 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_1;
    4 : sw_SSD_EMU_QREMU_QR3_sidecheck_4;
    5 : sw_SSD_EMU_QREMU_QR3_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_QREMU_QR3_sidecheck_6;
    return sw_SSD_EMU_QREMU_QR3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_QREMU_QR3_Motor_lead; //Panto
    return spriteset_SSD_EMU_QREMU_QR3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR3_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_QREMU_QR3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_QREMU_QR3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_QREMU_QR3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_QREMU_QR3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_QREMU_QR3_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_QREMU_QR3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_QREMU_QR3_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_QREMU_QR3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_QREMU_QR3_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_QREMU_QR3_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_QREMU_QR3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_QREMU_QR3_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_QREMU_QR3_frontcheck; //We are going forwards
    return sw_SSD_EMU_QREMU_QR3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_QREMU_QR3_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_QREMU_QR3_lencheck;
    return sw_SSD_EMU_QREMU_QR3_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_QREMU_QR3, 10778) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_QREMU);
        introduction_date:                date(1979,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            100 km/h;
        power:                            960 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_QREMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_QREMU_QR3_directioncheck;
        can_attach_wagon: sw_SSD_EMU_QREMU_attach ;
        purchase: spriteset_SSD_EMU_QREMU_QR3_purchase;
        additional_text: string(STR_INFO_SSD_EMU_QREMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_QREMU_QR3_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 480 ;
		weight:                        39;
		running_cost_factor:             45;

    }
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_attach, vehicle_type_id){
    Item_Comeng_SMU_VR    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Comeng_SMU_MTA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Comeng_SMU_MTrain    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Comeng_SMU_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_Comeng_SMU_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}


//Comeng_VR
spriteset(spriteset_Comeng_SMU_VR_purchase,   "gfx/Comeng_SMU_VR.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_SMU_VR_Motor_lead,   "gfx/Comeng_SMU_VR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Comeng_SMU_VR_Motor_rear,   "gfx/Comeng_SMU_VR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Comeng_SMU_VR_DrivingTrailer_lead,   "gfx/Comeng_SMU_VR.png") {template_old_8(187, 39)}
spriteset(spriteset_Comeng_SMU_VR_DrivingTrailer_rear,   "gfx/Comeng_SMU_VR.png") {template_old_8(187, 64)}
spriteset(spriteset_Comeng_SMU_VR_Trailer,   "gfx/Comeng_SMU_VR.png") {template_old_8(7, 89)}
spriteset(spriteset_Comeng_SMU_VR_NonControlMotor,   "gfx/Comeng_SMU_VR.png") {template_old_8(187, 89)}
spriteset(spriteset_Comeng_SMU_VR_NonControlMotor_r,   "gfx/Comeng_SMU_VR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_VR_NonControlMotor_r;
    return spriteset_Comeng_SMU_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_VR_NonControlMotor;
    return spriteset_Comeng_SMU_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_VR_NonControlMotor_r;
    return spriteset_Comeng_SMU_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_VR_Trailer;
    return spriteset_Comeng_SMU_VR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_VR_NonControlMotor;
    return spriteset_Comeng_SMU_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_VR_pantocheck_at_1_r;
    return sw_Comeng_SMU_VR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Comeng_SMU_VR_Trailer;
    return sw_Comeng_SMU_VR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_VR_pantocheck_at_2_r;
    return sw_Comeng_SMU_VR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_VR_Trailer;
    3 : sw_Comeng_SMU_VR_pantocheck_at_1_r;
    4 : sw_Comeng_SMU_VR_sidecheck_4_r;
    5 : sw_Comeng_SMU_VR_pantocheck_at_2_r;
    6 .. 7 : sw_Comeng_SMU_VR_sidecheck_6_r;
    return sw_Comeng_SMU_VR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_VR_NonControlMotor_r;
    return spriteset_Comeng_SMU_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_VR_NonControlMotor;
    return spriteset_Comeng_SMU_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_VR_NonControlMotor_r;
    return spriteset_Comeng_SMU_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_VR_NonControlMotor;
    return spriteset_Comeng_SMU_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_VR_pantocheck_at_1;
    return sw_Comeng_SMU_VR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_VR_pantocheck_at_1;
    return spriteset_Comeng_SMU_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_VR_pantocheck_at_2;
    return sw_Comeng_SMU_VR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_VR_Trailer;
    3 : sw_Comeng_SMU_VR_pantocheck_at_1;
    4 : sw_Comeng_SMU_VR_sidecheck_4;
    5 : sw_Comeng_SMU_VR_pantocheck_at_2;
    6 .. 7 : sw_Comeng_SMU_VR_sidecheck_6;
    return sw_Comeng_SMU_VR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Comeng_SMU_VR_Motor_lead; //Panto
    return spriteset_Comeng_SMU_VR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_panto_direction_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_VR_panto_direction_r_pos;        //Front panto
    return spriteset_Comeng_SMU_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_VR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_VR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_frontcheck_r, position_in_vehid_chain){
    0: sw_Comeng_SMU_VR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_VR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_panto_direction, vehicle_is_flipped){
    0 : spriteset_Comeng_SMU_VR_Motor_lead;        //Front panto
    return spriteset_Comeng_SMU_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Comeng_SMU_VR_panto_direction;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_VR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_VR_frontcheck, position_in_vehid_chain){
    0: sw_Comeng_SMU_VR_panto_direction; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_VR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_VR_directioncheck, vehicle_is_reversed){
    0: sw_Comeng_SMU_VR_frontcheck; //We are going forwards
    return sw_Comeng_SMU_VR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_VR_revcheck, vehicle_is_reversed){
    0 : sw_Comeng_SMU_VR_lencheck;
    return sw_Comeng_SMU_VR_lencheck_r;
}

item(FEAT_TRAINS, Item_Comeng_SMU_VR, 10801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENG_SMU);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Comeng_SMU_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Comeng_SMU_VR_directioncheck;
        can_attach_wagon: sw_Comeng_SMU_attach ;
        purchase: spriteset_Comeng_SMU_VR_purchase;
        additional_text: string(STR_INFO_COMENG_SMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Comeng_SMU_VR_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}

//Comeng_MTA
spriteset(spriteset_Comeng_SMU_MTA_purchase,   "gfx/Comeng_SMU_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_SMU_MTA_Motor_lead,   "gfx/Comeng_SMU_MTA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Comeng_SMU_MTA_Motor_rear,   "gfx/Comeng_SMU_MTA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Comeng_SMU_MTA_DrivingTrailer_lead,   "gfx/Comeng_SMU_MTA.png") {template_old_8(187, 39)}
spriteset(spriteset_Comeng_SMU_MTA_DrivingTrailer_rear,   "gfx/Comeng_SMU_MTA.png") {template_old_8(187, 64)}
spriteset(spriteset_Comeng_SMU_MTA_Trailer,   "gfx/Comeng_SMU_MTA.png") {template_old_8(7, 89)}
spriteset(spriteset_Comeng_SMU_MTA_NonControlMotor,   "gfx/Comeng_SMU_MTA.png") {template_old_8(187, 89)}
spriteset(spriteset_Comeng_SMU_MTA_NonControlMotor_r,   "gfx/Comeng_SMU_MTA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_MTA_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_MTA_NonControlMotor;
    return spriteset_Comeng_SMU_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTA_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTA_Trailer;
    return spriteset_Comeng_SMU_MTA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_MTA_NonControlMotor;
    return spriteset_Comeng_SMU_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTA_pantocheck_at_1_r;
    return sw_Comeng_SMU_MTA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Comeng_SMU_MTA_Trailer;
    return sw_Comeng_SMU_MTA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTA_pantocheck_at_2_r;
    return sw_Comeng_SMU_MTA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_MTA_Trailer;
    3 : sw_Comeng_SMU_MTA_pantocheck_at_1_r;
    4 : sw_Comeng_SMU_MTA_sidecheck_4_r;
    5 : sw_Comeng_SMU_MTA_pantocheck_at_2_r;
    6 .. 7 : sw_Comeng_SMU_MTA_sidecheck_6_r;
    return sw_Comeng_SMU_MTA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_MTA_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_MTA_NonControlMotor;
    return spriteset_Comeng_SMU_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTA_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_MTA_NonControlMotor;
    return spriteset_Comeng_SMU_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTA_pantocheck_at_1;
    return sw_Comeng_SMU_MTA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTA_pantocheck_at_1;
    return spriteset_Comeng_SMU_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTA_pantocheck_at_2;
    return sw_Comeng_SMU_MTA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_MTA_Trailer;
    3 : sw_Comeng_SMU_MTA_pantocheck_at_1;
    4 : sw_Comeng_SMU_MTA_sidecheck_4;
    5 : sw_Comeng_SMU_MTA_pantocheck_at_2;
    6 .. 7 : sw_Comeng_SMU_MTA_sidecheck_6;
    return sw_Comeng_SMU_MTA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Comeng_SMU_MTA_Motor_lead; //Panto
    return spriteset_Comeng_SMU_MTA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_panto_direction_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTA_panto_direction_r_pos;        //Front panto
    return spriteset_Comeng_SMU_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_MTA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_frontcheck_r, position_in_vehid_chain){
    0: sw_Comeng_SMU_MTA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_MTA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_panto_direction, vehicle_is_flipped){
    0 : spriteset_Comeng_SMU_MTA_Motor_lead;        //Front panto
    return spriteset_Comeng_SMU_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTA_panto_direction;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_MTA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTA_frontcheck, position_in_vehid_chain){
    0: sw_Comeng_SMU_MTA_panto_direction; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_MTA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_MTA_directioncheck, vehicle_is_reversed){
    0: sw_Comeng_SMU_MTA_frontcheck; //We are going forwards
    return sw_Comeng_SMU_MTA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_MTA_revcheck, vehicle_is_reversed){
    0 : sw_Comeng_SMU_MTA_lencheck;
    return sw_Comeng_SMU_MTA_lencheck_r;
}

item(FEAT_TRAINS, Item_Comeng_SMU_MTA, 10802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENG_SMU);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Comeng_SMU_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Comeng_SMU_MTA_directioncheck;
        can_attach_wagon: sw_Comeng_SMU_attach ;
        purchase: spriteset_Comeng_SMU_MTA_purchase;
        additional_text: string(STR_INFO_COMENG_SMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Comeng_SMU_MTA_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}

//Comeng_MTrain
spriteset(spriteset_Comeng_SMU_MTrain_purchase,   "gfx/Comeng_SMU_MTrain.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_SMU_MTrain_Motor_lead,   "gfx/Comeng_SMU_MTrain.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Comeng_SMU_MTrain_Motor_rear,   "gfx/Comeng_SMU_MTrain.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Comeng_SMU_MTrain_DrivingTrailer_lead,   "gfx/Comeng_SMU_MTrain.png") {template_old_8(187, 39)}
spriteset(spriteset_Comeng_SMU_MTrain_DrivingTrailer_rear,   "gfx/Comeng_SMU_MTrain.png") {template_old_8(187, 64)}
spriteset(spriteset_Comeng_SMU_MTrain_Trailer,   "gfx/Comeng_SMU_MTrain.png") {template_old_8(7, 89)}
spriteset(spriteset_Comeng_SMU_MTrain_NonControlMotor,   "gfx/Comeng_SMU_MTrain.png") {template_old_8(187, 89)}
spriteset(spriteset_Comeng_SMU_MTrain_NonControlMotor_r,   "gfx/Comeng_SMU_MTrain.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_MTrain_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_MTrain_NonControlMotor;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTrain_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTrain_Trailer;
    return spriteset_Comeng_SMU_MTrain_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_MTrain_NonControlMotor;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTrain_pantocheck_at_1_r;
    return sw_Comeng_SMU_MTrain_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Comeng_SMU_MTrain_Trailer;
    return sw_Comeng_SMU_MTrain_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTrain_pantocheck_at_2_r;
    return sw_Comeng_SMU_MTrain_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_MTrain_Trailer;
    3 : sw_Comeng_SMU_MTrain_pantocheck_at_1_r;
    4 : sw_Comeng_SMU_MTrain_sidecheck_4_r;
    5 : sw_Comeng_SMU_MTrain_pantocheck_at_2_r;
    6 .. 7 : sw_Comeng_SMU_MTrain_sidecheck_6_r;
    return sw_Comeng_SMU_MTrain_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_MTrain_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_MTrain_NonControlMotor;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTrain_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_MTrain_NonControlMotor;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTrain_pantocheck_at_1;
    return sw_Comeng_SMU_MTrain_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTrain_pantocheck_at_1;
    return spriteset_Comeng_SMU_MTrain_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTrain_pantocheck_at_2;
    return sw_Comeng_SMU_MTrain_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_MTrain_Trailer;
    3 : sw_Comeng_SMU_MTrain_pantocheck_at_1;
    4 : sw_Comeng_SMU_MTrain_sidecheck_4;
    5 : sw_Comeng_SMU_MTrain_pantocheck_at_2;
    6 .. 7 : sw_Comeng_SMU_MTrain_sidecheck_6;
    return sw_Comeng_SMU_MTrain_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Comeng_SMU_MTrain_Motor_lead; //Panto
    return spriteset_Comeng_SMU_MTrain_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_panto_direction_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTrain_panto_direction_r_pos;        //Front panto
    return spriteset_Comeng_SMU_MTrain_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTrain_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_MTrain_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_frontcheck_r, position_in_vehid_chain){
    0: sw_Comeng_SMU_MTrain_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_MTrain_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_panto_direction, vehicle_is_flipped){
    0 : spriteset_Comeng_SMU_MTrain_Motor_lead;        //Front panto
    return spriteset_Comeng_SMU_MTrain_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTrain_panto_direction;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_MTrain_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTrain_frontcheck, position_in_vehid_chain){
    0: sw_Comeng_SMU_MTrain_panto_direction; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_MTrain_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_MTrain_directioncheck, vehicle_is_reversed){
    0: sw_Comeng_SMU_MTrain_frontcheck; //We are going forwards
    return sw_Comeng_SMU_MTrain_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_MTrain_revcheck, vehicle_is_reversed){
    0 : sw_Comeng_SMU_MTrain_lencheck;
    return sw_Comeng_SMU_MTrain_lencheck_r;
}

item(FEAT_TRAINS, Item_Comeng_SMU_MTrain, 10803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENG_SMU);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Comeng_SMU_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Comeng_SMU_MTrain_directioncheck;
        can_attach_wagon: sw_Comeng_SMU_attach ;
        purchase: spriteset_Comeng_SMU_MTrain_purchase;
        additional_text: string(STR_INFO_COMENG_SMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Comeng_SMU_MTrain_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}

//Comeng_Connex
spriteset(spriteset_Comeng_SMU_Connex_purchase,   "gfx/Comeng_SMU_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_SMU_Connex_Motor_lead,   "gfx/Comeng_SMU_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Comeng_SMU_Connex_Motor_rear,   "gfx/Comeng_SMU_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Comeng_SMU_Connex_DrivingTrailer_lead,   "gfx/Comeng_SMU_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_Comeng_SMU_Connex_DrivingTrailer_rear,   "gfx/Comeng_SMU_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_Comeng_SMU_Connex_Trailer,   "gfx/Comeng_SMU_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_Comeng_SMU_Connex_NonControlMotor,   "gfx/Comeng_SMU_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_Comeng_SMU_Connex_NonControlMotor_r,   "gfx/Comeng_SMU_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_Connex_NonControlMotor_r;
    return spriteset_Comeng_SMU_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_Connex_NonControlMotor;
    return spriteset_Comeng_SMU_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_Connex_NonControlMotor_r;
    return spriteset_Comeng_SMU_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_Connex_Trailer;
    return spriteset_Comeng_SMU_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_Connex_NonControlMotor;
    return spriteset_Comeng_SMU_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_Connex_pantocheck_at_1_r;
    return sw_Comeng_SMU_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Comeng_SMU_Connex_Trailer;
    return sw_Comeng_SMU_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_Connex_pantocheck_at_2_r;
    return sw_Comeng_SMU_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_Connex_Trailer;
    3 : sw_Comeng_SMU_Connex_pantocheck_at_1_r;
    4 : sw_Comeng_SMU_Connex_sidecheck_4_r;
    5 : sw_Comeng_SMU_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_Comeng_SMU_Connex_sidecheck_6_r;
    return sw_Comeng_SMU_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_Connex_NonControlMotor_r;
    return spriteset_Comeng_SMU_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_Connex_NonControlMotor;
    return spriteset_Comeng_SMU_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_Connex_NonControlMotor_r;
    return spriteset_Comeng_SMU_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_Connex_NonControlMotor;
    return spriteset_Comeng_SMU_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_Connex_pantocheck_at_1;
    return sw_Comeng_SMU_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_Connex_pantocheck_at_1;
    return spriteset_Comeng_SMU_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_Connex_pantocheck_at_2;
    return sw_Comeng_SMU_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_Connex_Trailer;
    3 : sw_Comeng_SMU_Connex_pantocheck_at_1;
    4 : sw_Comeng_SMU_Connex_sidecheck_4;
    5 : sw_Comeng_SMU_Connex_pantocheck_at_2;
    6 .. 7 : sw_Comeng_SMU_Connex_sidecheck_6;
    return sw_Comeng_SMU_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Comeng_SMU_Connex_Motor_lead; //Panto
    return spriteset_Comeng_SMU_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_Comeng_SMU_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_Comeng_SMU_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_Comeng_SMU_Connex_Motor_lead;        //Front panto
    return spriteset_Comeng_SMU_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Comeng_SMU_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_Connex_frontcheck, position_in_vehid_chain){
    0: sw_Comeng_SMU_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_Connex_directioncheck, vehicle_is_reversed){
    0: sw_Comeng_SMU_Connex_frontcheck; //We are going forwards
    return sw_Comeng_SMU_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_Connex_revcheck, vehicle_is_reversed){
    0 : sw_Comeng_SMU_Connex_lencheck;
    return sw_Comeng_SMU_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_Comeng_SMU_Connex, 10804) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENG_SMU);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Comeng_SMU_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Comeng_SMU_Connex_directioncheck;
        can_attach_wagon: sw_Comeng_SMU_attach ;
        purchase: spriteset_Comeng_SMU_Connex_purchase;
        additional_text: string(STR_INFO_COMENG_SMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Comeng_SMU_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}

//Comeng_MTM
spriteset(spriteset_Comeng_SMU_MTM_purchase,   "gfx/Comeng_SMU_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_SMU_MTM_Motor_lead,   "gfx/Comeng_SMU_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_Comeng_SMU_MTM_Motor_rear,   "gfx/Comeng_SMU_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_Comeng_SMU_MTM_DrivingTrailer_lead,   "gfx/Comeng_SMU_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_Comeng_SMU_MTM_DrivingTrailer_rear,   "gfx/Comeng_SMU_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_Comeng_SMU_MTM_Trailer,   "gfx/Comeng_SMU_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_Comeng_SMU_MTM_NonControlMotor,   "gfx/Comeng_SMU_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_Comeng_SMU_MTM_NonControlMotor_r,   "gfx/Comeng_SMU_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_MTM_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_MTM_NonControlMotor;
    return spriteset_Comeng_SMU_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTM_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTM_Trailer;
    return spriteset_Comeng_SMU_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_MTM_NonControlMotor;
    return spriteset_Comeng_SMU_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTM_pantocheck_at_1_r;
    return sw_Comeng_SMU_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_Comeng_SMU_MTM_Trailer;
    return sw_Comeng_SMU_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTM_pantocheck_at_2_r;
    return sw_Comeng_SMU_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_MTM_Trailer;
    3 : sw_Comeng_SMU_MTM_pantocheck_at_1_r;
    4 : sw_Comeng_SMU_MTM_sidecheck_4_r;
    5 : sw_Comeng_SMU_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_Comeng_SMU_MTM_sidecheck_6_r;
    return sw_Comeng_SMU_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_Comeng_SMU_MTM_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_Comeng_SMU_MTM_NonControlMotor;
    return spriteset_Comeng_SMU_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_Comeng_SMU_MTM_NonControlMotor_r;
    return spriteset_Comeng_SMU_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_Comeng_SMU_MTM_NonControlMotor;
    return spriteset_Comeng_SMU_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTM_pantocheck_at_1;
    return sw_Comeng_SMU_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTM_pantocheck_at_1;
    return spriteset_Comeng_SMU_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_Comeng_SMU_MTM_pantocheck_at_2;
    return sw_Comeng_SMU_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_Comeng_SMU_MTM_Trailer;
    3 : sw_Comeng_SMU_MTM_pantocheck_at_1;
    4 : sw_Comeng_SMU_MTM_sidecheck_4;
    5 : sw_Comeng_SMU_MTM_pantocheck_at_2;
    6 .. 7 : sw_Comeng_SMU_MTM_sidecheck_6;
    return sw_Comeng_SMU_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_Comeng_SMU_MTM_Motor_lead; //Panto
    return spriteset_Comeng_SMU_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_Comeng_SMU_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_Comeng_SMU_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_Comeng_SMU_MTM_Motor_lead;        //Front panto
    return spriteset_Comeng_SMU_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_Comeng_SMU_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_Comeng_SMU_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_Comeng_SMU_MTM_frontcheck, position_in_vehid_chain){
    0: sw_Comeng_SMU_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_Comeng_SMU_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_MTM_directioncheck, vehicle_is_reversed){
    0: sw_Comeng_SMU_MTM_frontcheck; //We are going forwards
    return sw_Comeng_SMU_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_Comeng_SMU_MTM_revcheck, vehicle_is_reversed){
    0 : sw_Comeng_SMU_MTM_lencheck;
    return sw_Comeng_SMU_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_Comeng_SMU_MTM, 10805) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENG_SMU);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_Comeng_SMU_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_Comeng_SMU_MTM_directioncheck;
        can_attach_wagon: sw_Comeng_SMU_attach ;
        purchase: spriteset_Comeng_SMU_MTM_purchase;
        additional_text: string(STR_INFO_COMENG_SMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_Comeng_SMU_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_attach, vehicle_type_id){
    Item_SSD_EMU_GanzMavag_GreenCream    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_GanzMavag_TranzMetro    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SSD_EMU_GanzMavag_Refurb    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//GanzMavag_GreenCream
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_purchase,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_lead,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_rear,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_DrivingTrailer_lead,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_DrivingTrailer_rear,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor_r,   "gfx/SSD_EMU_GanzMavag_GreenCream.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1_r;
    return sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
    return sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2_r;
    return sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
    3 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1_r;
    4 : sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_4_r;
    5 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_6_r;
    return sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_GanzMavag_GreenCream_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1;
    return sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1;
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2;
    return sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_GanzMavag_GreenCream_Trailer;
    3 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_1;
    4 : sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_4;
    5 : sw_SSD_EMU_GanzMavag_GreenCream_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_6;
    return sw_SSD_EMU_GanzMavag_GreenCream_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_lead; //Panto
    return spriteset_SSD_EMU_GanzMavag_GreenCream_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_GreenCream_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_GreenCream_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_GanzMavag_GreenCream_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_GanzMavag_GreenCream_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_GanzMavag_GreenCream_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_GreenCream_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_GanzMavag_GreenCream_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_GreenCream_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_GanzMavag_GreenCream_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_GanzMavag_GreenCream_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_GanzMavag_GreenCream_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_GanzMavag_GreenCream_frontcheck; //We are going forwards
    return sw_SSD_EMU_GanzMavag_GreenCream_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_GanzMavag_GreenCream_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_GanzMavag_GreenCream_lencheck;
    return sw_SSD_EMU_GanzMavag_GreenCream_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_GanzMavag_GreenCream, 10851) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_GANZMAVAG);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            110 km/h;
        power:                            540 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_GanzMavag_GreenCream;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_GanzMavag_GreenCream_directioncheck;
        can_attach_wagon: sw_SSD_EMU_GanzMavag_attach ;
        purchase: spriteset_SSD_EMU_GanzMavag_GreenCream_purchase;
        additional_text: string(STR_INFO_SSD_EMU_GANZMAVAG);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_GanzMavag_GreenCream_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 270 ;
		weight:                        37;
		running_cost_factor:             48;
    }
}

//GanzMavag_TranzMetro
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_purchase,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_lead,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_rear,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_DrivingTrailer_lead,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_DrivingTrailer_rear,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor_r,   "gfx/SSD_EMU_GanzMavag_TranzMetro.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1_r;
    return sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
    return sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2_r;
    return sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
    3 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1_r;
    4 : sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_4_r;
    5 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_6_r;
    return sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_GanzMavag_TranzMetro_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1;
    return sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1;
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2;
    return sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_GanzMavag_TranzMetro_Trailer;
    3 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_1;
    4 : sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_4;
    5 : sw_SSD_EMU_GanzMavag_TranzMetro_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_6;
    return sw_SSD_EMU_GanzMavag_TranzMetro_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_lead; //Panto
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_GanzMavag_TranzMetro_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_GanzMavag_TranzMetro_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_TranzMetro_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_GanzMavag_TranzMetro_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_GanzMavag_TranzMetro_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_GanzMavag_TranzMetro_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_GanzMavag_TranzMetro_frontcheck; //We are going forwards
    return sw_SSD_EMU_GanzMavag_TranzMetro_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_GanzMavag_TranzMetro_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_GanzMavag_TranzMetro_lencheck;
    return sw_SSD_EMU_GanzMavag_TranzMetro_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_GanzMavag_TranzMetro, 10852) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_GANZMAVAG);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            110 km/h;
        power:                            540 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_GanzMavag_GreenCream;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_GanzMavag_TranzMetro_directioncheck;
        can_attach_wagon: sw_SSD_EMU_GanzMavag_attach ;
        purchase: spriteset_SSD_EMU_GanzMavag_TranzMetro_purchase;
        additional_text: string(STR_INFO_SSD_EMU_GANZMAVAG);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_GanzMavag_TranzMetro_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 270 ;
		weight:                        37;
		running_cost_factor:             48;
    }
}

//GanzMavag_Refurb
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_purchase,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_Motor_lead,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_Motor_rear,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_DrivingTrailer_lead,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_DrivingTrailer_rear,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_Trailer,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor_r,   "gfx/SSD_EMU_GanzMavag_Refurb.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
    return spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1_r;
    return sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
    return sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2_r;
    return sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
    3 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1_r;
    4 : sw_SSD_EMU_GanzMavag_Refurb_sidecheck_4_r;
    5 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_GanzMavag_Refurb_sidecheck_6_r;
    return sw_SSD_EMU_GanzMavag_Refurb_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor_r;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_GanzMavag_Refurb_NonControlMotor;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1;
    return sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1;
    return spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2;
    return sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_GanzMavag_Refurb_Trailer;
    3 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_1;
    4 : sw_SSD_EMU_GanzMavag_Refurb_sidecheck_4;
    5 : sw_SSD_EMU_GanzMavag_Refurb_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_GanzMavag_Refurb_sidecheck_6;
    return sw_SSD_EMU_GanzMavag_Refurb_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_GanzMavag_Refurb_Motor_lead; //Panto
    return spriteset_SSD_EMU_GanzMavag_Refurb_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_Refurb_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_GanzMavag_Refurb_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_Refurb_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_GanzMavag_Refurb_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_GanzMavag_Refurb_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_GanzMavag_Refurb_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_GanzMavag_Refurb_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_GanzMavag_Refurb_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_GanzMavag_Refurb_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_GanzMavag_Refurb_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_GanzMavag_Refurb_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_GanzMavag_Refurb_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_GanzMavag_Refurb_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_GanzMavag_Refurb_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_GanzMavag_Refurb_frontcheck; //We are going forwards
    return sw_SSD_EMU_GanzMavag_Refurb_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_GanzMavag_Refurb_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_GanzMavag_Refurb_lencheck;
    return sw_SSD_EMU_GanzMavag_Refurb_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_GanzMavag_Refurb, 10853) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_GANZMAVAG);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        37 ton;
        speed:                            110 km/h;
        power:                            540 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_GanzMavag_GreenCream;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_GanzMavag_Refurb_directioncheck;
        can_attach_wagon: sw_SSD_EMU_GanzMavag_attach ;
        purchase: spriteset_SSD_EMU_GanzMavag_Refurb_purchase;
        additional_text: string(STR_INFO_SSD_EMU_GANZMAVAG);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_GanzMavag_Refurb_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 270 ;
		weight:                        37;
		running_cost_factor:             48;
    }
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_attach, vehicle_type_id){
    Item_HarrisRefurb_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HarrisRefurb_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HarrisRefurb_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HarrisRefurb_Liv4    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_HarrisRefurb_Liv5    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}


//HarrisRefurb_Liv1
spriteset(spriteset_HarrisRefurb_Liv1_purchase,   "gfx/HarrisRefurb_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_HarrisRefurb_Liv1_Motor_lead,   "gfx/HarrisRefurb_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HarrisRefurb_Liv1_Motor_rear,   "gfx/HarrisRefurb_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HarrisRefurb_Liv1_DrivingTrailer_lead,   "gfx/HarrisRefurb_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_HarrisRefurb_Liv1_DrivingTrailer_rear,   "gfx/HarrisRefurb_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_HarrisRefurb_Liv1_Trailer,   "gfx/HarrisRefurb_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_HarrisRefurb_Liv1_NonControlMotor,   "gfx/HarrisRefurb_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_HarrisRefurb_Liv1_NonControlMotor_r,   "gfx/HarrisRefurb_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv1_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv1_NonControlMotor;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv1_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv1_Trailer;
    return spriteset_HarrisRefurb_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv1_NonControlMotor;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv1_pantocheck_at_1_r;
    return sw_HarrisRefurb_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_HarrisRefurb_Liv1_Trailer;
    return sw_HarrisRefurb_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv1_pantocheck_at_2_r;
    return sw_HarrisRefurb_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv1_Trailer;
    3 : sw_HarrisRefurb_Liv1_pantocheck_at_1_r;
    4 : sw_HarrisRefurb_Liv1_sidecheck_4_r;
    5 : sw_HarrisRefurb_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_HarrisRefurb_Liv1_sidecheck_6_r;
    return sw_HarrisRefurb_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv1_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv1_NonControlMotor;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv1_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv1_NonControlMotor;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv1_pantocheck_at_1;
    return sw_HarrisRefurb_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv1_pantocheck_at_1;
    return spriteset_HarrisRefurb_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv1_pantocheck_at_2;
    return sw_HarrisRefurb_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv1_Trailer;
    3 : sw_HarrisRefurb_Liv1_pantocheck_at_1;
    4 : sw_HarrisRefurb_Liv1_sidecheck_4;
    5 : sw_HarrisRefurb_Liv1_pantocheck_at_2;
    6 .. 7 : sw_HarrisRefurb_Liv1_sidecheck_6;
    return sw_HarrisRefurb_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_HarrisRefurb_Liv1_Motor_lead; //Panto
    return spriteset_HarrisRefurb_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_HarrisRefurb_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_HarrisRefurb_Liv1_Motor_lead;        //Front panto
    return spriteset_HarrisRefurb_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_HarrisRefurb_Liv1_frontcheck; //We are going forwards
    return sw_HarrisRefurb_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_HarrisRefurb_Liv1_lencheck;
    return sw_HarrisRefurb_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_HarrisRefurb_Liv1, 10880) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRISREFURB);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_HarrisRefurb_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HarrisRefurb_Liv1_directioncheck;
        can_attach_wagon: sw_HarrisRefurb_attach ;
        purchase: spriteset_HarrisRefurb_Liv1_purchase;
        additional_text: string(STR_INFO_HARRISREFURB);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_HarrisRefurb_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        49;
		running_cost_factor:             48;
    }
}

//HarrisRefurb_Liv2
spriteset(spriteset_HarrisRefurb_Liv2_purchase,   "gfx/HarrisRefurb_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_HarrisRefurb_Liv2_Motor_lead,   "gfx/HarrisRefurb_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HarrisRefurb_Liv2_Motor_rear,   "gfx/HarrisRefurb_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HarrisRefurb_Liv2_DrivingTrailer_lead,   "gfx/HarrisRefurb_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_HarrisRefurb_Liv2_DrivingTrailer_rear,   "gfx/HarrisRefurb_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_HarrisRefurb_Liv2_Trailer,   "gfx/HarrisRefurb_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_HarrisRefurb_Liv2_NonControlMotor,   "gfx/HarrisRefurb_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_HarrisRefurb_Liv2_NonControlMotor_r,   "gfx/HarrisRefurb_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv2_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv2_NonControlMotor;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv2_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv2_Trailer;
    return spriteset_HarrisRefurb_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv2_NonControlMotor;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv2_pantocheck_at_1_r;
    return sw_HarrisRefurb_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_HarrisRefurb_Liv2_Trailer;
    return sw_HarrisRefurb_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv2_pantocheck_at_2_r;
    return sw_HarrisRefurb_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv2_Trailer;
    3 : sw_HarrisRefurb_Liv2_pantocheck_at_1_r;
    4 : sw_HarrisRefurb_Liv2_sidecheck_4_r;
    5 : sw_HarrisRefurb_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_HarrisRefurb_Liv2_sidecheck_6_r;
    return sw_HarrisRefurb_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv2_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv2_NonControlMotor;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv2_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv2_NonControlMotor;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv2_pantocheck_at_1;
    return sw_HarrisRefurb_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv2_pantocheck_at_1;
    return spriteset_HarrisRefurb_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv2_pantocheck_at_2;
    return sw_HarrisRefurb_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv2_Trailer;
    3 : sw_HarrisRefurb_Liv2_pantocheck_at_1;
    4 : sw_HarrisRefurb_Liv2_sidecheck_4;
    5 : sw_HarrisRefurb_Liv2_pantocheck_at_2;
    6 .. 7 : sw_HarrisRefurb_Liv2_sidecheck_6;
    return sw_HarrisRefurb_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_HarrisRefurb_Liv2_Motor_lead; //Panto
    return spriteset_HarrisRefurb_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_HarrisRefurb_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_HarrisRefurb_Liv2_Motor_lead;        //Front panto
    return spriteset_HarrisRefurb_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_HarrisRefurb_Liv2_frontcheck; //We are going forwards
    return sw_HarrisRefurb_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_HarrisRefurb_Liv2_lencheck;
    return sw_HarrisRefurb_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_HarrisRefurb_Liv2, 10881) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRISREFURB);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_HarrisRefurb_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HarrisRefurb_Liv2_directioncheck;
        can_attach_wagon: sw_HarrisRefurb_attach ;
        purchase: spriteset_HarrisRefurb_Liv2_purchase;
        additional_text: string(STR_INFO_HARRISREFURB);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_HarrisRefurb_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        49;
		running_cost_factor:             48;
    }
}

//HarrisRefurb_Liv3
spriteset(spriteset_HarrisRefurb_Liv3_purchase,   "gfx/HarrisRefurb_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_HarrisRefurb_Liv3_Motor_lead,   "gfx/HarrisRefurb_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HarrisRefurb_Liv3_Motor_rear,   "gfx/HarrisRefurb_Liv3.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HarrisRefurb_Liv3_DrivingTrailer_lead,   "gfx/HarrisRefurb_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_HarrisRefurb_Liv3_DrivingTrailer_rear,   "gfx/HarrisRefurb_Liv3.png") {template_8(187, 69)}
spriteset(spriteset_HarrisRefurb_Liv3_Trailer,   "gfx/HarrisRefurb_Liv3.png") {template_8(7, 99)}
spriteset(spriteset_HarrisRefurb_Liv3_NonControlMotor,   "gfx/HarrisRefurb_Liv3.png") {template_8(187, 99)}
spriteset(spriteset_HarrisRefurb_Liv3_NonControlMotor_r,   "gfx/HarrisRefurb_Liv3.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv3_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv3_NonControlMotor;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv3_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv3_Trailer;
    return spriteset_HarrisRefurb_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv3_NonControlMotor;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv3_pantocheck_at_1_r;
    return sw_HarrisRefurb_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_HarrisRefurb_Liv3_Trailer;
    return sw_HarrisRefurb_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv3_pantocheck_at_2_r;
    return sw_HarrisRefurb_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv3_Trailer;
    3 : sw_HarrisRefurb_Liv3_pantocheck_at_1_r;
    4 : sw_HarrisRefurb_Liv3_sidecheck_4_r;
    5 : sw_HarrisRefurb_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_HarrisRefurb_Liv3_sidecheck_6_r;
    return sw_HarrisRefurb_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv3_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv3_NonControlMotor;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv3_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv3_NonControlMotor;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv3_pantocheck_at_1;
    return sw_HarrisRefurb_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv3_pantocheck_at_1;
    return spriteset_HarrisRefurb_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv3_pantocheck_at_2;
    return sw_HarrisRefurb_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv3_Trailer;
    3 : sw_HarrisRefurb_Liv3_pantocheck_at_1;
    4 : sw_HarrisRefurb_Liv3_sidecheck_4;
    5 : sw_HarrisRefurb_Liv3_pantocheck_at_2;
    6 .. 7 : sw_HarrisRefurb_Liv3_sidecheck_6;
    return sw_HarrisRefurb_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_HarrisRefurb_Liv3_Motor_lead; //Panto
    return spriteset_HarrisRefurb_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_HarrisRefurb_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_HarrisRefurb_Liv3_Motor_lead;        //Front panto
    return spriteset_HarrisRefurb_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_HarrisRefurb_Liv3_frontcheck; //We are going forwards
    return sw_HarrisRefurb_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_HarrisRefurb_Liv3_lencheck;
    return sw_HarrisRefurb_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_HarrisRefurb_Liv3, 10882) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRISREFURB);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_HarrisRefurb_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HarrisRefurb_Liv3_directioncheck;
        can_attach_wagon: sw_HarrisRefurb_attach ;
        purchase: spriteset_HarrisRefurb_Liv3_purchase;
        additional_text: string(STR_INFO_HARRISREFURB);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_HarrisRefurb_Liv3_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        49;
		running_cost_factor:             48;
    }
}

//HarrisRefurb_Liv4
spriteset(spriteset_HarrisRefurb_Liv4_purchase,   "gfx/HarrisRefurb_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_HarrisRefurb_Liv4_Motor_lead,   "gfx/HarrisRefurb_Liv4.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HarrisRefurb_Liv4_Motor_rear,   "gfx/HarrisRefurb_Liv4.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HarrisRefurb_Liv4_DrivingTrailer_lead,   "gfx/HarrisRefurb_Liv4.png") {template_8(187, 39)}
spriteset(spriteset_HarrisRefurb_Liv4_DrivingTrailer_rear,   "gfx/HarrisRefurb_Liv4.png") {template_8(187, 69)}
spriteset(spriteset_HarrisRefurb_Liv4_Trailer,   "gfx/HarrisRefurb_Liv4.png") {template_8(7, 99)}
spriteset(spriteset_HarrisRefurb_Liv4_NonControlMotor,   "gfx/HarrisRefurb_Liv4.png") {template_8(187, 99)}
spriteset(spriteset_HarrisRefurb_Liv4_NonControlMotor_r,   "gfx/HarrisRefurb_Liv4.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv4_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv4_NonControlMotor;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv4_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv4_Trailer;
    return spriteset_HarrisRefurb_Liv4_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv4_NonControlMotor;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv4_pantocheck_at_1_r;
    return sw_HarrisRefurb_Liv4_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_HarrisRefurb_Liv4_Trailer;
    return sw_HarrisRefurb_Liv4_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv4_pantocheck_at_2_r;
    return sw_HarrisRefurb_Liv4_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv4_Trailer;
    3 : sw_HarrisRefurb_Liv4_pantocheck_at_1_r;
    4 : sw_HarrisRefurb_Liv4_sidecheck_4_r;
    5 : sw_HarrisRefurb_Liv4_pantocheck_at_2_r;
    6 .. 7 : sw_HarrisRefurb_Liv4_sidecheck_6_r;
    return sw_HarrisRefurb_Liv4_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv4_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv4_NonControlMotor;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv4_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv4_NonControlMotor;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv4_pantocheck_at_1;
    return sw_HarrisRefurb_Liv4_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv4_pantocheck_at_1;
    return spriteset_HarrisRefurb_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv4_pantocheck_at_2;
    return sw_HarrisRefurb_Liv4_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv4_Trailer;
    3 : sw_HarrisRefurb_Liv4_pantocheck_at_1;
    4 : sw_HarrisRefurb_Liv4_sidecheck_4;
    5 : sw_HarrisRefurb_Liv4_pantocheck_at_2;
    6 .. 7 : sw_HarrisRefurb_Liv4_sidecheck_6;
    return sw_HarrisRefurb_Liv4_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_HarrisRefurb_Liv4_Motor_lead; //Panto
    return spriteset_HarrisRefurb_Liv4_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_panto_direction_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv4_panto_direction_r_pos;        //Front panto
    return spriteset_HarrisRefurb_Liv4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv4_panto_direction_r;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv4_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_frontcheck_r, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv4_panto_direction_r; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv4_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_panto_direction, vehicle_is_flipped){
    0 : spriteset_HarrisRefurb_Liv4_Motor_lead;        //Front panto
    return spriteset_HarrisRefurb_Liv4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_panto_flipcheck, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv4_panto_direction;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv4_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv4_frontcheck, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv4_panto_direction; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv4_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv4_directioncheck, vehicle_is_reversed){
    0: sw_HarrisRefurb_Liv4_frontcheck; //We are going forwards
    return sw_HarrisRefurb_Liv4_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv4_revcheck, vehicle_is_reversed){
    0 : sw_HarrisRefurb_Liv4_lencheck;
    return sw_HarrisRefurb_Liv4_lencheck_r;
}

item(FEAT_TRAINS, Item_HarrisRefurb_Liv4, 10883) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRISREFURB);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_HarrisRefurb_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HarrisRefurb_Liv4_directioncheck;
        can_attach_wagon: sw_HarrisRefurb_attach ;
        purchase: spriteset_HarrisRefurb_Liv4_purchase;
        additional_text: string(STR_INFO_HARRISREFURB);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_HarrisRefurb_Liv4_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        49;
		running_cost_factor:             48;
    }
}

//HarrisRefurb_Liv5
spriteset(spriteset_HarrisRefurb_Liv5_purchase,   "gfx/HarrisRefurb_Liv5.png") {template_purchase(7, 21)}
spriteset(spriteset_HarrisRefurb_Liv5_Motor_lead,   "gfx/HarrisRefurb_Liv5.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_HarrisRefurb_Liv5_Motor_rear,   "gfx/HarrisRefurb_Liv5.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_HarrisRefurb_Liv5_DrivingTrailer_lead,   "gfx/HarrisRefurb_Liv5.png") {template_8(187, 39)}
spriteset(spriteset_HarrisRefurb_Liv5_DrivingTrailer_rear,   "gfx/HarrisRefurb_Liv5.png") {template_8(187, 69)}
spriteset(spriteset_HarrisRefurb_Liv5_Trailer,   "gfx/HarrisRefurb_Liv5.png") {template_8(7, 99)}
spriteset(spriteset_HarrisRefurb_Liv5_NonControlMotor,   "gfx/HarrisRefurb_Liv5.png") {template_8(187, 99)}
spriteset(spriteset_HarrisRefurb_Liv5_NonControlMotor_r,   "gfx/HarrisRefurb_Liv5.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv5_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv5_NonControlMotor;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv5_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv5_Trailer;
    return spriteset_HarrisRefurb_Liv5_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv5_NonControlMotor;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv5_pantocheck_at_1_r;
    return sw_HarrisRefurb_Liv5_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_HarrisRefurb_Liv5_Trailer;
    return sw_HarrisRefurb_Liv5_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv5_pantocheck_at_2_r;
    return sw_HarrisRefurb_Liv5_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv5_Trailer;
    3 : sw_HarrisRefurb_Liv5_pantocheck_at_1_r;
    4 : sw_HarrisRefurb_Liv5_sidecheck_4_r;
    5 : sw_HarrisRefurb_Liv5_pantocheck_at_2_r;
    6 .. 7 : sw_HarrisRefurb_Liv5_sidecheck_6_r;
    return sw_HarrisRefurb_Liv5_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_HarrisRefurb_Liv5_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_HarrisRefurb_Liv5_NonControlMotor;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_HarrisRefurb_Liv5_NonControlMotor_r;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_HarrisRefurb_Liv5_NonControlMotor;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv5_pantocheck_at_1;
    return sw_HarrisRefurb_Liv5_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv5_pantocheck_at_1;
    return spriteset_HarrisRefurb_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_HarrisRefurb_Liv5_pantocheck_at_2;
    return sw_HarrisRefurb_Liv5_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_HarrisRefurb_Liv5_Trailer;
    3 : sw_HarrisRefurb_Liv5_pantocheck_at_1;
    4 : sw_HarrisRefurb_Liv5_sidecheck_4;
    5 : sw_HarrisRefurb_Liv5_pantocheck_at_2;
    6 .. 7 : sw_HarrisRefurb_Liv5_sidecheck_6;
    return sw_HarrisRefurb_Liv5_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_HarrisRefurb_Liv5_Motor_lead; //Panto
    return spriteset_HarrisRefurb_Liv5_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_panto_direction_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv5_panto_direction_r_pos;        //Front panto
    return spriteset_HarrisRefurb_Liv5_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv5_panto_direction_r;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv5_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_frontcheck_r, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv5_panto_direction_r; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv5_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_panto_direction, vehicle_is_flipped){
    0 : spriteset_HarrisRefurb_Liv5_Motor_lead;        //Front panto
    return spriteset_HarrisRefurb_Liv5_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_panto_flipcheck, vehicle_is_flipped){
    0 : sw_HarrisRefurb_Liv5_panto_direction;        //Not flipped, give Panto
    return spriteset_HarrisRefurb_Liv5_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_HarrisRefurb_Liv5_frontcheck, position_in_vehid_chain){
    0: sw_HarrisRefurb_Liv5_panto_direction; //We need a pantograph, guaranteed
    return sw_HarrisRefurb_Liv5_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv5_directioncheck, vehicle_is_reversed){
    0: sw_HarrisRefurb_Liv5_frontcheck; //We are going forwards
    return sw_HarrisRefurb_Liv5_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_HarrisRefurb_Liv5_revcheck, vehicle_is_reversed){
    0 : sw_HarrisRefurb_Liv5_lencheck;
    return sw_HarrisRefurb_Liv5_lencheck_r;
}

item(FEAT_TRAINS, Item_HarrisRefurb_Liv5, 10884) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_HARRISREFURB);
        introduction_date:                date(1982,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  127/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_HarrisRefurb_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_HarrisRefurb_Liv5_directioncheck;
        can_attach_wagon: sw_HarrisRefurb_attach ;
        purchase: spriteset_HarrisRefurb_Liv5_purchase;
        additional_text: string(STR_INFO_HARRISREFURB);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_HarrisRefurb_Liv5_revcheck ;
        length                      : 8;
        cargo_capacity              : (127/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        49;
		running_cost_factor:             48;
    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_attach, vehicle_type_id){
	Item_SSD_EMU_ASeriesSMU_QR1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_ASeriesSMU_QR2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_ASeriesSMU_QR3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_ASeriesSMU_TransPerth    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ASeriesSMU_QR1
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_purchase,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_lead,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_rear,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_DrivingTrailer_lead,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_DrivingTrailer_rear,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor_r,   "gfx/SSD_EMU_ASeriesSMU_QR1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1_r;
    return sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
    return sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2_r;
    return sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_4_r;
    5 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_6_r;
    return sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1;
    return sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1;
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2;
    return sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_QR1_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_1;
    4 : sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_4;
    5 : sw_SSD_EMU_ASeriesSMU_QR1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_6;
    return sw_SSD_EMU_ASeriesSMU_QR1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_lead; //Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_QR1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_QR1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_QR1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_QR1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_QR1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_ASeriesSMU_QR1_frontcheck; //We are going forwards
    return sw_SSD_EMU_ASeriesSMU_QR1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_QR1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_ASeriesSMU_QR1_lencheck;
    return sw_SSD_EMU_ASeriesSMU_QR1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_ASeriesSMU_QR1, 10901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_ASERIESSMU);
        introduction_date:                date(1991,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            120 km/h;
        power:                            1569 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             200;
        cargo_capacity:                  136/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_ASeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_ASeriesSMU_QR1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_ASeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_ASeriesSMU_QR1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_ASERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_ASeriesSMU_QR1_revcheck ;
        length                      : 8;
        cargo_capacity              : (136/param_capacity_mod) ;
        power                       : 784 ;
		weight:                        47;
		running_cost_factor:             50;

    }
}

//ASeriesSMU_QR2
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_purchase,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_lead,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_rear,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_DrivingTrailer_lead,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_DrivingTrailer_rear,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor_r,   "gfx/SSD_EMU_ASeriesSMU_QR2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1_r;
    return sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
    return sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2_r;
    return sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_4_r;
    5 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_6_r;
    return sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1;
    return sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1;
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2;
    return sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_QR2_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_1;
    4 : sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_4;
    5 : sw_SSD_EMU_ASeriesSMU_QR2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_6;
    return sw_SSD_EMU_ASeriesSMU_QR2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_lead; //Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_QR2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_QR2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_QR2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_QR2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_QR2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_ASeriesSMU_QR2_frontcheck; //We are going forwards
    return sw_SSD_EMU_ASeriesSMU_QR2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_QR2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_ASeriesSMU_QR2_lencheck;
    return sw_SSD_EMU_ASeriesSMU_QR2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_ASeriesSMU_QR2, 10902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_ASERIESSMU);
        introduction_date:                date(1991,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            120 km/h;
        power:                            1569 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             200;
        cargo_capacity:                  136/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_ASeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_ASeriesSMU_QR2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_ASeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_ASeriesSMU_QR2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_ASERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_ASeriesSMU_QR2_revcheck ;
        length                      : 8;
        cargo_capacity              : (136/param_capacity_mod) ;
        power                       : 784 ;
		weight:                        47;
		running_cost_factor:             50;

    }
}

//ASeriesSMU_QR3
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_purchase,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_lead,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_rear,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_DrivingTrailer_lead,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_DrivingTrailer_rear,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor_r,   "gfx/SSD_EMU_ASeriesSMU_QR3.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1_r;
    return sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
    return sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2_r;
    return sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1_r;
    4 : sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_4_r;
    5 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_6_r;
    return sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_QR3_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1;
    return sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1;
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2;
    return sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_QR3_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_1;
    4 : sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_4;
    5 : sw_SSD_EMU_ASeriesSMU_QR3_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_6;
    return sw_SSD_EMU_ASeriesSMU_QR3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_lead; //Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR3_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_QR3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_QR3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_QR3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_QR3_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_QR3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_QR3_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_QR3_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_QR3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_QR3_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_ASeriesSMU_QR3_frontcheck; //We are going forwards
    return sw_SSD_EMU_ASeriesSMU_QR3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_QR3_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_ASeriesSMU_QR3_lencheck;
    return sw_SSD_EMU_ASeriesSMU_QR3_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_ASeriesSMU_QR3, 10903) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_ASERIESSMU);
        introduction_date:                date(1991,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            120 km/h;
        power:                            1569 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             200;
        cargo_capacity:                  136/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_ASeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_ASeriesSMU_QR3_directioncheck;
        can_attach_wagon: sw_SSD_EMU_ASeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_ASeriesSMU_QR3_purchase;
        additional_text: string(STR_INFO_SSD_EMU_ASERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_ASeriesSMU_QR3_revcheck ;
        length                      : 8;
        cargo_capacity              : (136/param_capacity_mod) ;
        power                       : 784 ;
		weight:                        47;
		running_cost_factor:             50;

    }
}

//ASeriesSMU_TransPerth
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_purchase,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_lead,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_rear,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_DrivingTrailer_lead,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_DrivingTrailer_rear,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor_r,   "gfx/SSD_EMU_ASeriesSMU_TransPerth.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1_r;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2_r;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1_r;
    4 : sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_4_r;
    5 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_6_r;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1;
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_Trailer;
    3 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_1;
    4 : sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_4;
    5 : sw_SSD_EMU_ASeriesSMU_TransPerth_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_6;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_lead; //Panto
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_TransPerth_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ASeriesSMU_TransPerth_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ASeriesSMU_TransPerth_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_ASeriesSMU_TransPerth_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ASeriesSMU_TransPerth_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_TransPerth_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_ASeriesSMU_TransPerth_frontcheck; //We are going forwards
    return sw_SSD_EMU_ASeriesSMU_TransPerth_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ASeriesSMU_TransPerth_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_ASeriesSMU_TransPerth_lencheck;
    return sw_SSD_EMU_ASeriesSMU_TransPerth_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_ASeriesSMU_TransPerth, 10904) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_ASERIESSMU);
        introduction_date:                date(1991,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            120 km/h;
        power:                            1569 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             200;
        cargo_capacity:                  136/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_ASeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_ASeriesSMU_TransPerth_directioncheck;
        can_attach_wagon: sw_SSD_EMU_ASeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_ASeriesSMU_TransPerth_purchase;
        additional_text: string(STR_INFO_SSD_EMU_ASERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_ASeriesSMU_TransPerth_revcheck ;
        length                      : 8;
        cargo_capacity              : (136/param_capacity_mod) ;
        power                       : 784 ;
		weight:                        47;
		running_cost_factor:             50;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_attach, vehicle_type_id){
	Item_SSD_EMU_Xtrapolis_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Xtrapolis_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Xtrapolis_Connex
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_purchase,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_Motor_lead,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_Motor_rear,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_DrivingTrailer_lead,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_DrivingTrailer_rear,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_Trailer,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor_r,   "gfx/SSD_EMU_Xtrapolis_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
    return spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1_r;
    return sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
    return sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2_r;
    return sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
    3 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Xtrapolis_Connex_sidecheck_4_r;
    5 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Xtrapolis_Connex_sidecheck_6_r;
    return sw_SSD_EMU_Xtrapolis_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1;
    return sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1;
    return spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2;
    return sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Xtrapolis_Connex_Trailer;
    3 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_1;
    4 : sw_SSD_EMU_Xtrapolis_Connex_sidecheck_4;
    5 : sw_SSD_EMU_Xtrapolis_Connex_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Xtrapolis_Connex_sidecheck_6;
    return sw_SSD_EMU_Xtrapolis_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Xtrapolis_Connex_Motor_lead; //Panto
    return spriteset_SSD_EMU_Xtrapolis_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Xtrapolis_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Xtrapolis_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Xtrapolis_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Xtrapolis_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Xtrapolis_Connex_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Xtrapolis_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Xtrapolis_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_Connex_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Xtrapolis_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Xtrapolis_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Xtrapolis_Connex_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Xtrapolis_Connex_frontcheck; //We are going forwards
    return sw_SSD_EMU_Xtrapolis_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Xtrapolis_Connex_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Xtrapolis_Connex_lencheck;
    return sw_SSD_EMU_Xtrapolis_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Xtrapolis_Connex, 11001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_XTRAPOLIS);
        introduction_date:                date(2002,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_Xtrapolis_Connex;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Xtrapolis_Connex_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Xtrapolis_attach ;
        purchase: spriteset_SSD_EMU_Xtrapolis_Connex_purchase;
        additional_text: string(STR_INFO_SSD_EMU_XTRAPOLIS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Xtrapolis_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        39;
		running_cost_factor:             53;

    }
}

//Xtrapolis_MTM
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_purchase,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_Motor_lead,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_Motor_rear,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_DrivingTrailer_lead,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_DrivingTrailer_rear,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_Trailer,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor_r,   "gfx/SSD_EMU_Xtrapolis_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
    return spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1_r;
    return sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
    return sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2_r;
    return sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
    3 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Xtrapolis_MTM_sidecheck_4_r;
    5 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Xtrapolis_MTM_sidecheck_6_r;
    return sw_SSD_EMU_Xtrapolis_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Xtrapolis_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1;
    return sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1;
    return spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2;
    return sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Xtrapolis_MTM_Trailer;
    3 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_1;
    4 : sw_SSD_EMU_Xtrapolis_MTM_sidecheck_4;
    5 : sw_SSD_EMU_Xtrapolis_MTM_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Xtrapolis_MTM_sidecheck_6;
    return sw_SSD_EMU_Xtrapolis_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Xtrapolis_MTM_Motor_lead; //Panto
    return spriteset_SSD_EMU_Xtrapolis_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Xtrapolis_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Xtrapolis_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Xtrapolis_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Xtrapolis_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Xtrapolis_MTM_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Xtrapolis_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Xtrapolis_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Xtrapolis_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Xtrapolis_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Xtrapolis_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Xtrapolis_MTM_frontcheck; //We are going forwards
    return sw_SSD_EMU_Xtrapolis_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Xtrapolis_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Xtrapolis_MTM_lencheck;
    return sw_SSD_EMU_Xtrapolis_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Xtrapolis_MTM, 11002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_XTRAPOLIS);
        introduction_date:                date(2002,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        39 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_Xtrapolis_Connex;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Xtrapolis_MTM_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Xtrapolis_attach ;
        purchase: spriteset_SSD_EMU_Xtrapolis_MTM_purchase;
        additional_text: string(STR_INFO_SSD_EMU_XTRAPOLIS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Xtrapolis_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        39;
		running_cost_factor:             53;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_attach, vehicle_type_id){
	Item_SSD_EMU_Nexus_MTrain1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Nexus_MTrain2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Nexus_MTrain3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Nexus_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Nexus_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Nexus_MTrain1
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_purchase,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_Motor_lead,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_Motor_rear,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_DrivingTrailer_lead,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_DrivingTrailer_rear,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_Trailer,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor_r,   "gfx/SSD_EMU_Nexus_MTrain1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
    return spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1_r;
    return sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
    return sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2_r;
    return sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
    3 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Nexus_MTrain1_sidecheck_4_r;
    5 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Nexus_MTrain1_sidecheck_6_r;
    return sw_SSD_EMU_Nexus_MTrain1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain1_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1;
    return sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1;
    return spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2;
    return sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTrain1_Trailer;
    3 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_1;
    4 : sw_SSD_EMU_Nexus_MTrain1_sidecheck_4;
    5 : sw_SSD_EMU_Nexus_MTrain1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Nexus_MTrain1_sidecheck_6;
    return sw_SSD_EMU_Nexus_MTrain1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Nexus_MTrain1_Motor_lead; //Panto
    return spriteset_SSD_EMU_Nexus_MTrain1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTrain1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTrain1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTrain1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTrain1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Nexus_MTrain1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTrain1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTrain1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTrain1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTrain1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTrain1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Nexus_MTrain1_frontcheck; //We are going forwards
    return sw_SSD_EMU_Nexus_MTrain1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTrain1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Nexus_MTrain1_lencheck;
    return sw_SSD_EMU_Nexus_MTrain1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Nexus_MTrain1, 11026) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_NEXUS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Nexus_MTrain1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Nexus_MTrain1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Nexus_attach ;
        purchase: spriteset_SSD_EMU_Nexus_MTrain1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_NEXUS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Nexus_MTrain1_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

//Nexus_MTrain2
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_purchase,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_Motor_lead,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_Motor_rear,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_DrivingTrailer_lead,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_DrivingTrailer_rear,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_Trailer,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor_r,   "gfx/SSD_EMU_Nexus_MTrain2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
    return spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1_r;
    return sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
    return sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2_r;
    return sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
    3 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Nexus_MTrain2_sidecheck_4_r;
    5 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Nexus_MTrain2_sidecheck_6_r;
    return sw_SSD_EMU_Nexus_MTrain2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain2_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1;
    return sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1;
    return spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2;
    return sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTrain2_Trailer;
    3 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_1;
    4 : sw_SSD_EMU_Nexus_MTrain2_sidecheck_4;
    5 : sw_SSD_EMU_Nexus_MTrain2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Nexus_MTrain2_sidecheck_6;
    return sw_SSD_EMU_Nexus_MTrain2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Nexus_MTrain2_Motor_lead; //Panto
    return spriteset_SSD_EMU_Nexus_MTrain2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTrain2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTrain2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTrain2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTrain2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Nexus_MTrain2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTrain2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTrain2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTrain2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTrain2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTrain2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Nexus_MTrain2_frontcheck; //We are going forwards
    return sw_SSD_EMU_Nexus_MTrain2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTrain2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Nexus_MTrain2_lencheck;
    return sw_SSD_EMU_Nexus_MTrain2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Nexus_MTrain2, 11027) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_NEXUS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Nexus_MTrain1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Nexus_MTrain2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Nexus_attach ;
        purchase: spriteset_SSD_EMU_Nexus_MTrain2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_NEXUS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Nexus_MTrain2_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

//Nexus_MTrain3
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_purchase,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_Motor_lead,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_Motor_rear,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_DrivingTrailer_lead,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_DrivingTrailer_rear,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_Trailer,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor_r,   "gfx/SSD_EMU_Nexus_MTrain3.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
    return spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1_r;
    return sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
    return sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2_r;
    return sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
    3 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Nexus_MTrain3_sidecheck_4_r;
    5 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Nexus_MTrain3_sidecheck_6_r;
    return sw_SSD_EMU_Nexus_MTrain3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTrain3_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1;
    return sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1;
    return spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2;
    return sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTrain3_Trailer;
    3 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_1;
    4 : sw_SSD_EMU_Nexus_MTrain3_sidecheck_4;
    5 : sw_SSD_EMU_Nexus_MTrain3_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Nexus_MTrain3_sidecheck_6;
    return sw_SSD_EMU_Nexus_MTrain3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Nexus_MTrain3_Motor_lead; //Panto
    return spriteset_SSD_EMU_Nexus_MTrain3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain3_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTrain3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTrain3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTrain3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTrain3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Nexus_MTrain3_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTrain3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTrain3_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTrain3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTrain3_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTrain3_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTrain3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTrain3_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Nexus_MTrain3_frontcheck; //We are going forwards
    return sw_SSD_EMU_Nexus_MTrain3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTrain3_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Nexus_MTrain3_lencheck;
    return sw_SSD_EMU_Nexus_MTrain3_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Nexus_MTrain3, 11028) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_NEXUS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Nexus_MTrain1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Nexus_MTrain3_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Nexus_attach ;
        purchase: spriteset_SSD_EMU_Nexus_MTrain3_purchase;
        additional_text: string(STR_INFO_SSD_EMU_NEXUS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Nexus_MTrain3_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

//Nexus_Connex
spriteset(spriteset_SSD_EMU_Nexus_Connex_purchase,   "gfx/SSD_EMU_Nexus_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Nexus_Connex_Motor_lead,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Nexus_Connex_Motor_rear,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Nexus_Connex_DrivingTrailer_lead,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Nexus_Connex_DrivingTrailer_rear,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Nexus_Connex_Trailer,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Nexus_Connex_NonControlMotor,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Nexus_Connex_NonControlMotor_r,   "gfx/SSD_EMU_Nexus_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_Connex_Trailer;
    return spriteset_SSD_EMU_Nexus_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_1_r;
    return sw_SSD_EMU_Nexus_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Nexus_Connex_Trailer;
    return sw_SSD_EMU_Nexus_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_2_r;
    return sw_SSD_EMU_Nexus_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_Connex_Trailer;
    3 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Nexus_Connex_sidecheck_4_r;
    5 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Nexus_Connex_sidecheck_6_r;
    return sw_SSD_EMU_Nexus_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_Connex_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_1;
    return sw_SSD_EMU_Nexus_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_1;
    return spriteset_SSD_EMU_Nexus_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_2;
    return sw_SSD_EMU_Nexus_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_Connex_Trailer;
    3 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_1;
    4 : sw_SSD_EMU_Nexus_Connex_sidecheck_4;
    5 : sw_SSD_EMU_Nexus_Connex_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Nexus_Connex_sidecheck_6;
    return sw_SSD_EMU_Nexus_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Nexus_Connex_Motor_lead; //Panto
    return spriteset_SSD_EMU_Nexus_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Nexus_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Nexus_Connex_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Nexus_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_Connex_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_Connex_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Nexus_Connex_frontcheck; //We are going forwards
    return sw_SSD_EMU_Nexus_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_Connex_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Nexus_Connex_lencheck;
    return sw_SSD_EMU_Nexus_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Nexus_Connex, 11029) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_NEXUS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Nexus_MTrain1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Nexus_Connex_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Nexus_attach ;
        purchase: spriteset_SSD_EMU_Nexus_Connex_purchase;
        additional_text: string(STR_INFO_SSD_EMU_NEXUS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Nexus_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

//Nexus_MTM
spriteset(spriteset_SSD_EMU_Nexus_MTM_purchase,   "gfx/SSD_EMU_Nexus_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Nexus_MTM_Motor_lead,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Nexus_MTM_Motor_rear,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Nexus_MTM_DrivingTrailer_lead,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Nexus_MTM_DrivingTrailer_rear,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Nexus_MTM_Trailer,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTM_NonControlMotor,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Nexus_MTM_NonControlMotor_r,   "gfx/SSD_EMU_Nexus_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTM_Trailer;
    return spriteset_SSD_EMU_Nexus_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_1_r;
    return sw_SSD_EMU_Nexus_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Nexus_MTM_Trailer;
    return sw_SSD_EMU_Nexus_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_2_r;
    return sw_SSD_EMU_Nexus_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTM_Trailer;
    3 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Nexus_MTM_sidecheck_4_r;
    5 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Nexus_MTM_sidecheck_6_r;
    return sw_SSD_EMU_Nexus_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Nexus_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_1;
    return sw_SSD_EMU_Nexus_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_1;
    return spriteset_SSD_EMU_Nexus_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_2;
    return sw_SSD_EMU_Nexus_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Nexus_MTM_Trailer;
    3 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_1;
    4 : sw_SSD_EMU_Nexus_MTM_sidecheck_4;
    5 : sw_SSD_EMU_Nexus_MTM_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Nexus_MTM_sidecheck_6;
    return sw_SSD_EMU_Nexus_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Nexus_MTM_Motor_lead; //Panto
    return spriteset_SSD_EMU_Nexus_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Nexus_MTM_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Nexus_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Nexus_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Nexus_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Nexus_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Nexus_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Nexus_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Nexus_MTM_frontcheck; //We are going forwards
    return sw_SSD_EMU_Nexus_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Nexus_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Nexus_MTM_lencheck;
    return sw_SSD_EMU_Nexus_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Nexus_MTM, 11030) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on edach end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_NEXUS);
        introduction_date:                date(2003,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            145 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Nexus_MTrain1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Nexus_MTM_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Nexus_attach ;
        purchase: spriteset_SSD_EMU_Nexus_MTM_purchase;
        additional_text: string(STR_INFO_SSD_EMU_NEXUS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Nexus_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_attach, vehicle_type_id){
	Item_SSD_EMU_BSeriesSMU_QR1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_BSeriesSMU_QR2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_BSeriesSMU_TransPerth    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//BSeriesSMU_QR1
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_purchase,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_lead,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_rear,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_DrivingTrailer_lead,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_DrivingTrailer_rear,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor_r,   "gfx/SSD_EMU_BSeriesSMU_QR1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1_r;
    return sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
    return sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2_r;
    return sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
    3 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_4_r;
    5 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_6_r;
    return sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR1_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1;
    return sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1;
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2;
    return sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_BSeriesSMU_QR1_Trailer;
    3 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_1;
    4 : sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_4;
    5 : sw_SSD_EMU_BSeriesSMU_QR1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_6;
    return sw_SSD_EMU_BSeriesSMU_QR1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_lead; //Panto
    return spriteset_SSD_EMU_BSeriesSMU_QR1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_QR1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_QR1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_BSeriesSMU_QR1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_BSeriesSMU_QR1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_BSeriesSMU_QR1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_QR1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_BSeriesSMU_QR1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_BSeriesSMU_QR1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_BSeriesSMU_QR1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_BSeriesSMU_QR1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_BSeriesSMU_QR1_frontcheck; //We are going forwards
    return sw_SSD_EMU_BSeriesSMU_QR1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_BSeriesSMU_QR1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_BSeriesSMU_QR1_lencheck;
    return sw_SSD_EMU_BSeriesSMU_QR1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_BSeriesSMU_QR1, 11051) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_BSERIESSMU);
        introduction_date:                date(2004,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            130 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_BSeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_BSeriesSMU_QR1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_BSeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_BSeriesSMU_QR1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_BSERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_BSeriesSMU_QR1_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

//BSeriesSMU_QR2
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_purchase,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_lead,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_rear,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_DrivingTrailer_lead,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_DrivingTrailer_rear,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor_r,   "gfx/SSD_EMU_BSeriesSMU_QR2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1_r;
    return sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
    return sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2_r;
    return sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
    3 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_4_r;
    5 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_6_r;
    return sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_QR2_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1;
    return sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1;
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2;
    return sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_BSeriesSMU_QR2_Trailer;
    3 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_1;
    4 : sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_4;
    5 : sw_SSD_EMU_BSeriesSMU_QR2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_6;
    return sw_SSD_EMU_BSeriesSMU_QR2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_lead; //Panto
    return spriteset_SSD_EMU_BSeriesSMU_QR2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_QR2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_QR2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_BSeriesSMU_QR2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_BSeriesSMU_QR2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_BSeriesSMU_QR2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_QR2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_BSeriesSMU_QR2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_QR2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_BSeriesSMU_QR2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_BSeriesSMU_QR2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_BSeriesSMU_QR2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_BSeriesSMU_QR2_frontcheck; //We are going forwards
    return sw_SSD_EMU_BSeriesSMU_QR2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_BSeriesSMU_QR2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_BSeriesSMU_QR2_lencheck;
    return sw_SSD_EMU_BSeriesSMU_QR2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_BSeriesSMU_QR2, 11052) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_BSERIESSMU);
        introduction_date:                date(2004,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            130 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_BSeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_BSeriesSMU_QR2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_BSeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_BSeriesSMU_QR2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_BSERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_BSeriesSMU_QR2_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

//BSeriesSMU_TransPerth
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_purchase,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_lead,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_rear,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_DrivingTrailer_lead,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_DrivingTrailer_rear,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor_r,   "gfx/SSD_EMU_BSeriesSMU_TransPerth.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1_r;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2_r;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
    3 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1_r;
    4 : sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_4_r;
    5 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_6_r;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor_r;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_NonControlMotor;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1;
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_Trailer;
    3 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_1;
    4 : sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_4;
    5 : sw_SSD_EMU_BSeriesSMU_TransPerth_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_6;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_lead; //Panto
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_BSeriesSMU_TransPerth_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_BSeriesSMU_TransPerth_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_BSeriesSMU_TransPerth_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_BSeriesSMU_TransPerth_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_BSeriesSMU_TransPerth_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_BSeriesSMU_TransPerth_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_BSeriesSMU_TransPerth_frontcheck; //We are going forwards
    return sw_SSD_EMU_BSeriesSMU_TransPerth_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_BSeriesSMU_TransPerth_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_BSeriesSMU_TransPerth_lencheck;
    return sw_SSD_EMU_BSeriesSMU_TransPerth_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_BSeriesSMU_TransPerth, 11053) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_BSERIESSMU);
        introduction_date:                date(2004,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            130 km/h;
        power:                            1286 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     14;
        running_cost_factor:             210;
        cargo_capacity:                  142/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_BSeriesSMU_QR1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_BSeriesSMU_TransPerth_directioncheck;
        can_attach_wagon: sw_SSD_EMU_BSeriesSMU_attach ;
        purchase: spriteset_SSD_EMU_BSeriesSMU_TransPerth_purchase;
        additional_text: string(STR_INFO_SSD_EMU_BSERIESSMU);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_BSeriesSMU_TransPerth_revcheck ;
        length                      : 8;
        cargo_capacity              : (142/param_capacity_mod) ;
        power                       : 643 ;
		weight:                        40;
		running_cost_factor:             53;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_attach, vehicle_type_id){
	Item_SSD_EMU_Matangi_Early    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_Matangi_Metlink    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Matangi_Early
spriteset(spriteset_SSD_EMU_Matangi_Early_purchase,   "gfx/SSD_EMU_Matangi_Early.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Matangi_Early_Motor_lead,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Matangi_Early_Motor_rear,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Matangi_Early_DrivingTrailer_lead,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Matangi_Early_DrivingTrailer_rear,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Matangi_Early_Trailer,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Matangi_Early_NonControlMotor,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Matangi_Early_NonControlMotor_r,   "gfx/SSD_EMU_Matangi_Early.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Matangi_Early_Trailer;
    return spriteset_SSD_EMU_Matangi_Early_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Early_pantocheck_at_1_r;
    return sw_SSD_EMU_Matangi_Early_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Matangi_Early_Trailer;
    return sw_SSD_EMU_Matangi_Early_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Early_pantocheck_at_2_r;
    return sw_SSD_EMU_Matangi_Early_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Matangi_Early_Trailer;
    3 : sw_SSD_EMU_Matangi_Early_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Matangi_Early_sidecheck_4_r;
    5 : sw_SSD_EMU_Matangi_Early_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Matangi_Early_sidecheck_6_r;
    return sw_SSD_EMU_Matangi_Early_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Matangi_Early_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Early_pantocheck_at_1;
    return sw_SSD_EMU_Matangi_Early_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Early_pantocheck_at_1;
    return spriteset_SSD_EMU_Matangi_Early_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Early_pantocheck_at_2;
    return sw_SSD_EMU_Matangi_Early_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Matangi_Early_Trailer;
    3 : sw_SSD_EMU_Matangi_Early_pantocheck_at_1;
    4 : sw_SSD_EMU_Matangi_Early_sidecheck_4;
    5 : sw_SSD_EMU_Matangi_Early_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Matangi_Early_sidecheck_6;
    return sw_SSD_EMU_Matangi_Early_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Matangi_Early_Motor_lead; //Panto
    return spriteset_SSD_EMU_Matangi_Early_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Matangi_Early_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Matangi_Early_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Matangi_Early_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Matangi_Early_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Matangi_Early_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Matangi_Early_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Matangi_Early_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Matangi_Early_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Matangi_Early_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Matangi_Early_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Early_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Matangi_Early_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Matangi_Early_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Matangi_Early_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Matangi_Early_frontcheck; //We are going forwards
    return sw_SSD_EMU_Matangi_Early_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Matangi_Early_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Matangi_Early_lencheck;
    return sw_SSD_EMU_Matangi_Early_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Matangi_Early, 11101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_MATANGI);
        introduction_date:                date(2010,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            120 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             200;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Matangi_Early;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Matangi_Early_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Matangi_attach ;
        purchase: spriteset_SSD_EMU_Matangi_Early_purchase;
        additional_text: string(STR_INFO_SSD_EMU_MATANGI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Matangi_Early_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 460 ;
		weight:                        38;
		running_cost_factor:             50;

    }
}

//Matangi_Metlink
spriteset(spriteset_SSD_EMU_Matangi_Metlink_purchase,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Matangi_Metlink_Motor_lead,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Matangi_Metlink_Motor_rear,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Matangi_Metlink_DrivingTrailer_lead,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Matangi_Metlink_DrivingTrailer_rear,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Matangi_Metlink_Trailer,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor_r,   "gfx/SSD_EMU_Matangi_Metlink.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Matangi_Metlink_Trailer;
    return spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1_r;
    return sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Matangi_Metlink_Trailer;
    return sw_SSD_EMU_Matangi_Metlink_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2_r;
    return sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Matangi_Metlink_Trailer;
    3 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Matangi_Metlink_sidecheck_4_r;
    5 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Matangi_Metlink_sidecheck_6_r;
    return sw_SSD_EMU_Matangi_Metlink_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor_r;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Matangi_Metlink_NonControlMotor;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1;
    return sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1;
    return spriteset_SSD_EMU_Matangi_Metlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2;
    return sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Matangi_Metlink_Trailer;
    3 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_1;
    4 : sw_SSD_EMU_Matangi_Metlink_sidecheck_4;
    5 : sw_SSD_EMU_Matangi_Metlink_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Matangi_Metlink_sidecheck_6;
    return sw_SSD_EMU_Matangi_Metlink_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Matangi_Metlink_Motor_lead; //Panto
    return spriteset_SSD_EMU_Matangi_Metlink_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Matangi_Metlink_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Matangi_Metlink_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Matangi_Metlink_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Matangi_Metlink_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Matangi_Metlink_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Matangi_Metlink_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Matangi_Metlink_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Matangi_Metlink_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Matangi_Metlink_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Matangi_Metlink_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Matangi_Metlink_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Matangi_Metlink_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Matangi_Metlink_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Matangi_Metlink_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Matangi_Metlink_frontcheck; //We are going forwards
    return sw_SSD_EMU_Matangi_Metlink_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Matangi_Metlink_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Matangi_Metlink_lencheck;
    return sw_SSD_EMU_Matangi_Metlink_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Matangi_Metlink, 11102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_MATANGI);
        introduction_date:                date(2010,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            120 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             200;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_Matangi_Early;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Matangi_Metlink_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Matangi_attach ;
        purchase: spriteset_SSD_EMU_Matangi_Metlink_purchase;
        additional_text: string(STR_INFO_SSD_EMU_MATANGI);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Matangi_Metlink_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 460 ;
		weight:                        38;
		running_cost_factor:             50;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_attach, vehicle_type_id){
	Item_SSD_EMU_AMClass_Early1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AMClass_Early2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AMClass_AT1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_AMClass_AT2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//AMClass_Early1
spriteset(spriteset_SSD_EMU_AMClass_Early1_purchase,   "gfx/SSD_EMU_AMClass_Early1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AMClass_Early1_Motor_lead,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AMClass_Early1_Motor_rear,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AMClass_Early1_DrivingTrailer_lead,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AMClass_Early1_DrivingTrailer_rear,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AMClass_Early1_Trailer,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AMClass_Early1_NonControlMotor,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AMClass_Early1_NonControlMotor_r,   "gfx/SSD_EMU_AMClass_Early1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_Early1_Trailer;
    return spriteset_SSD_EMU_AMClass_Early1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_1_r;
    return sw_SSD_EMU_AMClass_Early1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AMClass_Early1_Trailer;
    return sw_SSD_EMU_AMClass_Early1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_2_r;
    return sw_SSD_EMU_AMClass_Early1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_Early1_Trailer;
    3 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AMClass_Early1_sidecheck_4_r;
    5 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AMClass_Early1_sidecheck_6_r;
    return sw_SSD_EMU_AMClass_Early1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_Early1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_1;
    return sw_SSD_EMU_AMClass_Early1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_1;
    return spriteset_SSD_EMU_AMClass_Early1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_2;
    return sw_SSD_EMU_AMClass_Early1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_Early1_Trailer;
    3 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_1;
    4 : sw_SSD_EMU_AMClass_Early1_sidecheck_4;
    5 : sw_SSD_EMU_AMClass_Early1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AMClass_Early1_sidecheck_6;
    return sw_SSD_EMU_AMClass_Early1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AMClass_Early1_Motor_lead; //Panto
    return spriteset_SSD_EMU_AMClass_Early1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_Early1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AMClass_Early1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_Early1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_Early1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_Early1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_Early1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AMClass_Early1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AMClass_Early1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_Early1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_Early1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_Early1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_Early1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_Early1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AMClass_Early1_frontcheck; //We are going forwards
    return sw_SSD_EMU_AMClass_Early1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_Early1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AMClass_Early1_lencheck;
    return sw_SSD_EMU_AMClass_Early1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AMClass_Early1, 11126) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AMCLASS);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            110 km/h;
        power:                            1360 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             200;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AMClass_Early1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AMClass_Early1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AMClass_attach ;
        purchase: spriteset_SSD_EMU_AMClass_Early1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AMCLASS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AMClass_Early1_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 680 ;
		weight:                        44;
		running_cost_factor:             50;

    }
}

//AMClass_Early2
spriteset(spriteset_SSD_EMU_AMClass_Early2_purchase,   "gfx/SSD_EMU_AMClass_Early2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AMClass_Early2_Motor_lead,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AMClass_Early2_Motor_rear,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AMClass_Early2_DrivingTrailer_lead,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AMClass_Early2_DrivingTrailer_rear,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AMClass_Early2_Trailer,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AMClass_Early2_NonControlMotor,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AMClass_Early2_NonControlMotor_r,   "gfx/SSD_EMU_AMClass_Early2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_Early2_Trailer;
    return spriteset_SSD_EMU_AMClass_Early2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_1_r;
    return sw_SSD_EMU_AMClass_Early2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AMClass_Early2_Trailer;
    return sw_SSD_EMU_AMClass_Early2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_2_r;
    return sw_SSD_EMU_AMClass_Early2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_Early2_Trailer;
    3 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AMClass_Early2_sidecheck_4_r;
    5 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AMClass_Early2_sidecheck_6_r;
    return sw_SSD_EMU_AMClass_Early2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_Early2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_1;
    return sw_SSD_EMU_AMClass_Early2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_1;
    return spriteset_SSD_EMU_AMClass_Early2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_2;
    return sw_SSD_EMU_AMClass_Early2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_Early2_Trailer;
    3 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_1;
    4 : sw_SSD_EMU_AMClass_Early2_sidecheck_4;
    5 : sw_SSD_EMU_AMClass_Early2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AMClass_Early2_sidecheck_6;
    return sw_SSD_EMU_AMClass_Early2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AMClass_Early2_Motor_lead; //Panto
    return spriteset_SSD_EMU_AMClass_Early2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_Early2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AMClass_Early2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_Early2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_Early2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_Early2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_Early2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AMClass_Early2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AMClass_Early2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_Early2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_Early2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_Early2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_Early2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_Early2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_Early2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AMClass_Early2_frontcheck; //We are going forwards
    return sw_SSD_EMU_AMClass_Early2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_Early2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AMClass_Early2_lencheck;
    return sw_SSD_EMU_AMClass_Early2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AMClass_Early2, 11127) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AMCLASS);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            110 km/h;
        power:                            1360 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             200;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AMClass_Early1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AMClass_Early2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AMClass_attach ;
        purchase: spriteset_SSD_EMU_AMClass_Early2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AMCLASS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AMClass_Early2_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 680 ;
		weight:                        44;
		running_cost_factor:             50;

    }
}

//AMClass_AT1
spriteset(spriteset_SSD_EMU_AMClass_AT1_purchase,   "gfx/SSD_EMU_AMClass_AT1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AMClass_AT1_Motor_lead,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AMClass_AT1_Motor_rear,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AMClass_AT1_DrivingTrailer_lead,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AMClass_AT1_DrivingTrailer_rear,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AMClass_AT1_Trailer,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AMClass_AT1_NonControlMotor,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AMClass_AT1_NonControlMotor_r,   "gfx/SSD_EMU_AMClass_AT1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_AT1_Trailer;
    return spriteset_SSD_EMU_AMClass_AT1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_1_r;
    return sw_SSD_EMU_AMClass_AT1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AMClass_AT1_Trailer;
    return sw_SSD_EMU_AMClass_AT1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_2_r;
    return sw_SSD_EMU_AMClass_AT1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_AT1_Trailer;
    3 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AMClass_AT1_sidecheck_4_r;
    5 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AMClass_AT1_sidecheck_6_r;
    return sw_SSD_EMU_AMClass_AT1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_AT1_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_1;
    return sw_SSD_EMU_AMClass_AT1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_1;
    return spriteset_SSD_EMU_AMClass_AT1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_2;
    return sw_SSD_EMU_AMClass_AT1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_AT1_Trailer;
    3 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_1;
    4 : sw_SSD_EMU_AMClass_AT1_sidecheck_4;
    5 : sw_SSD_EMU_AMClass_AT1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AMClass_AT1_sidecheck_6;
    return sw_SSD_EMU_AMClass_AT1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AMClass_AT1_Motor_lead; //Panto
    return spriteset_SSD_EMU_AMClass_AT1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_AT1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AMClass_AT1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_AT1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_AT1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_AT1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_AT1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AMClass_AT1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AMClass_AT1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_AT1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_AT1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_AT1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_AT1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_AT1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AMClass_AT1_frontcheck; //We are going forwards
    return sw_SSD_EMU_AMClass_AT1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_AT1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AMClass_AT1_lencheck;
    return sw_SSD_EMU_AMClass_AT1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AMClass_AT1, 11128) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AMCLASS);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            110 km/h;
        power:                            1360 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             200;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AMClass_Early1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AMClass_AT1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AMClass_attach ;
        purchase: spriteset_SSD_EMU_AMClass_AT1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AMCLASS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AMClass_AT1_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 680 ;
		weight:                        44;
		running_cost_factor:             50;

    }
}

//AMClass_AT2
spriteset(spriteset_SSD_EMU_AMClass_AT2_purchase,   "gfx/SSD_EMU_AMClass_AT2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_AMClass_AT2_Motor_lead,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_AMClass_AT2_Motor_rear,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_AMClass_AT2_DrivingTrailer_lead,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_AMClass_AT2_DrivingTrailer_rear,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_AMClass_AT2_Trailer,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_AMClass_AT2_NonControlMotor,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_AMClass_AT2_NonControlMotor_r,   "gfx/SSD_EMU_AMClass_AT2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_AT2_Trailer;
    return spriteset_SSD_EMU_AMClass_AT2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_1_r;
    return sw_SSD_EMU_AMClass_AT2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_AMClass_AT2_Trailer;
    return sw_SSD_EMU_AMClass_AT2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_2_r;
    return sw_SSD_EMU_AMClass_AT2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_AT2_Trailer;
    3 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_AMClass_AT2_sidecheck_4_r;
    5 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_AMClass_AT2_sidecheck_6_r;
    return sw_SSD_EMU_AMClass_AT2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor_r;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_AMClass_AT2_NonControlMotor;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_1;
    return sw_SSD_EMU_AMClass_AT2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_1;
    return spriteset_SSD_EMU_AMClass_AT2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_2;
    return sw_SSD_EMU_AMClass_AT2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_AMClass_AT2_Trailer;
    3 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_1;
    4 : sw_SSD_EMU_AMClass_AT2_sidecheck_4;
    5 : sw_SSD_EMU_AMClass_AT2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_AMClass_AT2_sidecheck_6;
    return sw_SSD_EMU_AMClass_AT2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_AMClass_AT2_Motor_lead; //Panto
    return spriteset_SSD_EMU_AMClass_AT2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_AT2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_AMClass_AT2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_AT2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_AT2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_AT2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_AT2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_AMClass_AT2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_AMClass_AT2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_AMClass_AT2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_AMClass_AT2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_AMClass_AT2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_AMClass_AT2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_AMClass_AT2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_AT2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_AMClass_AT2_frontcheck; //We are going forwards
    return sw_SSD_EMU_AMClass_AT2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_AMClass_AT2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_AMClass_AT2_lencheck;
    return sw_SSD_EMU_AMClass_AT2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_AMClass_AT2, 11129) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_AMCLASS);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            110 km/h;
        power:                            1360 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             200;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_AMClass_Early1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_AMClass_AT2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_AMClass_attach ;
        purchase: spriteset_SSD_EMU_AMClass_AT2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_AMCLASS);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_AMClass_AT2_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 680 ;
		weight:                        44;
		running_cost_factor:             50;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_attach, vehicle_type_id){
	Item_SSD_EMU_ACity_Metro1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_ACity_Metro2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ACity_Metro1
spriteset(spriteset_SSD_EMU_ACity_Metro1_purchase,   "gfx/SSD_EMU_ACity_Metro1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_ACity_Metro1_Motor_lead,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_ACity_Metro1_Motor_rear,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_ACity_Metro1_DrivingTrailer_lead,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_ACity_Metro1_DrivingTrailer_rear,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_ACity_Metro1_Trailer,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_ACity_Metro1_NonControlMotor,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_ACity_Metro1_NonControlMotor_r,   "gfx/SSD_EMU_ACity_Metro1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ACity_Metro1_Trailer;
    return spriteset_SSD_EMU_ACity_Metro1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_1_r;
    return sw_SSD_EMU_ACity_Metro1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_ACity_Metro1_Trailer;
    return sw_SSD_EMU_ACity_Metro1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_2_r;
    return sw_SSD_EMU_ACity_Metro1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ACity_Metro1_Trailer;
    3 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_ACity_Metro1_sidecheck_4_r;
    5 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_ACity_Metro1_sidecheck_6_r;
    return sw_SSD_EMU_ACity_Metro1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ACity_Metro1_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_1;
    return sw_SSD_EMU_ACity_Metro1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_1;
    return spriteset_SSD_EMU_ACity_Metro1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_2;
    return sw_SSD_EMU_ACity_Metro1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ACity_Metro1_Trailer;
    3 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_1;
    4 : sw_SSD_EMU_ACity_Metro1_sidecheck_4;
    5 : sw_SSD_EMU_ACity_Metro1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_ACity_Metro1_sidecheck_6;
    return sw_SSD_EMU_ACity_Metro1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_ACity_Metro1_Motor_lead; //Panto
    return spriteset_SSD_EMU_ACity_Metro1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ACity_Metro1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_ACity_Metro1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ACity_Metro1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ACity_Metro1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_ACity_Metro1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ACity_Metro1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_ACity_Metro1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_ACity_Metro1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_ACity_Metro1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ACity_Metro1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_ACity_Metro1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ACity_Metro1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ACity_Metro1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_ACity_Metro1_frontcheck; //We are going forwards
    return sw_SSD_EMU_ACity_Metro1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ACity_Metro1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_ACity_Metro1_lencheck;
    return sw_SSD_EMU_ACity_Metro1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_ACity_Metro1, 11151) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_ACITY);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            110 km/h;
        power:                            1430 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             202;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_ACity_Metro1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_ACity_Metro1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_ACity_attach ;
        purchase: spriteset_SSD_EMU_ACity_Metro1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_ACITY);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_ACity_Metro1_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 715 ;
		weight:                        44;
		running_cost_factor:             51;

    }
}

//ACity_Metro2
spriteset(spriteset_SSD_EMU_ACity_Metro2_purchase,   "gfx/SSD_EMU_ACity_Metro2.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_ACity_Metro2_Motor_lead,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_ACity_Metro2_Motor_rear,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_ACity_Metro2_DrivingTrailer_lead,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_ACity_Metro2_DrivingTrailer_rear,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_ACity_Metro2_Trailer,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_ACity_Metro2_NonControlMotor,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_ACity_Metro2_NonControlMotor_r,   "gfx/SSD_EMU_ACity_Metro2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ACity_Metro2_Trailer;
    return spriteset_SSD_EMU_ACity_Metro2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_1_r;
    return sw_SSD_EMU_ACity_Metro2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_ACity_Metro2_Trailer;
    return sw_SSD_EMU_ACity_Metro2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_2_r;
    return sw_SSD_EMU_ACity_Metro2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ACity_Metro2_Trailer;
    3 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_1_r;
    4 : sw_SSD_EMU_ACity_Metro2_sidecheck_4_r;
    5 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_ACity_Metro2_sidecheck_6_r;
    return sw_SSD_EMU_ACity_Metro2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor_r;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_ACity_Metro2_NonControlMotor;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_1;
    return sw_SSD_EMU_ACity_Metro2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_1;
    return spriteset_SSD_EMU_ACity_Metro2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_2;
    return sw_SSD_EMU_ACity_Metro2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_ACity_Metro2_Trailer;
    3 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_1;
    4 : sw_SSD_EMU_ACity_Metro2_sidecheck_4;
    5 : sw_SSD_EMU_ACity_Metro2_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_ACity_Metro2_sidecheck_6;
    return sw_SSD_EMU_ACity_Metro2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_ACity_Metro2_Motor_lead; //Panto
    return spriteset_SSD_EMU_ACity_Metro2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ACity_Metro2_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_ACity_Metro2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_ACity_Metro2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ACity_Metro2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_ACity_Metro2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ACity_Metro2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_ACity_Metro2_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_ACity_Metro2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_ACity_Metro2_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_ACity_Metro2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_ACity_Metro2_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_ACity_Metro2_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_ACity_Metro2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ACity_Metro2_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_ACity_Metro2_frontcheck; //We are going forwards
    return sw_SSD_EMU_ACity_Metro2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_ACity_Metro2_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_ACity_Metro2_lencheck;
    return sw_SSD_EMU_ACity_Metro2_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_ACity_Metro2, 11152) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_ACITY);
        introduction_date:                date(2014,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            110 km/h;
        power:                            1430 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             202;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_ACity_Metro1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_ACity_Metro2_directioncheck;
        can_attach_wagon: sw_SSD_EMU_ACity_attach ;
        purchase: spriteset_SSD_EMU_ACity_Metro2_purchase;
        additional_text: string(STR_INFO_SSD_EMU_ACITY);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_ACity_Metro2_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 715 ;
		weight:                        44;
		running_cost_factor:             51;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_attach, vehicle_type_id){
	Item_SSD_EMU_NGR_QR    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//NGR_QR
spriteset(spriteset_SSD_EMU_NGR_QR_purchase,   "gfx/SSD_EMU_NGR_QR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_NGR_QR_Motor_lead,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_NGR_QR_Motor_rear,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_NGR_QR_DrivingTrailer_lead,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_NGR_QR_DrivingTrailer_rear,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_NGR_QR_Trailer,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_NGR_QR_NonControlMotor,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_NGR_QR_NonControlMotor_r,   "gfx/SSD_EMU_NGR_QR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_NGR_QR_NonControlMotor_r;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_NGR_QR_NonControlMotor;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_NGR_QR_NonControlMotor_r;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_NGR_QR_Trailer;
    return spriteset_SSD_EMU_NGR_QR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_NGR_QR_NonControlMotor;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_NGR_QR_pantocheck_at_1_r;
    return sw_SSD_EMU_NGR_QR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_NGR_QR_Trailer;
    return sw_SSD_EMU_NGR_QR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_NGR_QR_pantocheck_at_2_r;
    return sw_SSD_EMU_NGR_QR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_NGR_QR_Trailer;
    3 : sw_SSD_EMU_NGR_QR_pantocheck_at_1_r;
    4 : sw_SSD_EMU_NGR_QR_sidecheck_4_r;
    5 : sw_SSD_EMU_NGR_QR_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_NGR_QR_sidecheck_6_r;
    return sw_SSD_EMU_NGR_QR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_NGR_QR_NonControlMotor_r;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_NGR_QR_NonControlMotor;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_NGR_QR_NonControlMotor_r;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_NGR_QR_NonControlMotor;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_NGR_QR_pantocheck_at_1;
    return sw_SSD_EMU_NGR_QR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_NGR_QR_pantocheck_at_1;
    return spriteset_SSD_EMU_NGR_QR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_NGR_QR_pantocheck_at_2;
    return sw_SSD_EMU_NGR_QR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_NGR_QR_Trailer;
    3 : sw_SSD_EMU_NGR_QR_pantocheck_at_1;
    4 : sw_SSD_EMU_NGR_QR_sidecheck_4;
    5 : sw_SSD_EMU_NGR_QR_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_NGR_QR_sidecheck_6;
    return sw_SSD_EMU_NGR_QR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_NGR_QR_Motor_lead; //Panto
    return spriteset_SSD_EMU_NGR_QR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_NGR_QR_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_NGR_QR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_NGR_QR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_NGR_QR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_NGR_QR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_NGR_QR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_NGR_QR_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_NGR_QR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_NGR_QR_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_NGR_QR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_NGR_QR_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_NGR_QR_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_NGR_QR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_NGR_QR_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_NGR_QR_frontcheck; //We are going forwards
    return sw_SSD_EMU_NGR_QR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_NGR_QR_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_NGR_QR_lencheck;
    return sw_SSD_EMU_NGR_QR_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_NGR_QR, 11176) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_NGR);
        introduction_date:                date(2019,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            140 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             204;
        cargo_capacity:                  155/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SSD_EMU_NGR_QR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_NGR_QR_directioncheck;
        can_attach_wagon: sw_SSD_EMU_NGR_attach ;
        purchase: spriteset_SSD_EMU_NGR_QR_purchase;
        additional_text: string(STR_INFO_SSD_EMU_NGR);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_NGR_QR_revcheck ;
        length                      : 8;
        cargo_capacity              : (155/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        42;
		running_cost_factor:             51;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_attach, vehicle_type_id){
	Item_SSD_EMU_HCMT_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_HCMT_JR    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_HCMT_KnockoffHorse    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//HCMT_MTM
spriteset(spriteset_SSD_EMU_HCMT_MTM_purchase,   "gfx/SSD_EMU_HCMT_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_HCMT_MTM_Motor_lead,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_HCMT_MTM_Motor_rear,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_HCMT_MTM_DrivingTrailer_lead,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_HCMT_MTM_DrivingTrailer_rear,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_HCMT_MTM_Trailer,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_HCMT_MTM_NonControlMotor,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_HCMT_MTM_NonControlMotor_r,   "gfx/SSD_EMU_HCMT_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_MTM_Trailer;
    return spriteset_SSD_EMU_HCMT_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_1_r;
    return sw_SSD_EMU_HCMT_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_HCMT_MTM_Trailer;
    return sw_SSD_EMU_HCMT_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_2_r;
    return sw_SSD_EMU_HCMT_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_HCMT_MTM_Trailer;
    3 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_1_r;
    4 : sw_SSD_EMU_HCMT_MTM_sidecheck_4_r;
    5 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_HCMT_MTM_sidecheck_6_r;
    return sw_SSD_EMU_HCMT_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_HCMT_MTM_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_1;
    return sw_SSD_EMU_HCMT_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_1;
    return spriteset_SSD_EMU_HCMT_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_2;
    return sw_SSD_EMU_HCMT_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_HCMT_MTM_Trailer;
    3 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_1;
    4 : sw_SSD_EMU_HCMT_MTM_sidecheck_4;
    5 : sw_SSD_EMU_HCMT_MTM_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_HCMT_MTM_sidecheck_6;
    return sw_SSD_EMU_HCMT_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_HCMT_MTM_Motor_lead; //Panto
    return spriteset_SSD_EMU_HCMT_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_HCMT_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_HCMT_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_HCMT_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_HCMT_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_HCMT_MTM_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_HCMT_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_HCMT_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_HCMT_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_HCMT_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_HCMT_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_HCMT_MTM_frontcheck; //We are going forwards
    return sw_SSD_EMU_HCMT_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_HCMT_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_HCMT_MTM_lencheck;
    return sw_SSD_EMU_HCMT_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_HCMT_MTM, 11201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_HCMT);
        introduction_date:                date(2020,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_HCMT_MTM;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_HCMT_MTM_directioncheck;
        can_attach_wagon: sw_SSD_EMU_HCMT_attach ;
        purchase: spriteset_SSD_EMU_HCMT_MTM_purchase;
        additional_text: string(STR_INFO_SSD_EMU_HCMT);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_HCMT_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        42;
		running_cost_factor:             49;

    }
}

//HCMT_JR
spriteset(spriteset_SSD_EMU_HCMT_JR_purchase,   "gfx/SSD_EMU_HCMT_JR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_HCMT_JR_Motor_lead,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_HCMT_JR_Motor_rear,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_HCMT_JR_DrivingTrailer_lead,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_HCMT_JR_DrivingTrailer_rear,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_HCMT_JR_Trailer,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_HCMT_JR_NonControlMotor,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_HCMT_JR_NonControlMotor_r,   "gfx/SSD_EMU_HCMT_JR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_JR_Trailer;
    return spriteset_SSD_EMU_HCMT_JR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_JR_pantocheck_at_1_r;
    return sw_SSD_EMU_HCMT_JR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_HCMT_JR_Trailer;
    return sw_SSD_EMU_HCMT_JR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_JR_pantocheck_at_2_r;
    return sw_SSD_EMU_HCMT_JR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_HCMT_JR_Trailer;
    3 : sw_SSD_EMU_HCMT_JR_pantocheck_at_1_r;
    4 : sw_SSD_EMU_HCMT_JR_sidecheck_4_r;
    5 : sw_SSD_EMU_HCMT_JR_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_HCMT_JR_sidecheck_6_r;
    return sw_SSD_EMU_HCMT_JR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_HCMT_JR_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_JR_pantocheck_at_1;
    return sw_SSD_EMU_HCMT_JR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_JR_pantocheck_at_1;
    return spriteset_SSD_EMU_HCMT_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_JR_pantocheck_at_2;
    return sw_SSD_EMU_HCMT_JR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_HCMT_JR_Trailer;
    3 : sw_SSD_EMU_HCMT_JR_pantocheck_at_1;
    4 : sw_SSD_EMU_HCMT_JR_sidecheck_4;
    5 : sw_SSD_EMU_HCMT_JR_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_HCMT_JR_sidecheck_6;
    return sw_SSD_EMU_HCMT_JR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_HCMT_JR_Motor_lead; //Panto
    return spriteset_SSD_EMU_HCMT_JR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_JR_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_HCMT_JR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_JR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_HCMT_JR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_HCMT_JR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_HCMT_JR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_HCMT_JR_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_HCMT_JR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_JR_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_HCMT_JR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_JR_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_HCMT_JR_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_HCMT_JR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_HCMT_JR_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_HCMT_JR_frontcheck; //We are going forwards
    return sw_SSD_EMU_HCMT_JR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_HCMT_JR_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_HCMT_JR_lencheck;
    return sw_SSD_EMU_HCMT_JR_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_HCMT_JR, 11202) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_HCMT);
        introduction_date:                date(2020,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_HCMT_MTM;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_HCMT_JR_directioncheck;
        can_attach_wagon: sw_SSD_EMU_HCMT_attach ;
        purchase: spriteset_SSD_EMU_HCMT_JR_purchase;
        additional_text: string(STR_INFO_SSD_EMU_HCMT);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_HCMT_JR_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        42;
		running_cost_factor:             49;

    }
}

//HCMT_KnockoffHorse
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_purchase,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_lead,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_rear,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_DrivingTrailer_lead,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_DrivingTrailer_rear,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor_r,   "gfx/SSD_EMU_HCMT_KnockoffHorse.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1_r;
    return sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
    return sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2_r;
    return sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
    3 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1_r;
    4 : sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_4_r;
    5 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_6_r;
    return sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_HCMT_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1;
    return sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1;
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2;
    return sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_HCMT_KnockoffHorse_Trailer;
    3 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_1;
    4 : sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_4;
    5 : sw_SSD_EMU_HCMT_KnockoffHorse_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_6;
    return sw_SSD_EMU_HCMT_KnockoffHorse_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_lead; //Panto
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_HCMT_KnockoffHorse_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_HCMT_KnockoffHorse_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_HCMT_KnockoffHorse_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_HCMT_KnockoffHorse_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_HCMT_KnockoffHorse_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_HCMT_KnockoffHorse_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_HCMT_KnockoffHorse_frontcheck; //We are going forwards
    return sw_SSD_EMU_HCMT_KnockoffHorse_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_HCMT_KnockoffHorse_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_HCMT_KnockoffHorse_lencheck;
    return sw_SSD_EMU_HCMT_KnockoffHorse_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_HCMT_KnockoffHorse, 11203) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_HCMT);
        introduction_date:                date(2020,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_HCMT_MTM;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_HCMT_KnockoffHorse_directioncheck;
        can_attach_wagon: sw_SSD_EMU_HCMT_attach ;
        purchase: spriteset_SSD_EMU_HCMT_KnockoffHorse_purchase;
        additional_text: string(STR_INFO_SSD_EMU_HCMT);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_HCMT_KnockoffHorse_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        42;
		running_cost_factor:             49;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_attach, vehicle_type_id){
	Item_SSD_EMU_CSeries_TransPerth1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_CSeries_JR    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SSD_EMU_CSeries_KnockoffHorse    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//CSeries_TransPerth1
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_purchase,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_Motor_lead,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_Motor_rear,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_DrivingTrailer_lead,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_DrivingTrailer_rear,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_Trailer,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor_r,   "gfx/SSD_EMU_CSeries_TransPerth1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
    return spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1_r;
    return sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
    return sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2_r;
    return sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
    3 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1_r;
    4 : sw_SSD_EMU_CSeries_TransPerth1_sidecheck_4_r;
    5 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_CSeries_TransPerth1_sidecheck_6_r;
    return sw_SSD_EMU_CSeries_TransPerth1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_CSeries_TransPerth1_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1;
    return sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1;
    return spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2;
    return sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_CSeries_TransPerth1_Trailer;
    3 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_1;
    4 : sw_SSD_EMU_CSeries_TransPerth1_sidecheck_4;
    5 : sw_SSD_EMU_CSeries_TransPerth1_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_CSeries_TransPerth1_sidecheck_6;
    return sw_SSD_EMU_CSeries_TransPerth1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_CSeries_TransPerth1_Motor_lead; //Panto
    return spriteset_SSD_EMU_CSeries_TransPerth1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_TransPerth1_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_CSeries_TransPerth1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_TransPerth1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_CSeries_TransPerth1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_CSeries_TransPerth1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_CSeries_TransPerth1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_CSeries_TransPerth1_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_CSeries_TransPerth1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_TransPerth1_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_CSeries_TransPerth1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_TransPerth1_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_CSeries_TransPerth1_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_CSeries_TransPerth1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_CSeries_TransPerth1_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_CSeries_TransPerth1_frontcheck; //We are going forwards
    return sw_SSD_EMU_CSeries_TransPerth1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_CSeries_TransPerth1_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_CSeries_TransPerth1_lencheck;
    return sw_SSD_EMU_CSeries_TransPerth1_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_CSeries_TransPerth1, 11226) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_CSERIES);
        introduction_date:                date(2024,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_CSeries_TransPerth1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_CSeries_TransPerth1_directioncheck;
        can_attach_wagon: sw_SSD_EMU_CSeries_attach;
        purchase: spriteset_SSD_EMU_CSeries_TransPerth1_purchase;
        additional_text: string(STR_INFO_SSD_EMU_CSERIES);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_CSeries_TransPerth1_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        38;
		running_cost_factor:             49;

    }
}

//CSeries_JR
spriteset(spriteset_SSD_EMU_CSeries_JR_purchase,   "gfx/SSD_EMU_CSeries_JR.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_CSeries_JR_Motor_lead,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_CSeries_JR_Motor_rear,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_CSeries_JR_DrivingTrailer_lead,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_CSeries_JR_DrivingTrailer_rear,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_CSeries_JR_Trailer,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_CSeries_JR_NonControlMotor,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_CSeries_JR_NonControlMotor_r,   "gfx/SSD_EMU_CSeries_JR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_JR_Trailer;
    return spriteset_SSD_EMU_CSeries_JR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_JR_pantocheck_at_1_r;
    return sw_SSD_EMU_CSeries_JR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_CSeries_JR_Trailer;
    return sw_SSD_EMU_CSeries_JR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_JR_pantocheck_at_2_r;
    return sw_SSD_EMU_CSeries_JR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_CSeries_JR_Trailer;
    3 : sw_SSD_EMU_CSeries_JR_pantocheck_at_1_r;
    4 : sw_SSD_EMU_CSeries_JR_sidecheck_4_r;
    5 : sw_SSD_EMU_CSeries_JR_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_CSeries_JR_sidecheck_6_r;
    return sw_SSD_EMU_CSeries_JR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_CSeries_JR_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_JR_pantocheck_at_1;
    return sw_SSD_EMU_CSeries_JR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_JR_pantocheck_at_1;
    return spriteset_SSD_EMU_CSeries_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_JR_pantocheck_at_2;
    return sw_SSD_EMU_CSeries_JR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_CSeries_JR_Trailer;
    3 : sw_SSD_EMU_CSeries_JR_pantocheck_at_1;
    4 : sw_SSD_EMU_CSeries_JR_sidecheck_4;
    5 : sw_SSD_EMU_CSeries_JR_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_CSeries_JR_sidecheck_6;
    return sw_SSD_EMU_CSeries_JR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_CSeries_JR_Motor_lead; //Panto
    return spriteset_SSD_EMU_CSeries_JR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_JR_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_CSeries_JR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_JR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_CSeries_JR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_CSeries_JR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_CSeries_JR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_CSeries_JR_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_CSeries_JR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_JR_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_CSeries_JR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_JR_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_CSeries_JR_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_CSeries_JR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_CSeries_JR_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_CSeries_JR_frontcheck; //We are going forwards
    return sw_SSD_EMU_CSeries_JR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_CSeries_JR_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_CSeries_JR_lencheck;
    return sw_SSD_EMU_CSeries_JR_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_CSeries_JR, 11227) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_CSERIES);
        introduction_date:                date(2024,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_CSeries_TransPerth1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_CSeries_JR_directioncheck;
        can_attach_wagon: sw_SSD_EMU_CSeries_attach;
        purchase: spriteset_SSD_EMU_CSeries_JR_purchase;
        additional_text: string(STR_INFO_SSD_EMU_CSERIES);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_CSeries_JR_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        38;
		running_cost_factor:             49;

    }
}

//CSeries_KnockoffHorse
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_purchase,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_lead,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_rear,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_DrivingTrailer_lead,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_DrivingTrailer_rear,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor_r,   "gfx/SSD_EMU_CSeries_KnockoffHorse.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1_r;
    return sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
    return sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2_r;
    return sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
    3 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1_r;
    4 : sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_4_r;
    5 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_6_r;
    return sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor_r;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_CSeries_KnockoffHorse_NonControlMotor;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1;
    return sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1;
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2;
    return sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_CSeries_KnockoffHorse_Trailer;
    3 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_1;
    4 : sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_4;
    5 : sw_SSD_EMU_CSeries_KnockoffHorse_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_6;
    return sw_SSD_EMU_CSeries_KnockoffHorse_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_lead; //Panto
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_CSeries_KnockoffHorse_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_CSeries_KnockoffHorse_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_CSeries_KnockoffHorse_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_CSeries_KnockoffHorse_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_CSeries_KnockoffHorse_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_CSeries_KnockoffHorse_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_CSeries_KnockoffHorse_frontcheck; //We are going forwards
    return sw_SSD_EMU_CSeries_KnockoffHorse_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_CSeries_KnockoffHorse_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_CSeries_KnockoffHorse_lencheck;
    return sw_SSD_EMU_CSeries_KnockoffHorse_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_CSeries_KnockoffHorse, 11228) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_CSERIES);
        introduction_date:                date(2024,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_CSeries_TransPerth1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_CSeries_KnockoffHorse_directioncheck;
        can_attach_wagon: sw_SSD_EMU_CSeries_attach;
        purchase: spriteset_SSD_EMU_CSeries_KnockoffHorse_purchase;
        additional_text: string(STR_INFO_SSD_EMU_CSERIES);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_CSeries_KnockoffHorse_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        38;
		running_cost_factor:             49;

    }
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_attach, vehicle_type_id){
	Item_SSD_EMU_Xtrapolis2_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Xtrapolis2_MTM
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_purchase,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_lead,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_rear,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_DrivingTrailer_lead,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_DrivingTrailer_rear,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor_r,   "gfx/SSD_EMU_Xtrapolis2_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1_r;
    return sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
    return sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2_r;
    return sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
    3 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1_r;
    4 : sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_4_r;
    5 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_6_r;
    return sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor_r;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SSD_EMU_Xtrapolis2_MTM_NonControlMotor;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1;
    return sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1;
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2;
    return sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SSD_EMU_Xtrapolis2_MTM_Trailer;
    3 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_1;
    4 : sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_4;
    5 : sw_SSD_EMU_Xtrapolis2_MTM_pantocheck_at_2;
    6 .. 7 : sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_6;
    return sw_SSD_EMU_Xtrapolis2_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_lead; //Panto
    return spriteset_SSD_EMU_Xtrapolis2_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis2_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis2_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SSD_EMU_Xtrapolis2_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Xtrapolis2_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_lead;        //Front panto
    return spriteset_SSD_EMU_Xtrapolis2_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SSD_EMU_Xtrapolis2_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SSD_EMU_Xtrapolis2_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SSD_EMU_Xtrapolis2_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SSD_EMU_Xtrapolis2_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SSD_EMU_Xtrapolis2_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Xtrapolis2_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SSD_EMU_Xtrapolis2_MTM_frontcheck; //We are going forwards
    return sw_SSD_EMU_Xtrapolis2_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SSD_EMU_Xtrapolis2_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SSD_EMU_Xtrapolis2_MTM_lencheck;
    return sw_SSD_EMU_Xtrapolis2_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SSD_EMU_Xtrapolis2_MTM, 11251) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_SuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SSD_EMU_XTRAPOLIS2);
        introduction_date:                date(2026,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        38 ton;
        speed:                            130 km/h;
        power:                            1500 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     16;
        running_cost_factor:             196;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SSD_EMU_Xtrapolis2_MTM;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SSD_EMU_Xtrapolis2_MTM_directioncheck;
        can_attach_wagon: sw_SSD_EMU_Xtrapolis2_attach ;
        purchase: spriteset_SSD_EMU_Xtrapolis2_MTM_purchase;
        additional_text: string(STR_INFO_SSD_EMU_XTRAPOLIS2);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SSD_EMU_Xtrapolis2_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 750 ;
		weight:                        38;
		running_cost_factor:             49;

    }
}

//TullochDD
spriteset(spriteset_SDD_EMU_TullochDD_purchase,   "gfx/SDD_EMU_TullochDD.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_TullochDD_Motor_lead,   "gfx/SDD_EMU_TullochDD.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_TullochDD_Motor_rear,   "gfx/SDD_EMU_TullochDD.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_TullochDD_DrivingTrailer_lead,   "gfx/SDD_EMU_TullochDD.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_TullochDD_DrivingTrailer_rear,   "gfx/SDD_EMU_TullochDD.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_TullochDD_Trailer,   "gfx/SDD_EMU_TullochDD.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_NonControlMotor,   "gfx/SDD_EMU_TullochDD.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_NonControlMotor_r,   "gfx/SDD_EMU_TullochDD.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_Trailer;
    return spriteset_SDD_EMU_TullochDD_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_pantocheck_at_1_r;
    return sw_SDD_EMU_TullochDD_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_TullochDD_Trailer;
    return sw_SDD_EMU_TullochDD_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_pantocheck_at_2_r;
    return sw_SDD_EMU_TullochDD_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_Trailer;
    3 : sw_SDD_EMU_TullochDD_pantocheck_at_1_r;
    4 : sw_SDD_EMU_TullochDD_sidecheck_4_r;
    5 : sw_SDD_EMU_TullochDD_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_TullochDD_sidecheck_6_r;
    return sw_SDD_EMU_TullochDD_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_pantocheck_at_1;
    return sw_SDD_EMU_TullochDD_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_pantocheck_at_1;
    return spriteset_SDD_EMU_TullochDD_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_pantocheck_at_2;
    return sw_SDD_EMU_TullochDD_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_Trailer;
    3 : sw_SDD_EMU_TullochDD_pantocheck_at_1;
    4 : sw_SDD_EMU_TullochDD_sidecheck_4;
    5 : sw_SDD_EMU_TullochDD_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_TullochDD_sidecheck_6;
    return sw_SDD_EMU_TullochDD_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_TullochDD_Motor_lead; //Panto
    return spriteset_SDD_EMU_TullochDD_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_TullochDD_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_TullochDD_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_TullochDD_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_TullochDD_frontcheck; //We are going forwards
    return sw_SDD_EMU_TullochDD_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_TullochDD_lencheck;
    return sw_SDD_EMU_TullochDD_lencheck_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_attach, vehicle_type_id){
    Item_SDD_EMU_TullochDD    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_TullochDD_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_TullochDD_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_TullochDD_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

item(FEAT_TRAINS, Item_SDD_EMU_TullochDD, 12600) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_TULLOCHDD);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  150/param_capacity_mod;
        loading_speed: 30;

//        variant_group: Item_SDD_EMU_TullochDD;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_TullochDD_directioncheck;
        can_attach_wagon: sw_SDD_EMU_TullochDD_attach ;
        purchase: spriteset_SDD_EMU_TullochDD_purchase;
        additional_text: string(STR_INFO_SDD_EMU_TULLOCHDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_TullochDD_revcheck ;
        length                      : 8;
        cargo_capacity              : (150/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 45;

    }
}

//TullochDD_PTC1
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_purchase,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_Motor_lead,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_Motor_rear,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_DrivingTrailer_lead,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_DrivingTrailer_rear,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_Trailer,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor_r,   "gfx/SDD_EMU_TullochDD_PTC1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
    return spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1_r;
    return sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
    return sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2_r;
    return sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
    3 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_TullochDD_PTC1_sidecheck_4_r;
    5 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_TullochDD_PTC1_sidecheck_6_r;
    return sw_SDD_EMU_TullochDD_PTC1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1;
    return sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1;
    return spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2;
    return sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_PTC1_Trailer;
    3 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_1;
    4 : sw_SDD_EMU_TullochDD_PTC1_sidecheck_4;
    5 : sw_SDD_EMU_TullochDD_PTC1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_TullochDD_PTC1_sidecheck_6;
    return sw_SDD_EMU_TullochDD_PTC1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_TullochDD_PTC1_Motor_lead; //Panto
    return spriteset_SDD_EMU_TullochDD_PTC1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_PTC1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_TullochDD_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_PTC1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_PTC1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_PTC1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_PTC1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_TullochDD_PTC1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_TullochDD_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_PTC1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_PTC1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_PTC1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_PTC1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_PTC1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_TullochDD_PTC1_frontcheck; //We are going forwards
    return sw_SDD_EMU_TullochDD_PTC1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_PTC1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_TullochDD_PTC1_lencheck;
    return sw_SDD_EMU_TullochDD_PTC1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_TullochDD_PTC1, 12601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_TULLOCHDD);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  150/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_TullochDD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_TullochDD_PTC1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_TullochDD_attach ;
        purchase: spriteset_SDD_EMU_TullochDD_PTC1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_TULLOCHDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_TullochDD_PTC1_revcheck ;
        length                      : 8;
        cargo_capacity              : (150/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 45;

    }
}

//TullochDD_PTC2
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_purchase,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_Motor_lead,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_Motor_rear,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_DrivingTrailer_lead,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_DrivingTrailer_rear,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_Trailer,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor_r,   "gfx/SDD_EMU_TullochDD_PTC2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
    return spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1_r;
    return sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
    return sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2_r;
    return sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
    3 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_TullochDD_PTC2_sidecheck_4_r;
    5 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_TullochDD_PTC2_sidecheck_6_r;
    return sw_SDD_EMU_TullochDD_PTC2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1;
    return sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1;
    return spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2;
    return sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_PTC2_Trailer;
    3 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_1;
    4 : sw_SDD_EMU_TullochDD_PTC2_sidecheck_4;
    5 : sw_SDD_EMU_TullochDD_PTC2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_TullochDD_PTC2_sidecheck_6;
    return sw_SDD_EMU_TullochDD_PTC2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_TullochDD_PTC2_Motor_lead; //Panto
    return spriteset_SDD_EMU_TullochDD_PTC2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_PTC2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_TullochDD_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_PTC2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_PTC2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_PTC2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_PTC2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_TullochDD_PTC2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_TullochDD_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_PTC2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_PTC2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_PTC2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_PTC2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_PTC2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_PTC2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_TullochDD_PTC2_frontcheck; //We are going forwards
    return sw_SDD_EMU_TullochDD_PTC2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_PTC2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_TullochDD_PTC2_lencheck;
    return sw_SDD_EMU_TullochDD_PTC2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_TullochDD_PTC2, 12602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_TULLOCHDD);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  150/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_TullochDD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_TullochDD_PTC2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_TullochDD_attach ;
        purchase: spriteset_SDD_EMU_TullochDD_PTC2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_TULLOCHDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_TullochDD_PTC2_revcheck ;
        length                      : 8;
        cargo_capacity              : (150/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 45;

    }
}

//TullochDD_Cityrail
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_purchase,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_Motor_lead,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_Motor_rear,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_DrivingTrailer_lead,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_DrivingTrailer_rear,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_Trailer,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor_r,   "gfx/SDD_EMU_TullochDD_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
    return spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1_r;
    return sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
    return sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2_r;
    return sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
    3 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1_r;
    4 : sw_SDD_EMU_TullochDD_Cityrail_sidecheck_4_r;
    5 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_TullochDD_Cityrail_sidecheck_6_r;
    return sw_SDD_EMU_TullochDD_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_TullochDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1;
    return sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1;
    return spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2;
    return sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_TullochDD_Cityrail_Trailer;
    3 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_1;
    4 : sw_SDD_EMU_TullochDD_Cityrail_sidecheck_4;
    5 : sw_SDD_EMU_TullochDD_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_TullochDD_Cityrail_sidecheck_6;
    return sw_SDD_EMU_TullochDD_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_TullochDD_Cityrail_Motor_lead; //Panto
    return spriteset_SDD_EMU_TullochDD_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_TullochDD_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_TullochDD_Cityrail_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_TullochDD_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_TullochDD_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_TullochDD_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_TullochDD_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_TullochDD_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_TullochDD_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_TullochDD_Cityrail_frontcheck; //We are going forwards
    return sw_SDD_EMU_TullochDD_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_TullochDD_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_TullochDD_Cityrail_lencheck;
    return sw_SDD_EMU_TullochDD_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_TullochDD_Cityrail, 12603) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_TULLOCHDD);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  150/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_TullochDD;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_TullochDD_Cityrail_directioncheck;
        can_attach_wagon: sw_SDD_EMU_TullochDD_attach ;
        purchase: spriteset_SDD_EMU_TullochDD_Cityrail_purchase;
        additional_text: string(STR_INFO_SDD_EMU_TULLOCHDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_TullochDD_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (150/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 45;

    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_attach, vehicle_type_id){
    Item_SDD_EMU_ComengSSet_Indian    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_StripeYellow    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_FullYellow    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengSSet_Cityrail3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_PTC1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_PTC2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_Bare    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDoubleDeckers_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengSSet_Indian
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_purchase,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_Motor_lead,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_Motor_rear,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_Trailer,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_Indian.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
    return spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
    return sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_Indian_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Indian_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_Indian_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Indian_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Indian_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_Indian_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_Indian_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Indian_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_Indian_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_Indian_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_Indian_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Indian_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Indian_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Indian_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Indian_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Indian_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Indian_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_Indian_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Indian_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Indian_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Indian_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Indian_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Indian_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Indian_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Indian_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_Indian_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_Indian_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Indian_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_Indian_lencheck;
    return sw_SDD_EMU_ComengSSet_Indian_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_Indian, 12701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_Indian_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_Indian_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_Indian_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_PTC1
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_purchase,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_Motor_lead,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_Motor_rear,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_Trailer,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_PTC1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
    return spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
    return sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
    3 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_PTC1_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_PTC1_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_PTC1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_PTC1_Trailer;
    3 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_PTC1_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_PTC1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_PTC1_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_PTC1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_PTC1_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_PTC1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_PTC1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_PTC1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_PTC1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_PTC1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_PTC1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_PTC1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_PTC1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_PTC1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_PTC1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_PTC1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_PTC1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_PTC1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_PTC1_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_PTC1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_PTC1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_PTC1_lencheck;
    return sw_SDD_EMU_ComengSSet_PTC1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_PTC1, 12702) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_PTC1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_PTC1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_PTC1_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_PTC2
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_purchase,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_Motor_lead,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_Motor_rear,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_Trailer,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_PTC2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
    return spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
    return sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
    3 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_PTC2_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_PTC2_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_PTC2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_PTC2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_PTC2_Trailer;
    3 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_PTC2_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_PTC2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_PTC2_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_PTC2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_PTC2_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_PTC2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_PTC2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_PTC2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_PTC2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_PTC2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_PTC2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_PTC2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_PTC2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_PTC2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_PTC2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_PTC2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_PTC2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_PTC2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_PTC2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_PTC2_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_PTC2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_PTC2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_PTC2_lencheck;
    return sw_SDD_EMU_ComengSSet_PTC2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_PTC2, 12703) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_PTC2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_PTC2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_PTC2_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_StripeYellow
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_purchase,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_lead,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_rear,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_StripeYellow.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
    return sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
    3 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_StripeYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_StripeYellow_Trailer;
    3 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_StripeYellow_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_StripeYellow_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_StripeYellow_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_StripeYellow_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_StripeYellow_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_StripeYellow_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_StripeYellow_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_StripeYellow_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_StripeYellow_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_StripeYellow_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_StripeYellow_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_StripeYellow_lencheck;
    return sw_SDD_EMU_ComengSSet_StripeYellow_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_StripeYellow, 12704) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_StripeYellow_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_StripeYellow_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_StripeYellow_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_FullYellow
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_purchase,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_lead,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_rear,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_FullYellow.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
    return sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
    3 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_FullYellow_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_FullYellow_Trailer;
    3 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_FullYellow_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_FullYellow_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_FullYellow_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_FullYellow_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_FullYellow_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_FullYellow_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_FullYellow_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_FullYellow_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_FullYellow_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_FullYellow_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_FullYellow_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_FullYellow_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_FullYellow_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_FullYellow_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_FullYellow_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_FullYellow_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_FullYellow_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_FullYellow_lencheck;
    return sw_SDD_EMU_ComengSSet_FullYellow_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_FullYellow, 12705) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_FullYellow_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_FullYellow_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_FullYellow_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_SRA
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_purchase,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_Motor_lead,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_Motor_rear,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_Trailer,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
    return spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
    return sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
    3 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_SRA_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_SRA_Trailer;
    3 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_SRA_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_SRA_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_SRA_lencheck;
    return sw_SDD_EMU_ComengSSet_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_SRA, 12706) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_Cityrail1
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_purchase,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_lead,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_rear,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
    return sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Cityrail1_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_Cityrail1_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_Cityrail1_lencheck;
    return sw_SDD_EMU_ComengSSet_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_Cityrail1, 12707) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_Cityrail1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_Cityrail1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_Cityrail2
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_purchase,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_lead,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_rear,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
    return sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Cityrail2_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_Cityrail2_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_Cityrail2_lencheck;
    return sw_SDD_EMU_ComengSSet_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_Cityrail2, 12708) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_Cityrail2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_Cityrail2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

//ComengSSet_Cityrail3
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_purchase,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_lead,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_rear,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor_r,   "gfx/SDD_EMU_ComengSSet_Cityrail3.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
    return sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_6_r;
    return sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengSSet_Cityrail3_NonControlMotor;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1;
    return sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2;
    return sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengSSet_Cityrail3_Trailer;
    3 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_4;
    5 : sw_SDD_EMU_ComengSSet_Cityrail3_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_6;
    return sw_SDD_EMU_ComengSSet_Cityrail3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Cityrail3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengSSet_Cityrail3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengSSet_Cityrail3_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengSSet_Cityrail3_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengSSet_Cityrail3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Cityrail3_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengSSet_Cityrail3_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengSSet_Cityrail3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengSSet_Cityrail3_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengSSet_Cityrail3_lencheck;
    return sw_SDD_EMU_ComengSSet_Cityrail3_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengSSet_Cityrail3, 12709) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGSSET);
        introduction_date:                date(1972,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengSSet_Indian;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengSSet_Cityrail3_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengSSet_attach ;
        purchase: spriteset_SDD_EMU_ComengSSet_Cityrail3_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengSSet_Cityrail3_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor: 40;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_attach, vehicle_type_id){
	Item_SDD_EMU_AUPTDD_DOT    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_AUPTDD_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_AUPTDD_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_AUPTDD_MTA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_AUPTDD_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_AUPTDD_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//AUPTDD_DOT
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_purchase,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_Motor_lead,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_Motor_rear,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_DrivingTrailer_lead,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_DrivingTrailer_rear,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_Trailer,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor_r,   "gfx/SDD_EMU_AUPTDD_DOT.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
    return spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1_r;
    return sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
    return sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2_r;
    return sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
    3 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1_r;
    4 : sw_SDD_EMU_AUPTDD_DOT_sidecheck_4_r;
    5 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_AUPTDD_DOT_sidecheck_6_r;
    return sw_SDD_EMU_AUPTDD_DOT_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_DOT_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1;
    return sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1;
    return spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2;
    return sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_DOT_Trailer;
    3 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_1;
    4 : sw_SDD_EMU_AUPTDD_DOT_sidecheck_4;
    5 : sw_SDD_EMU_AUPTDD_DOT_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_AUPTDD_DOT_sidecheck_6;
    return sw_SDD_EMU_AUPTDD_DOT_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_AUPTDD_DOT_Motor_lead; //Panto
    return spriteset_SDD_EMU_AUPTDD_DOT_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_DOT_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_DOT_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_DOT_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_DOT_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_DOT_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_DOT_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_AUPTDD_DOT_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_DOT_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_DOT_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_DOT_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_DOT_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_DOT_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_DOT_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_DOT_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_AUPTDD_DOT_frontcheck; //We are going forwards
    return sw_SDD_EMU_AUPTDD_DOT_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_DOT_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_AUPTDD_DOT_lencheck;
    return sw_SDD_EMU_AUPTDD_DOT_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_AUPTDD_DOT, 12726) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_AUPTDD);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_AUPTDD_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_AUPTDD_DOT_directioncheck;
        can_attach_wagon: sw_SDD_EMU_AUPTDD_attach ;
        purchase: spriteset_SDD_EMU_AUPTDD_DOT_purchase;
        additional_text: string(STR_INFO_SDD_EMU_AUPTDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_AUPTDD_DOT_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//AUPTDD_SRA
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_purchase,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_Motor_lead,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_Motor_rear,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_Trailer,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor_r,   "gfx/SDD_EMU_AUPTDD_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
    return spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
    return sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
    3 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_AUPTDD_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_AUPTDD_SRA_sidecheck_6_r;
    return sw_SDD_EMU_AUPTDD_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_SRA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1;
    return sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2;
    return sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_SRA_Trailer;
    3 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_AUPTDD_SRA_sidecheck_4;
    5 : sw_SDD_EMU_AUPTDD_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_AUPTDD_SRA_sidecheck_6;
    return sw_SDD_EMU_AUPTDD_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_AUPTDD_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_AUPTDD_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_AUPTDD_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_AUPTDD_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_AUPTDD_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_AUPTDD_SRA_lencheck;
    return sw_SDD_EMU_AUPTDD_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_AUPTDD_SRA, 12727) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_AUPTDD);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_AUPTDD_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_AUPTDD_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_AUPTDD_attach ;
        purchase: spriteset_SDD_EMU_AUPTDD_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_AUPTDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_AUPTDD_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//AUPTDD_Cityrail
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_purchase,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_lead,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_rear,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_DrivingTrailer_lead,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_DrivingTrailer_rear,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor_r,   "gfx/SDD_EMU_AUPTDD_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1_r;
    return sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
    return sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2_r;
    return sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
    3 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1_r;
    4 : sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_4_r;
    5 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_6_r;
    return sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1;
    return sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1;
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2;
    return sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_Cityrail_Trailer;
    3 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_1;
    4 : sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_4;
    5 : sw_SDD_EMU_AUPTDD_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_6;
    return sw_SDD_EMU_AUPTDD_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_lead; //Panto
    return spriteset_SDD_EMU_AUPTDD_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_AUPTDD_Cityrail_frontcheck; //We are going forwards
    return sw_SDD_EMU_AUPTDD_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_AUPTDD_Cityrail_lencheck;
    return sw_SDD_EMU_AUPTDD_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_AUPTDD_Cityrail, 12728) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_AUPTDD);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_AUPTDD_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_AUPTDD_Cityrail_directioncheck;
        can_attach_wagon: sw_SDD_EMU_AUPTDD_attach ;
        purchase: spriteset_SDD_EMU_AUPTDD_Cityrail_purchase;
        additional_text: string(STR_INFO_SDD_EMU_AUPTDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_AUPTDD_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//AUPTDD_MTA
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_purchase,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_Motor_lead,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_Motor_rear,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_DrivingTrailer_lead,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_DrivingTrailer_rear,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_Trailer,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor_r,   "gfx/SDD_EMU_AUPTDD_MTA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
    return spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1_r;
    return sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
    return sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2_r;
    return sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
    3 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_AUPTDD_MTA_sidecheck_4_r;
    5 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_AUPTDD_MTA_sidecheck_6_r;
    return sw_SDD_EMU_AUPTDD_MTA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1;
    return sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1;
    return spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2;
    return sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_MTA_Trailer;
    3 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_1;
    4 : sw_SDD_EMU_AUPTDD_MTA_sidecheck_4;
    5 : sw_SDD_EMU_AUPTDD_MTA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_AUPTDD_MTA_sidecheck_6;
    return sw_SDD_EMU_AUPTDD_MTA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_AUPTDD_MTA_Motor_lead; //Panto
    return spriteset_SDD_EMU_AUPTDD_MTA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_MTA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_MTA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_MTA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_MTA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_MTA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_AUPTDD_MTA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_MTA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_MTA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_MTA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_MTA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_MTA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_AUPTDD_MTA_frontcheck; //We are going forwards
    return sw_SDD_EMU_AUPTDD_MTA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_MTA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_AUPTDD_MTA_lencheck;
    return sw_SDD_EMU_AUPTDD_MTA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_AUPTDD_MTA, 12729) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_AUPTDD);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_AUPTDD_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_AUPTDD_MTA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_AUPTDD_attach ;
        purchase: spriteset_SDD_EMU_AUPTDD_MTA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_AUPTDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_AUPTDD_MTA_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//AUPTDD_Connex
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_purchase,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_Motor_lead,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_Motor_rear,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_DrivingTrailer_lead,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_DrivingTrailer_rear,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_Trailer,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor_r,   "gfx/SDD_EMU_AUPTDD_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
    return spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1_r;
    return sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
    return sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2_r;
    return sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
    3 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1_r;
    4 : sw_SDD_EMU_AUPTDD_Connex_sidecheck_4_r;
    5 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_AUPTDD_Connex_sidecheck_6_r;
    return sw_SDD_EMU_AUPTDD_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1;
    return sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1;
    return spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2;
    return sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_Connex_Trailer;
    3 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_1;
    4 : sw_SDD_EMU_AUPTDD_Connex_sidecheck_4;
    5 : sw_SDD_EMU_AUPTDD_Connex_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_AUPTDD_Connex_sidecheck_6;
    return sw_SDD_EMU_AUPTDD_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_AUPTDD_Connex_Motor_lead; //Panto
    return spriteset_SDD_EMU_AUPTDD_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_AUPTDD_Connex_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_Connex_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_Connex_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_AUPTDD_Connex_frontcheck; //We are going forwards
    return sw_SDD_EMU_AUPTDD_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_Connex_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_AUPTDD_Connex_lencheck;
    return sw_SDD_EMU_AUPTDD_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_AUPTDD_Connex, 12730) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_AUPTDD);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_AUPTDD_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_AUPTDD_Connex_directioncheck;
        can_attach_wagon: sw_SDD_EMU_AUPTDD_attach ;
        purchase: spriteset_SDD_EMU_AUPTDD_Connex_purchase;
        additional_text: string(STR_INFO_SDD_EMU_AUPTDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_AUPTDD_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//AUPTDD_MTM
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_purchase,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_Motor_lead,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_Motor_rear,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_DrivingTrailer_lead,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_DrivingTrailer_rear,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_Trailer,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor_r,   "gfx/SDD_EMU_AUPTDD_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
    return spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1_r;
    return sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
    return sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2_r;
    return sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
    3 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1_r;
    4 : sw_SDD_EMU_AUPTDD_MTM_sidecheck_4_r;
    5 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_AUPTDD_MTM_sidecheck_6_r;
    return sw_SDD_EMU_AUPTDD_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_AUPTDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1;
    return sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1;
    return spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2;
    return sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_AUPTDD_MTM_Trailer;
    3 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_1;
    4 : sw_SDD_EMU_AUPTDD_MTM_sidecheck_4;
    5 : sw_SDD_EMU_AUPTDD_MTM_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_AUPTDD_MTM_sidecheck_6;
    return sw_SDD_EMU_AUPTDD_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_AUPTDD_MTM_Motor_lead; //Panto
    return spriteset_SDD_EMU_AUPTDD_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_AUPTDD_MTM_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_AUPTDD_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_AUPTDD_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_AUPTDD_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_AUPTDD_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_AUPTDD_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_AUPTDD_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_AUPTDD_MTM_frontcheck; //We are going forwards
    return sw_SDD_EMU_AUPTDD_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_AUPTDD_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_AUPTDD_MTM_lencheck;
    return sw_SDD_EMU_AUPTDD_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_AUPTDD_MTM, 12731) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_AUPTDD);
        introduction_date:                date(1975,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_AUPTDD_DOT;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_AUPTDD_MTM_directioncheck;
        can_attach_wagon: sw_SDD_EMU_AUPTDD_attach ;
        purchase: spriteset_SDD_EMU_AUPTDD_MTM_purchase;
        additional_text: string(STR_INFO_SDD_EMU_AUPTDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_AUPTDD_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_attach, vehicle_type_id){
	Item_SDD_EMU_VSSet_PTC    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_VSSet_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_VSSet_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_VSSet_CentralCoast    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_VSSet_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//VSSet_PTC
spriteset(spriteset_SDD_EMU_VSSet_PTC_purchase,   "gfx/SDD_EMU_VSSet_PTC.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_VSSet_PTC_Motor_lead,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_VSSet_PTC_Motor_rear,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_VSSet_PTC_DrivingTrailer_lead,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_VSSet_PTC_DrivingTrailer_rear,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_VSSet_PTC_Trailer,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_VSSet_PTC_NonControlMotor,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_VSSet_PTC_NonControlMotor_r,   "gfx/SDD_EMU_VSSet_PTC.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_PTC_Trailer;
    return spriteset_SDD_EMU_VSSet_PTC_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_1_r;
    return sw_SDD_EMU_VSSet_PTC_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_VSSet_PTC_Trailer;
    return sw_SDD_EMU_VSSet_PTC_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_2_r;
    return sw_SDD_EMU_VSSet_PTC_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_PTC_Trailer;
    3 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_1_r;
    4 : sw_SDD_EMU_VSSet_PTC_sidecheck_4_r;
    5 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_VSSet_PTC_sidecheck_6_r;
    return sw_SDD_EMU_VSSet_PTC_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_PTC_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_1;
    return sw_SDD_EMU_VSSet_PTC_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_1;
    return spriteset_SDD_EMU_VSSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_2;
    return sw_SDD_EMU_VSSet_PTC_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_PTC_Trailer;
    3 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_1;
    4 : sw_SDD_EMU_VSSet_PTC_sidecheck_4;
    5 : sw_SDD_EMU_VSSet_PTC_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_VSSet_PTC_sidecheck_6;
    return sw_SDD_EMU_VSSet_PTC_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_VSSet_PTC_Motor_lead; //Panto
    return spriteset_SDD_EMU_VSSet_PTC_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_PTC_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_VSSet_PTC_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_PTC_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_PTC_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_PTC_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_PTC_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_VSSet_PTC_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_VSSet_PTC_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_PTC_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_PTC_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_PTC_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_PTC_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_PTC_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_PTC_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_VSSet_PTC_frontcheck; //We are going forwards
    return sw_SDD_EMU_VSSet_PTC_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_PTC_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_VSSet_PTC_lencheck;
    return sw_SDD_EMU_VSSet_PTC_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_VSSet_PTC, 12751) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_VSSET);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_VSSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_VSSet_PTC_directioncheck;
        can_attach_wagon: sw_SDD_EMU_VSSet_attach ;
        purchase: spriteset_SDD_EMU_VSSet_PTC_purchase;
        additional_text: string(STR_INFO_SDD_EMU_VSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_VSSet_PTC_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet_SRA
spriteset(spriteset_SDD_EMU_VSSet_SRA_purchase,   "gfx/SDD_EMU_VSSet_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_VSSet_SRA_Motor_lead,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_VSSet_SRA_Motor_rear,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_VSSet_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_VSSet_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_VSSet_SRA_Trailer,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_VSSet_SRA_NonControlMotor,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_VSSet_SRA_NonControlMotor_r,   "gfx/SDD_EMU_VSSet_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_SRA_Trailer;
    return spriteset_SDD_EMU_VSSet_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_VSSet_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_VSSet_SRA_Trailer;
    return sw_SDD_EMU_VSSet_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_VSSet_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_SRA_Trailer;
    3 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_VSSet_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_VSSet_SRA_sidecheck_6_r;
    return sw_SDD_EMU_VSSet_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_1;
    return sw_SDD_EMU_VSSet_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_VSSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_2;
    return sw_SDD_EMU_VSSet_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_SRA_Trailer;
    3 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_VSSet_SRA_sidecheck_4;
    5 : sw_SDD_EMU_VSSet_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_VSSet_SRA_sidecheck_6;
    return sw_SDD_EMU_VSSet_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_VSSet_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_VSSet_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_VSSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_VSSet_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_VSSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_VSSet_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_VSSet_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_VSSet_SRA_lencheck;
    return sw_SDD_EMU_VSSet_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_VSSet_SRA, 12752) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_VSSET);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_VSSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_VSSet_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_VSSet_attach ;
        purchase: spriteset_SDD_EMU_VSSet_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_VSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_VSSet_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet_Cityrail1
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_purchase,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_Motor_lead,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_Motor_rear,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_DrivingTrailer_lead,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_DrivingTrailer_rear,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_Trailer,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor_r,   "gfx/SDD_EMU_VSSet_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
    return spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1_r;
    return sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
    return sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2_r;
    return sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
    3 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_VSSet_Cityrail1_sidecheck_4_r;
    5 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_VSSet_Cityrail1_sidecheck_6_r;
    return sw_SDD_EMU_VSSet_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1;
    return sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1;
    return spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2;
    return sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_Cityrail1_Trailer;
    3 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_1;
    4 : sw_SDD_EMU_VSSet_Cityrail1_sidecheck_4;
    5 : sw_SDD_EMU_VSSet_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_VSSet_Cityrail1_sidecheck_6;
    return sw_SDD_EMU_VSSet_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_VSSet_Cityrail1_Motor_lead; //Panto
    return spriteset_SDD_EMU_VSSet_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_VSSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_VSSet_Cityrail1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_VSSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_VSSet_Cityrail1_frontcheck; //We are going forwards
    return sw_SDD_EMU_VSSet_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_VSSet_Cityrail1_lencheck;
    return sw_SDD_EMU_VSSet_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_VSSet_Cityrail1, 12753) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_VSSET);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_VSSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_VSSet_Cityrail1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_VSSet_attach ;
        purchase: spriteset_SDD_EMU_VSSet_Cityrail1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_VSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_VSSet_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet_CentralCoast
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_purchase,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_Motor_lead,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_Motor_rear,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_DrivingTrailer_lead,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_DrivingTrailer_rear,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_Trailer,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor_r,   "gfx/SDD_EMU_VSSet_CentralCoast.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
    return spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1_r;
    return sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
    return sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2_r;
    return sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
    3 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1_r;
    4 : sw_SDD_EMU_VSSet_CentralCoast_sidecheck_4_r;
    5 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_VSSet_CentralCoast_sidecheck_6_r;
    return sw_SDD_EMU_VSSet_CentralCoast_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_CentralCoast_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1;
    return sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1;
    return spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2;
    return sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_CentralCoast_Trailer;
    3 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_1;
    4 : sw_SDD_EMU_VSSet_CentralCoast_sidecheck_4;
    5 : sw_SDD_EMU_VSSet_CentralCoast_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_VSSet_CentralCoast_sidecheck_6;
    return sw_SDD_EMU_VSSet_CentralCoast_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_VSSet_CentralCoast_Motor_lead; //Panto
    return spriteset_SDD_EMU_VSSet_CentralCoast_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_CentralCoast_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_VSSet_CentralCoast_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_CentralCoast_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_CentralCoast_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_CentralCoast_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_CentralCoast_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_VSSet_CentralCoast_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_VSSet_CentralCoast_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_CentralCoast_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_CentralCoast_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_CentralCoast_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_CentralCoast_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_CentralCoast_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_CentralCoast_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_VSSet_CentralCoast_frontcheck; //We are going forwards
    return sw_SDD_EMU_VSSet_CentralCoast_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_CentralCoast_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_VSSet_CentralCoast_lencheck;
    return sw_SDD_EMU_VSSet_CentralCoast_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_VSSet_CentralCoast, 12754) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_VSSET);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_VSSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_VSSet_CentralCoast_directioncheck;
        can_attach_wagon: sw_SDD_EMU_VSSet_attach ;
        purchase: spriteset_SDD_EMU_VSSet_CentralCoast_purchase;
        additional_text: string(STR_INFO_SDD_EMU_VSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_VSSet_CentralCoast_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet_Cityrail2
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_purchase,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_Motor_lead,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_Motor_rear,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_DrivingTrailer_lead,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_DrivingTrailer_rear,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_Trailer,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor_r,   "gfx/SDD_EMU_VSSet_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
    return spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1_r;
    return sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
    return sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2_r;
    return sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
    3 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_VSSet_Cityrail2_sidecheck_4_r;
    5 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_VSSet_Cityrail2_sidecheck_6_r;
    return sw_SDD_EMU_VSSet_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_VSSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1;
    return sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1;
    return spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2;
    return sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_VSSet_Cityrail2_Trailer;
    3 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_1;
    4 : sw_SDD_EMU_VSSet_Cityrail2_sidecheck_4;
    5 : sw_SDD_EMU_VSSet_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_VSSet_Cityrail2_sidecheck_6;
    return sw_SDD_EMU_VSSet_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_VSSet_Cityrail2_Motor_lead; //Panto
    return spriteset_SDD_EMU_VSSet_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_VSSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_VSSet_Cityrail2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_VSSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_VSSet_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_VSSet_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_VSSet_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_VSSet_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_VSSet_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_VSSet_Cityrail2_frontcheck; //We are going forwards
    return sw_SDD_EMU_VSSet_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_VSSet_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_VSSet_Cityrail2_lencheck;
    return sw_SDD_EMU_VSSet_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_VSSet_Cityrail2, 12755) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_VSSET);
        introduction_date:                date(1976,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            115 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  160/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_SDD_EMU_VSSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_VSSet_Cityrail2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_VSSet_attach ;
        purchase: spriteset_SDD_EMU_VSSet_Cityrail2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_VSSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_VSSet_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (160/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_attach, vehicle_type_id){
	Item_SDD_EMU_GoninanKSet_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanKSet_ChopperPrototype    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanKSet_TangaraPrototype    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanKSet_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanKSet_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//GoninanKSet_SRA
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_purchase,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_Motor_lead,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_Motor_rear,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_Trailer,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor_r,   "gfx/SDD_EMU_GoninanKSet_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
    return spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
    return sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanKSet_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_SRA_sidecheck_6_r;
    return sw_SDD_EMU_GoninanKSet_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1;
    return sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2;
    return sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_SRA_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanKSet_SRA_sidecheck_4;
    5 : sw_SDD_EMU_GoninanKSet_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_SRA_sidecheck_6;
    return sw_SDD_EMU_GoninanKSet_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanKSet_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanKSet_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanKSet_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanKSet_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanKSet_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanKSet_SRA_lencheck;
    return sw_SDD_EMU_GoninanKSet_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanKSet_SRA, 12801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanKSet_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanKSet_attach ;
        purchase: spriteset_SDD_EMU_GoninanKSet_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanKSet_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

//GoninanKSet_ChopperPrototype
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_purchase,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_lead,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_rear,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor_r,   "gfx/SDD_EMU_GoninanKSet_ChopperPrototype.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_6_r;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_4;
    5 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_6;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_ChopperPrototype_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_ChopperPrototype_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanKSet_ChopperPrototype_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_ChopperPrototype_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanKSet_ChopperPrototype_lencheck;
    return sw_SDD_EMU_GoninanKSet_ChopperPrototype_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanKSet_ChopperPrototype, 12802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanKSet_ChopperPrototype_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanKSet_attach ;
        purchase: spriteset_SDD_EMU_GoninanKSet_ChopperPrototype_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanKSet_ChopperPrototype_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

//GoninanKSet_TangaraPrototype
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_purchase,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_lead,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_rear,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor_r,   "gfx/SDD_EMU_GoninanKSet_TangaraPrototype.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_6_r;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_4;
    5 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_6;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_TangaraPrototype_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_TangaraPrototype_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanKSet_TangaraPrototype_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_TangaraPrototype_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanKSet_TangaraPrototype_lencheck;
    return sw_SDD_EMU_GoninanKSet_TangaraPrototype_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanKSet_TangaraPrototype, 12803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanKSet_TangaraPrototype_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanKSet_attach ;
        purchase: spriteset_SDD_EMU_GoninanKSet_TangaraPrototype_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanKSet_TangaraPrototype_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

//GoninanKSet_Cityrail1
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_purchase,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_lead,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_rear,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor_r,   "gfx/SDD_EMU_GoninanKSet_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_6_r;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_4;
    5 : sw_SDD_EMU_GoninanKSet_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_6;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanKSet_Cityrail1_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanKSet_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail1_lencheck;
    return sw_SDD_EMU_GoninanKSet_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanKSet_Cityrail1, 12804) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanKSet_Cityrail1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanKSet_attach ;
        purchase: spriteset_SDD_EMU_GoninanKSet_Cityrail1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanKSet_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

//GoninanKSet_Cityrail2
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_purchase,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_lead,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_rear,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor_r,   "gfx/SDD_EMU_GoninanKSet_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_6_r;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_Trailer;
    3 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_4;
    5 : sw_SDD_EMU_GoninanKSet_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_6;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanKSet_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanKSet_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanKSet_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanKSet_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanKSet_Cityrail2_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanKSet_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanKSet_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanKSet_Cityrail2_lencheck;
    return sw_SDD_EMU_GoninanKSet_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanKSet_Cityrail2, 12805) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanKSet_Cityrail2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanKSet_attach ;
        purchase: spriteset_SDD_EMU_GoninanKSet_Cityrail2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanKSet_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_attach, vehicle_type_id){
	Item_SDD_EMU_ComengKSet_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_ComengKSet_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengKSet_SRA
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_purchase,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_Motor_lead,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_Motor_rear,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_Trailer,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor_r,   "gfx/SDD_EMU_ComengKSet_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
    return spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
    return sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
    3 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengKSet_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengKSet_SRA_sidecheck_6_r;
    return sw_SDD_EMU_ComengKSet_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengKSet_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1;
    return sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2;
    return sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengKSet_SRA_Trailer;
    3 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengKSet_SRA_sidecheck_4;
    5 : sw_SDD_EMU_ComengKSet_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengKSet_SRA_sidecheck_6;
    return sw_SDD_EMU_ComengKSet_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengKSet_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengKSet_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengKSet_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengKSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengKSet_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengKSet_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengKSet_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengKSet_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengKSet_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengKSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengKSet_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengKSet_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengKSet_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengKSet_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengKSet_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengKSet_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengKSet_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengKSet_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengKSet_SRA_lencheck;
    return sw_SDD_EMU_ComengKSet_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengKSet_SRA, 12826) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengKSet_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengKSet_attach ;
        purchase: spriteset_SDD_EMU_ComengKSet_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengKSet_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

//ComengKSet_Cityrail
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_purchase,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_lead,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_rear,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor_r,   "gfx/SDD_EMU_ComengKSet_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
    return sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
    3 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_6_r;
    return sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengKSet_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1;
    return sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2;
    return sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengKSet_Cityrail_Trailer;
    3 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_4;
    5 : sw_SDD_EMU_ComengKSet_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_6;
    return sw_SDD_EMU_ComengKSet_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengKSet_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengKSet_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengKSet_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengKSet_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengKSet_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengKSet_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengKSet_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengKSet_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengKSet_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengKSet_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengKSet_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengKSet_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengKSet_Cityrail_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengKSet_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengKSet_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengKSet_Cityrail_lencheck;
    return sw_SDD_EMU_ComengKSet_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengKSet_Cityrail, 12827) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGKSET);
        introduction_date:                date(1981,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            115 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     21;
        running_cost_factor:             192;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengKSet_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengKSet_Cityrail_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengKSet_attach ;
        purchase: spriteset_SDD_EMU_ComengKSet_Cityrail_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGKSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengKSet_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        47;
		running_cost_factor: 48;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_attach, vehicle_type_id){
	Item_SDD_EMU_GoninanChopper_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanChopper_ChopperPrototype    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanChopper_TangaraPrototype    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanChopper_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_GoninanChopper_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//GoninanChopper_SRA
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_purchase,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_Motor_lead,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_Motor_rear,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_Trailer,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor_r,   "gfx/SDD_EMU_GoninanChopper_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
    return spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
    return sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanChopper_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_SRA_sidecheck_6_r;
    return sw_SDD_EMU_GoninanChopper_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1;
    return sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2;
    return sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_SRA_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanChopper_SRA_sidecheck_4;
    5 : sw_SDD_EMU_GoninanChopper_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_SRA_sidecheck_6;
    return sw_SDD_EMU_GoninanChopper_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanChopper_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanChopper_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanChopper_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanChopper_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanChopper_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanChopper_SRA_lencheck;
    return sw_SDD_EMU_GoninanChopper_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanChopper_SRA, 12851) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANCHOPPER);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            115 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             200;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanChopper_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanChopper_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanChopper_attach ;
        purchase: spriteset_SDD_EMU_GoninanChopper_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANCHOPPER);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanChopper_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 469 ;
		weight:                        48;
		running_cost_factor: 50;
    }
}

//GoninanChopper_ChopperPrototype
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_purchase,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_lead,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_rear,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor_r,   "gfx/SDD_EMU_GoninanChopper_ChopperPrototype.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_6_r;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_4;
    5 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_6;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_ChopperPrototype_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_ChopperPrototype_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanChopper_ChopperPrototype_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_ChopperPrototype_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanChopper_ChopperPrototype_lencheck;
    return sw_SDD_EMU_GoninanChopper_ChopperPrototype_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanChopper_ChopperPrototype, 12852) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANCHOPPER);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            115 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             200;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanChopper_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanChopper_ChopperPrototype_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanChopper_attach ;
        purchase: spriteset_SDD_EMU_GoninanChopper_ChopperPrototype_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANCHOPPER);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanChopper_ChopperPrototype_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 469 ;
		weight:                        48;
		running_cost_factor: 50;
    }
}

//GoninanChopper_TangaraPrototype
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_purchase,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_lead,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_rear,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor_r,   "gfx/SDD_EMU_GoninanChopper_TangaraPrototype.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_6_r;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_4;
    5 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_6;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_TangaraPrototype_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_TangaraPrototype_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanChopper_TangaraPrototype_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_TangaraPrototype_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanChopper_TangaraPrototype_lencheck;
    return sw_SDD_EMU_GoninanChopper_TangaraPrototype_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanChopper_TangaraPrototype, 12853) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANCHOPPER);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            115 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             200;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanChopper_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanChopper_TangaraPrototype_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanChopper_attach ;
        purchase: spriteset_SDD_EMU_GoninanChopper_TangaraPrototype_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANCHOPPER);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanChopper_TangaraPrototype_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 469 ;
		weight:                        48;
		running_cost_factor: 50;
    }
}

//GoninanChopper_Cityrail1
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_purchase,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_lead,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_rear,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor_r,   "gfx/SDD_EMU_GoninanChopper_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_6_r;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_4;
    5 : sw_SDD_EMU_GoninanChopper_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_6;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanChopper_Cityrail1_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanChopper_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail1_lencheck;
    return sw_SDD_EMU_GoninanChopper_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanChopper_Cityrail1, 12854) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANCHOPPER);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            115 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             200;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanChopper_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanChopper_Cityrail1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanChopper_attach ;
        purchase: spriteset_SDD_EMU_GoninanChopper_Cityrail1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANCHOPPER);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanChopper_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 469 ;
		weight:                        48;
		running_cost_factor: 50;
    }
}

//GoninanChopper_Cityrail2
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_purchase,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_lead,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_rear,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor_r,   "gfx/SDD_EMU_GoninanChopper_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_6_r;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_Trailer;
    3 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_4;
    5 : sw_SDD_EMU_GoninanChopper_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_6;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanChopper_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanChopper_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanChopper_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanChopper_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanChopper_Cityrail2_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanChopper_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanChopper_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanChopper_Cityrail2_lencheck;
    return sw_SDD_EMU_GoninanChopper_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanChopper_Cityrail2, 12855) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANCHOPPER);
        introduction_date:                date(1986,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        48 ton;
        speed:                            115 km/h;
        power:                            920 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             200;
        cargo_capacity:                  169/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanChopper_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanChopper_Cityrail2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanChopper_attach ;
        purchase: spriteset_SDD_EMU_GoninanChopper_Cityrail2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANCHOPPER);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanChopper_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (169/param_capacity_mod) ;
        power                       : 469 ;
		weight:                        48;
		running_cost_factor: 50;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_attach, vehicle_type_id){
    Item_SDD_EMU_GoninanTangara_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_GoninanTangara_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_GoninanTangara_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_GoninanTangara_4DMTA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_GoninanTangara_4DConnex    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_GoninanTangara_4DMTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//GoninanTangara_SRA
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_purchase,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_Motor_lead,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_Motor_rear,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_Trailer,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor_r,   "gfx/SDD_EMU_GoninanTangara_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
    return spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
    return sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanTangara_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_SRA_sidecheck_6_r;
    return sw_SDD_EMU_GoninanTangara_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1;
    return sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2;
    return sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_SRA_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanTangara_SRA_sidecheck_4;
    5 : sw_SDD_EMU_GoninanTangara_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_SRA_sidecheck_6;
    return sw_SDD_EMU_GoninanTangara_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanTangara_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanTangara_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanTangara_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanTangara_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanTangara_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanTangara_SRA_lencheck;
    return sw_SDD_EMU_GoninanTangara_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanTangara_SRA, 12876) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANTANGARA);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanTangara_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanTangara_attach ;
        purchase: spriteset_SDD_EMU_GoninanTangara_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanTangara_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//GoninanTangara_Cityrail1
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_purchase,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_lead,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_rear,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor_r,   "gfx/SDD_EMU_GoninanTangara_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_6_r;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_4;
    5 : sw_SDD_EMU_GoninanTangara_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_6;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanTangara_Cityrail1_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanTangara_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail1_lencheck;
    return sw_SDD_EMU_GoninanTangara_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanTangara_Cityrail1, 12877) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANTANGARA);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanTangara_Cityrail1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanTangara_attach ;
        purchase: spriteset_SDD_EMU_GoninanTangara_Cityrail1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanTangara_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//GoninanTangara_Cityrail2
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_purchase,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_lead,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_rear,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor_r,   "gfx/SDD_EMU_GoninanTangara_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_6_r;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_4;
    5 : sw_SDD_EMU_GoninanTangara_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_6;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanTangara_Cityrail2_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanTangara_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanTangara_Cityrail2_lencheck;
    return sw_SDD_EMU_GoninanTangara_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanTangara_Cityrail2, 12878) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANTANGARA);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanTangara_Cityrail2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanTangara_attach ;
        purchase: spriteset_SDD_EMU_GoninanTangara_Cityrail2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanTangara_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//GoninanTangara_4DMTA
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_purchase,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_lead,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_rear,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor_r,   "gfx/SDD_EMU_GoninanTangara_4DMTA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
    return sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_6_r;
    return sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTA_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1;
    return sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2;
    return sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_4DMTA_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_4;
    5 : sw_SDD_EMU_GoninanTangara_4DMTA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_6;
    return sw_SDD_EMU_GoninanTangara_4DMTA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_4DMTA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_4DMTA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_4DMTA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_4DMTA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanTangara_4DMTA_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanTangara_4DMTA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_4DMTA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanTangara_4DMTA_lencheck;
    return sw_SDD_EMU_GoninanTangara_4DMTA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanTangara_4DMTA, 12879) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANTANGARA);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanTangara_4DMTA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanTangara_attach ;
        purchase: spriteset_SDD_EMU_GoninanTangara_4DMTA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanTangara_4DMTA_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//GoninanTangara_4DConnex
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_purchase,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_lead,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_rear,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor_r,   "gfx/SDD_EMU_GoninanTangara_4DConnex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
    return sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_6_r;
    return sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DConnex_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1;
    return sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2;
    return sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_4DConnex_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_4;
    5 : sw_SDD_EMU_GoninanTangara_4DConnex_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_6;
    return sw_SDD_EMU_GoninanTangara_4DConnex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_4DConnex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_4DConnex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DConnex_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_4DConnex_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_4DConnex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_4DConnex_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanTangara_4DConnex_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanTangara_4DConnex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_4DConnex_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanTangara_4DConnex_lencheck;
    return sw_SDD_EMU_GoninanTangara_4DConnex_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanTangara_4DConnex, 12880) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANTANGARA);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanTangara_4DConnex_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanTangara_attach ;
        purchase: spriteset_SDD_EMU_GoninanTangara_4DConnex_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanTangara_4DConnex_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//GoninanTangara_4DMTM
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_purchase,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_lead,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_rear,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_DrivingTrailer_lead,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_DrivingTrailer_rear,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor_r,   "gfx/SDD_EMU_GoninanTangara_4DMTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1_r;
    return sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
    return sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2_r;
    return sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1_r;
    4 : sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_4_r;
    5 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_6_r;
    return sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor_r;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_GoninanTangara_4DMTM_NonControlMotor;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1;
    return sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1;
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2;
    return sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_GoninanTangara_4DMTM_Trailer;
    3 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_1;
    4 : sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_4;
    5 : sw_SDD_EMU_GoninanTangara_4DMTM_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_6;
    return sw_SDD_EMU_GoninanTangara_4DMTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_lead; //Panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_4DMTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_GoninanTangara_4DMTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_GoninanTangara_4DMTM_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_GoninanTangara_4DMTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_GoninanTangara_4DMTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_4DMTM_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_GoninanTangara_4DMTM_frontcheck; //We are going forwards
    return sw_SDD_EMU_GoninanTangara_4DMTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_GoninanTangara_4DMTM_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_GoninanTangara_4DMTM_lencheck;
    return sw_SDD_EMU_GoninanTangara_4DMTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_GoninanTangara_4DMTM, 12881) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_GONINANTANGARA);
        introduction_date:                date(1988,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_GoninanTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_GoninanTangara_4DMTM_directioncheck;
        can_attach_wagon: sw_SDD_EMU_GoninanTangara_attach ;
        purchase: spriteset_SDD_EMU_GoninanTangara_4DMTM_purchase;
        additional_text: string(STR_INFO_SDD_EMU_GONINANTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_GoninanTangara_4DMTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_attach, vehicle_type_id){
    Item_SDD_EMU_ComengTangara_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengTangara_MTA1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengTangara_MTA2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengTangara_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_SDD_EMU_ComengTangara_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengTangara_SRA
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_purchase,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_Motor_lead,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_Motor_rear,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_Trailer,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor_r,   "gfx/SDD_EMU_ComengTangara_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
    return spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
    return sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
    3 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengTangara_SRA_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengTangara_SRA_sidecheck_6_r;
    return sw_SDD_EMU_ComengTangara_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_SRA_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1;
    return sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2;
    return sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_SRA_Trailer;
    3 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengTangara_SRA_sidecheck_4;
    5 : sw_SDD_EMU_ComengTangara_SRA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengTangara_SRA_sidecheck_6;
    return sw_SDD_EMU_ComengTangara_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengTangara_SRA_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengTangara_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengTangara_SRA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_SRA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_SRA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengTangara_SRA_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengTangara_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_SRA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengTangara_SRA_lencheck;
    return sw_SDD_EMU_ComengTangara_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengTangara_SRA, 12901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGTANGARA);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengTangara_SRA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengTangara_attach ;
        purchase: spriteset_SDD_EMU_ComengTangara_SRA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengTangara_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//ComengTangara_MTA1
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_purchase,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_Motor_lead,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_Motor_rear,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_Trailer,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor_r,   "gfx/SDD_EMU_ComengTangara_MTA1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
    return spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
    return sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
    3 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengTangara_MTA1_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengTangara_MTA1_sidecheck_6_r;
    return sw_SDD_EMU_ComengTangara_MTA1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA1_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1;
    return sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2;
    return sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_MTA1_Trailer;
    3 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengTangara_MTA1_sidecheck_4;
    5 : sw_SDD_EMU_ComengTangara_MTA1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengTangara_MTA1_sidecheck_6;
    return sw_SDD_EMU_ComengTangara_MTA1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengTangara_MTA1_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengTangara_MTA1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTA1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_MTA1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTA1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_MTA1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_MTA1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_MTA1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengTangara_MTA1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_MTA1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTA1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_MTA1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_MTA1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_MTA1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_MTA1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengTangara_MTA1_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengTangara_MTA1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_MTA1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengTangara_MTA1_lencheck;
    return sw_SDD_EMU_ComengTangara_MTA1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengTangara_MTA1, 12902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGTANGARA);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengTangara_MTA1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengTangara_attach ;
        purchase: spriteset_SDD_EMU_ComengTangara_MTA1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengTangara_MTA1_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//ComengTangara_MTA2
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_purchase,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_Motor_lead,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_Motor_rear,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_Trailer,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor_r,   "gfx/SDD_EMU_ComengTangara_MTA2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
    return spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
    return sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
    3 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengTangara_MTA2_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengTangara_MTA2_sidecheck_6_r;
    return sw_SDD_EMU_ComengTangara_MTA2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTA2_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1;
    return sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2;
    return sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_MTA2_Trailer;
    3 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengTangara_MTA2_sidecheck_4;
    5 : sw_SDD_EMU_ComengTangara_MTA2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengTangara_MTA2_sidecheck_6;
    return sw_SDD_EMU_ComengTangara_MTA2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengTangara_MTA2_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengTangara_MTA2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTA2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_MTA2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTA2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_MTA2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_MTA2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_MTA2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengTangara_MTA2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_MTA2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTA2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_MTA2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTA2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_MTA2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_MTA2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_MTA2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengTangara_MTA2_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengTangara_MTA2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_MTA2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengTangara_MTA2_lencheck;
    return sw_SDD_EMU_ComengTangara_MTA2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengTangara_MTA2, 12903) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGTANGARA);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengTangara_MTA2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengTangara_attach ;
        purchase: spriteset_SDD_EMU_ComengTangara_MTA2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengTangara_MTA2_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//ComengTangara_Cityrail
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_purchase,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_lead,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_rear,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor_r,   "gfx/SDD_EMU_ComengTangara_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
    return sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
    3 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_6_r;
    return sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1;
    return sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2;
    return sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_Cityrail_Trailer;
    3 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_4;
    5 : sw_SDD_EMU_ComengTangara_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_6;
    return sw_SDD_EMU_ComengTangara_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengTangara_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengTangara_Cityrail_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengTangara_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengTangara_Cityrail_lencheck;
    return sw_SDD_EMU_ComengTangara_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengTangara_Cityrail, 12904) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGTANGARA);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengTangara_Cityrail_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengTangara_attach ;
        purchase: spriteset_SDD_EMU_ComengTangara_Cityrail_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengTangara_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

//ComengTangara_MTM
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_purchase,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_Motor_lead,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_Motor_rear,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_Trailer,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor_r,   "gfx/SDD_EMU_ComengTangara_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
    return spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
    return sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
    3 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengTangara_MTM_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengTangara_MTM_sidecheck_6_r;
    return sw_SDD_EMU_ComengTangara_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengTangara_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1;
    return sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2;
    return sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengTangara_MTM_Trailer;
    3 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengTangara_MTM_sidecheck_4;
    5 : sw_SDD_EMU_ComengTangara_MTM_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengTangara_MTM_sidecheck_6;
    return sw_SDD_EMU_ComengTangara_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengTangara_MTM_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengTangara_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengTangara_MTM_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengTangara_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengTangara_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengTangara_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengTangara_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengTangara_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengTangara_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengTangara_MTM_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengTangara_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengTangara_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengTangara_MTM_lencheck;
    return sw_SDD_EMU_ComengTangara_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengTangara_MTM, 12905) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGTANGARA);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        46 ton;
        speed:                            115 km/h;
        power:                            912 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  172/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengTangara_SRA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengTangara_MTM_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengTangara_attach ;
        purchase: spriteset_SDD_EMU_ComengTangara_MTM_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGTANGARA);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengTangara_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (172/param_capacity_mod) ;
        power                       : 456 ;
		weight:                        46;
		running_cost_factor: 53;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_attach, vehicle_type_id){
	Item_SDD_EMU_ComengABBVRDD_MTA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_ComengABBVRDD_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_ComengABBVRDD_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengABBVRDD_MTA
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_purchase,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_lead,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_rear,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor_r,   "gfx/SDD_EMU_ComengABBVRDD_MTA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
    return sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
    3 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_6_r;
    return sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTA_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1;
    return sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2;
    return sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengABBVRDD_MTA_Trailer;
    3 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_4;
    5 : sw_SDD_EMU_ComengABBVRDD_MTA_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_6;
    return sw_SDD_EMU_ComengABBVRDD_MTA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengABBVRDD_MTA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTA_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengABBVRDD_MTA_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengABBVRDD_MTA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengABBVRDD_MTA_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengABBVRDD_MTA_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengABBVRDD_MTA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengABBVRDD_MTA_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengABBVRDD_MTA_lencheck;
    return sw_SDD_EMU_ComengABBVRDD_MTA_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengABBVRDD_MTA, 12926) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGABBVRDD);
        introduction_date:                date(1992,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            115 km/h;
        power:                            950 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  183/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengABBVRDD_MTA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengABBVRDD_MTA_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengABBVRDD_attach ;
        purchase: spriteset_SDD_EMU_ComengABBVRDD_MTA_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGABBVRDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengABBVRDD_MTA_revcheck ;
        length                      : 8;
        cargo_capacity              : (183/param_capacity_mod) ;
        power                       : 475 ;
		weight:                        44;
		running_cost_factor: 53;
    }
}

//ComengABBVRDD_Connex
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_purchase,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_lead,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_rear,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor_r,   "gfx/SDD_EMU_ComengABBVRDD_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
    return sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
    3 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_6_r;
    return sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1;
    return sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2;
    return sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengABBVRDD_Connex_Trailer;
    3 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_4;
    5 : sw_SDD_EMU_ComengABBVRDD_Connex_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_6;
    return sw_SDD_EMU_ComengABBVRDD_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengABBVRDD_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengABBVRDD_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_Connex_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengABBVRDD_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengABBVRDD_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengABBVRDD_Connex_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengABBVRDD_Connex_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengABBVRDD_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengABBVRDD_Connex_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengABBVRDD_Connex_lencheck;
    return sw_SDD_EMU_ComengABBVRDD_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengABBVRDD_Connex, 12927) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGABBVRDD);
        introduction_date:                date(1992,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            115 km/h;
        power:                            950 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  183/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengABBVRDD_MTA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengABBVRDD_Connex_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengABBVRDD_attach ;
        purchase: spriteset_SDD_EMU_ComengABBVRDD_Connex_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGABBVRDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengABBVRDD_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (183/param_capacity_mod) ;
        power                       : 475 ;
		weight:                        44;
		running_cost_factor: 53;
    }
}

//ComengABBVRDD_MTM
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_purchase,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_lead,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_rear,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_DrivingTrailer_lead,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_DrivingTrailer_rear,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor_r,   "gfx/SDD_EMU_ComengABBVRDD_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1_r;
    return sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
    return sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2_r;
    return sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
    3 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_4_r;
    5 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_6_r;
    return sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ComengABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1;
    return sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1;
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2;
    return sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ComengABBVRDD_MTM_Trailer;
    3 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_1;
    4 : sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_4;
    5 : sw_SDD_EMU_ComengABBVRDD_MTM_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_6;
    return sw_SDD_EMU_ComengABBVRDD_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_lead; //Panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengABBVRDD_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ComengABBVRDD_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ComengABBVRDD_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ComengABBVRDD_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ComengABBVRDD_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengABBVRDD_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ComengABBVRDD_MTM_frontcheck; //We are going forwards
    return sw_SDD_EMU_ComengABBVRDD_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ComengABBVRDD_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ComengABBVRDD_MTM_lencheck;
    return sw_SDD_EMU_ComengABBVRDD_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ComengABBVRDD_MTM, 12928) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_COMENGABBVRDD);
        introduction_date:                date(1992,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        44 ton;
        speed:                            115 km/h;
        power:                            950 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             215;
        cargo_capacity:                  183/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_ComengABBVRDD_MTA;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ComengABBVRDD_MTM_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ComengABBVRDD_attach ;
        purchase: spriteset_SDD_EMU_ComengABBVRDD_MTM_purchase;
        additional_text: string(STR_INFO_SDD_EMU_COMENGABBVRDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ComengABBVRDD_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (183/param_capacity_mod) ;
        power                       : 475 ;
		weight:                        44;
		running_cost_factor: 53;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_attach, vehicle_type_id){
	Item_SDD_EMU_ABBVRDD_Connex    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_ABBVRDD_MTM    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ABBVRDD_Connex
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_purchase,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_Motor_lead,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_Motor_rear,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_DrivingTrailer_lead,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_DrivingTrailer_rear,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_Trailer,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor_r,   "gfx/SDD_EMU_ABBVRDD_Connex.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
    return spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1_r;
    return sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
    return sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2_r;
    return sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
    3 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ABBVRDD_Connex_sidecheck_4_r;
    5 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ABBVRDD_Connex_sidecheck_6_r;
    return sw_SDD_EMU_ABBVRDD_Connex_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_Connex_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1;
    return sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1;
    return spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2;
    return sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ABBVRDD_Connex_Trailer;
    3 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_1;
    4 : sw_SDD_EMU_ABBVRDD_Connex_sidecheck_4;
    5 : sw_SDD_EMU_ABBVRDD_Connex_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ABBVRDD_Connex_sidecheck_6;
    return sw_SDD_EMU_ABBVRDD_Connex_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ABBVRDD_Connex_Motor_lead; //Panto
    return spriteset_SDD_EMU_ABBVRDD_Connex_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ABBVRDD_Connex_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ABBVRDD_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ABBVRDD_Connex_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ABBVRDD_Connex_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ABBVRDD_Connex_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ABBVRDD_Connex_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ABBVRDD_Connex_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ABBVRDD_Connex_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ABBVRDD_Connex_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ABBVRDD_Connex_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_Connex_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ABBVRDD_Connex_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ABBVRDD_Connex_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ABBVRDD_Connex_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ABBVRDD_Connex_frontcheck; //We are going forwards
    return sw_SDD_EMU_ABBVRDD_Connex_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ABBVRDD_Connex_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ABBVRDD_Connex_lencheck;
    return sw_SDD_EMU_ABBVRDD_Connex_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ABBVRDD_Connex, 13001) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_ABBVRDD);
        introduction_date:                date(2000,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            115 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  183/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SDD_EMU_ABBVRDD_Connex;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ABBVRDD_Connex_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ABBVRDD_attach ;
        purchase: spriteset_SDD_EMU_ABBVRDD_Connex_purchase;
        additional_text: string(STR_INFO_SDD_EMU_ABBVRDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ABBVRDD_Connex_revcheck ;
        length                      : 8;
        cargo_capacity              : (183/param_capacity_mod) ;
        power                       : 500 ;
		weight:                        42;
		running_cost_factor: 50;
    }
}

//ABBVRDD_MTM
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_purchase,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_Motor_lead,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_Motor_rear,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_DrivingTrailer_lead,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_DrivingTrailer_rear,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_Trailer,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor_r,   "gfx/SDD_EMU_ABBVRDD_MTM.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
    return spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1_r;
    return sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
    return sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2_r;
    return sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
    3 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1_r;
    4 : sw_SDD_EMU_ABBVRDD_MTM_sidecheck_4_r;
    5 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_ABBVRDD_MTM_sidecheck_6_r;
    return sw_SDD_EMU_ABBVRDD_MTM_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor_r;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_ABBVRDD_MTM_NonControlMotor;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1;
    return sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1;
    return spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2;
    return sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_ABBVRDD_MTM_Trailer;
    3 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_1;
    4 : sw_SDD_EMU_ABBVRDD_MTM_sidecheck_4;
    5 : sw_SDD_EMU_ABBVRDD_MTM_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_ABBVRDD_MTM_sidecheck_6;
    return sw_SDD_EMU_ABBVRDD_MTM_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_ABBVRDD_MTM_Motor_lead; //Panto
    return spriteset_SDD_EMU_ABBVRDD_MTM_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ABBVRDD_MTM_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_ABBVRDD_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_ABBVRDD_MTM_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ABBVRDD_MTM_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_ABBVRDD_MTM_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ABBVRDD_MTM_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_ABBVRDD_MTM_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_ABBVRDD_MTM_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_ABBVRDD_MTM_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_ABBVRDD_MTM_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_ABBVRDD_MTM_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_ABBVRDD_MTM_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_ABBVRDD_MTM_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ABBVRDD_MTM_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_ABBVRDD_MTM_frontcheck; //We are going forwards
    return sw_SDD_EMU_ABBVRDD_MTM_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_ABBVRDD_MTM_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_ABBVRDD_MTM_lencheck;
    return sw_SDD_EMU_ABBVRDD_MTM_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_ABBVRDD_MTM, 13002) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_ABBVRDD);
        introduction_date:                date(2000,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            115 km/h;
        power:                            1000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  183/param_capacity_mod;
        loading_speed: 45;

        variant_group: Item_SDD_EMU_ABBVRDD_Connex;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_ABBVRDD_MTM_directioncheck;
        can_attach_wagon: sw_SDD_EMU_ABBVRDD_attach ;
        purchase: spriteset_SDD_EMU_ABBVRDD_MTM_purchase;
        additional_text: string(STR_INFO_SDD_EMU_ABBVRDD);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_ABBVRDD_MTM_revcheck ;
        length                      : 8;
        cargo_capacity              : (183/param_capacity_mod) ;
        power                       : 500 ;
		weight:                        42;
		running_cost_factor: 50;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_attach, vehicle_type_id){
	Item_SDD_EMU_Millenium_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_Millenium_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Millenium_Cityrail1
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_purchase,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_Motor_lead,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_Motor_rear,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_DrivingTrailer_lead,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_DrivingTrailer_rear,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_Trailer,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor_r,   "gfx/SDD_EMU_Millenium_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
    return spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1_r;
    return sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
    return sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2_r;
    return sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
    3 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Millenium_Cityrail1_sidecheck_4_r;
    5 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Millenium_Cityrail1_sidecheck_6_r;
    return sw_SDD_EMU_Millenium_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail1_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1;
    return sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1;
    return spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2;
    return sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Millenium_Cityrail1_Trailer;
    3 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_1;
    4 : sw_SDD_EMU_Millenium_Cityrail1_sidecheck_4;
    5 : sw_SDD_EMU_Millenium_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Millenium_Cityrail1_sidecheck_6;
    return sw_SDD_EMU_Millenium_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Millenium_Cityrail1_Motor_lead; //Panto
    return spriteset_SDD_EMU_Millenium_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Millenium_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Millenium_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Millenium_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Millenium_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Millenium_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Millenium_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Millenium_Cityrail1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Millenium_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Millenium_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Millenium_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Millenium_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Millenium_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Millenium_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Millenium_Cityrail1_frontcheck; //We are going forwards
    return sw_SDD_EMU_Millenium_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Millenium_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Millenium_Cityrail1_lencheck;
    return sw_SDD_EMU_Millenium_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Millenium_Cityrail1, 13051) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_MILLENIUM);
        introduction_date:                date(2002,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            1212 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  190/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Millenium_Cityrail1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Millenium_Cityrail1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Millenium_attach ;
        purchase: spriteset_SDD_EMU_Millenium_Cityrail1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_MILLENIUM);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Millenium_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (190/param_capacity_mod) ;
        power                       : 606 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

//Millenium_Cityrail2
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_purchase,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_Motor_lead,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_Motor_rear,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_DrivingTrailer_lead,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_DrivingTrailer_rear,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_Trailer,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor_r,   "gfx/SDD_EMU_Millenium_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
    return spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1_r;
    return sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
    return sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2_r;
    return sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
    3 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Millenium_Cityrail2_sidecheck_4_r;
    5 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Millenium_Cityrail2_sidecheck_6_r;
    return sw_SDD_EMU_Millenium_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor_r;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Millenium_Cityrail2_NonControlMotor;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1;
    return sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1;
    return spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2;
    return sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Millenium_Cityrail2_Trailer;
    3 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_1;
    4 : sw_SDD_EMU_Millenium_Cityrail2_sidecheck_4;
    5 : sw_SDD_EMU_Millenium_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Millenium_Cityrail2_sidecheck_6;
    return sw_SDD_EMU_Millenium_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Millenium_Cityrail2_Motor_lead; //Panto
    return spriteset_SDD_EMU_Millenium_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Millenium_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Millenium_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Millenium_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Millenium_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Millenium_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Millenium_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Millenium_Cityrail2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Millenium_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Millenium_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Millenium_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Millenium_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Millenium_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Millenium_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Millenium_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Millenium_Cityrail2_frontcheck; //We are going forwards
    return sw_SDD_EMU_Millenium_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Millenium_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Millenium_Cityrail2_lencheck;
    return sw_SDD_EMU_Millenium_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Millenium_Cityrail2, 13052) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_MILLENIUM);
        introduction_date:                date(2002,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            1212 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  190/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Millenium_Cityrail1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Millenium_Cityrail2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Millenium_attach ;
        purchase: spriteset_SDD_EMU_Millenium_Cityrail2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_MILLENIUM);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Millenium_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (190/param_capacity_mod) ;
        power                       : 606 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_attach, vehicle_type_id){
	Item_SDD_EMU_Waratah_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_Waratah_SydneyTrains1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_SDD_EMU_Waratah_SydneyTrains2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//Waratah_Cityrail
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_purchase,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_Motor_lead,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_Motor_rear,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_DrivingTrailer_lead,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_DrivingTrailer_rear,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_Trailer,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor_r,   "gfx/SDD_EMU_Waratah_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
    return spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1_r;
    return sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
    return sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2_r;
    return sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
    3 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Waratah_Cityrail_sidecheck_4_r;
    5 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Waratah_Cityrail_sidecheck_6_r;
    return sw_SDD_EMU_Waratah_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_Cityrail_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1;
    return sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1;
    return spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2;
    return sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_Cityrail_Trailer;
    3 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_1;
    4 : sw_SDD_EMU_Waratah_Cityrail_sidecheck_4;
    5 : sw_SDD_EMU_Waratah_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Waratah_Cityrail_sidecheck_6;
    return sw_SDD_EMU_Waratah_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Waratah_Cityrail_Motor_lead; //Panto
    return spriteset_SDD_EMU_Waratah_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Waratah_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Waratah_Cityrail_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Waratah_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Waratah_Cityrail_frontcheck; //We are going forwards
    return sw_SDD_EMU_Waratah_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Waratah_Cityrail_lencheck;
    return sw_SDD_EMU_Waratah_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Waratah_Cityrail, 13101) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_WARATAH);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            981 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  198/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Waratah_Cityrail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Waratah_Cityrail_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Waratah_attach ;
        purchase: spriteset_SDD_EMU_Waratah_Cityrail_purchase;
        additional_text: string(STR_INFO_SDD_EMU_WARATAH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Waratah_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (198/param_capacity_mod) ;
        power                       : 490 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

//Waratah_SydneyTrains1
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_purchase,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_lead,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_rear,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_DrivingTrailer_lead,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_DrivingTrailer_rear,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor_r,   "gfx/SDD_EMU_Waratah_SydneyTrains1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1_r;
    return sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
    return sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2_r;
    return sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
    3 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_4_r;
    5 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_6_r;
    return sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains1_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1;
    return sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1;
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2;
    return sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_SydneyTrains1_Trailer;
    3 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_1;
    4 : sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_4;
    5 : sw_SDD_EMU_Waratah_SydneyTrains1_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_6;
    return sw_SDD_EMU_Waratah_SydneyTrains1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_lead; //Panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_SydneyTrains1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains1_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_SydneyTrains1_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_SydneyTrains1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_SydneyTrains1_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Waratah_SydneyTrains1_frontcheck; //We are going forwards
    return sw_SDD_EMU_Waratah_SydneyTrains1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_SydneyTrains1_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Waratah_SydneyTrains1_lencheck;
    return sw_SDD_EMU_Waratah_SydneyTrains1_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Waratah_SydneyTrains1, 13102) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_WARATAH);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            981 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  198/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Waratah_Cityrail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Waratah_SydneyTrains1_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Waratah_attach ;
        purchase: spriteset_SDD_EMU_Waratah_SydneyTrains1_purchase;
        additional_text: string(STR_INFO_SDD_EMU_WARATAH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Waratah_SydneyTrains1_revcheck ;
        length                      : 8;
        cargo_capacity              : (198/param_capacity_mod) ;
        power                       : 490 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

//Waratah_SydneyTrains2
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_purchase,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_lead,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_rear,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_DrivingTrailer_lead,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_DrivingTrailer_rear,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor_r,   "gfx/SDD_EMU_Waratah_SydneyTrains2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1_r;
    return sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
    return sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2_r;
    return sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
    3 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_4_r;
    5 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_6_r;
    return sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_SydneyTrains2_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1;
    return sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1;
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2;
    return sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_SydneyTrains2_Trailer;
    3 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_1;
    4 : sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_4;
    5 : sw_SDD_EMU_Waratah_SydneyTrains2_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_6;
    return sw_SDD_EMU_Waratah_SydneyTrains2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_lead; //Panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_SydneyTrains2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_SydneyTrains2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_SydneyTrains2_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_SydneyTrains2_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_SydneyTrains2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_SydneyTrains2_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Waratah_SydneyTrains2_frontcheck; //We are going forwards
    return sw_SDD_EMU_Waratah_SydneyTrains2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_SydneyTrains2_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Waratah_SydneyTrains2_lencheck;
    return sw_SDD_EMU_Waratah_SydneyTrains2_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Waratah_SydneyTrains2, 13103) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_WARATAH);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            981 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  198/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Waratah_Cityrail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Waratah_SydneyTrains2_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Waratah_attach ;
        purchase: spriteset_SDD_EMU_Waratah_SydneyTrains2_purchase;
        additional_text: string(STR_INFO_SDD_EMU_WARATAH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Waratah_SydneyTrains2_revcheck ;
        length                      : 8;
        cargo_capacity              : (198/param_capacity_mod) ;
        power                       : 490 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

//Waratah_JR
spriteset(spriteset_SDD_EMU_Waratah_JR_purchase,   "gfx/SDD_EMU_Waratah_JR.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Waratah_JR_Motor_lead,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Waratah_JR_Motor_rear,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Waratah_JR_DrivingTrailer_lead,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Waratah_JR_DrivingTrailer_rear,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Waratah_JR_Trailer,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Waratah_JR_NonControlMotor,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Waratah_JR_NonControlMotor_r,   "gfx/SDD_EMU_Waratah_JR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_JR_Trailer;
    return spriteset_SDD_EMU_Waratah_JR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_JR_pantocheck_at_1_r;
    return sw_SDD_EMU_Waratah_JR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Waratah_JR_Trailer;
    return sw_SDD_EMU_Waratah_JR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_JR_pantocheck_at_2_r;
    return sw_SDD_EMU_Waratah_JR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_JR_Trailer;
    3 : sw_SDD_EMU_Waratah_JR_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Waratah_JR_sidecheck_4_r;
    5 : sw_SDD_EMU_Waratah_JR_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Waratah_JR_sidecheck_6_r;
    return sw_SDD_EMU_Waratah_JR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_JR_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_JR_pantocheck_at_1;
    return sw_SDD_EMU_Waratah_JR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_JR_pantocheck_at_1;
    return spriteset_SDD_EMU_Waratah_JR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_JR_pantocheck_at_2;
    return sw_SDD_EMU_Waratah_JR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_JR_Trailer;
    3 : sw_SDD_EMU_Waratah_JR_pantocheck_at_1;
    4 : sw_SDD_EMU_Waratah_JR_sidecheck_4;
    5 : sw_SDD_EMU_Waratah_JR_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Waratah_JR_sidecheck_6;
    return sw_SDD_EMU_Waratah_JR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Waratah_JR_Motor_lead; //Panto
    return spriteset_SDD_EMU_Waratah_JR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_JR_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Waratah_JR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_JR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_JR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_JR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_JR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Waratah_JR_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Waratah_JR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_JR_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_JR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_JR_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_JR_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_JR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_JR_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Waratah_JR_frontcheck; //We are going forwards
    return sw_SDD_EMU_Waratah_JR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_JR_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Waratah_JR_lencheck;
    return sw_SDD_EMU_Waratah_JR_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Waratah_JR, 13104) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_WARATAH);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            981 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  198/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Waratah_Cityrail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Waratah_JR_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Waratah_attach ;
        purchase: spriteset_SDD_EMU_Waratah_JR_purchase;
        additional_text: string(STR_INFO_SDD_EMU_WARATAH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Waratah_JR_revcheck ;
        length                      : 8;
        cargo_capacity              : (198/param_capacity_mod) ;
        power                       : 490 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

//Waratah_KnockoffHorse
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_purchase,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_purchase(7, 21)}
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_lead,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_rear,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_DrivingTrailer_lead,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8(187, 39)}
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_DrivingTrailer_rear,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8(187, 64)}
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8(7, 89)}
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8(187, 89)}
spriteset(spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor_r,   "gfx/SDD_EMU_Waratah_KnockoffHorse.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1_r;
    return sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
    return sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2_r;
    return sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
    3 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1_r;
    4 : sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_4_r;
    5 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2_r;
    6 .. 7 : sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_6_r;
    return sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor_r;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_SDD_EMU_Waratah_KnockoffHorse_NonControlMotor;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1;
    return sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1;
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2;
    return sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_SDD_EMU_Waratah_KnockoffHorse_Trailer;
    3 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_1;
    4 : sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_4;
    5 : sw_SDD_EMU_Waratah_KnockoffHorse_pantocheck_at_2;
    6 .. 7 : sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_6;
    return sw_SDD_EMU_Waratah_KnockoffHorse_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_lead; //Panto
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction_r_pos;        //Front panto
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction_r;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_frontcheck_r, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction_r; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_KnockoffHorse_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction, vehicle_is_flipped){
    0 : spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_lead;        //Front panto
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_panto_flipcheck, vehicle_is_flipped){
    0 : sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction;        //Not flipped, give Panto
    return spriteset_SDD_EMU_Waratah_KnockoffHorse_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_SDD_EMU_Waratah_KnockoffHorse_frontcheck, position_in_vehid_chain){
    0: sw_SDD_EMU_Waratah_KnockoffHorse_panto_direction; //We need a pantograph, guaranteed
    return sw_SDD_EMU_Waratah_KnockoffHorse_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_KnockoffHorse_directioncheck, vehicle_is_reversed){
    0: sw_SDD_EMU_Waratah_KnockoffHorse_frontcheck; //We are going forwards
    return sw_SDD_EMU_Waratah_KnockoffHorse_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_SDD_EMU_Waratah_KnockoffHorse_revcheck, vehicle_is_reversed){
    0 : sw_SDD_EMU_Waratah_KnockoffHorse_lencheck;
    return sw_SDD_EMU_Waratah_KnockoffHorse_lencheck_r;
}

item(FEAT_TRAINS, Item_SDD_EMU_Waratah_KnockoffHorse, 13105) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDSuburbanEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_SDD_EMU_WARATAH);
        introduction_date:                date(2011,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        51 ton;
        speed:                            130 km/h;
        power:                            981 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     23;
        running_cost_factor:             200;
        cargo_capacity:                  198/param_capacity_mod;
        loading_speed: 30;

        variant_group: Item_SDD_EMU_Waratah_Cityrail;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_SDD_EMU_Waratah_KnockoffHorse_directioncheck;
        can_attach_wagon: sw_SDD_EMU_Waratah_attach ;
        purchase: spriteset_SDD_EMU_Waratah_KnockoffHorse_purchase;
        additional_text: string(STR_INFO_SDD_EMU_WARATAH);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_SDD_EMU_Waratah_KnockoffHorse_revcheck ;
        length                      : 8;
        cargo_capacity              : (198/param_capacity_mod) ;
        power                       : 490 ;
		weight:                        51;
		running_cost_factor: 50;
    }
}

//////////////////
//Intercity EMUs//
//////////////////

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_attach, vehicle_type_id){
    Item_TaitInterurban_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_TaitInterurban_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TaitInterurban_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TaitInterurban_Liv4    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//TaitInterurban_Liv1
spriteset(spriteset_TaitInterurban_Liv1_purchase,   "gfx/TaitInterurban_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitInterurban_Liv1_Motor_lead,   "gfx/TaitInterurban_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TaitInterurban_Liv1_Motor_rear,   "gfx/TaitInterurban_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TaitInterurban_Liv1_DrivingTrailer_lead,   "gfx/TaitInterurban_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_TaitInterurban_Liv1_DrivingTrailer_rear,   "gfx/TaitInterurban_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_TaitInterurban_Liv1_Trailer,   "gfx/TaitInterurban_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_TaitInterurban_Liv1_NonControlMotor,   "gfx/TaitInterurban_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_TaitInterurban_Liv1_NonControlMotor_r,   "gfx/TaitInterurban_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv1_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv1_NonControlMotor;
    return spriteset_TaitInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv1_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv1_Trailer;
    return spriteset_TaitInterurban_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv1_NonControlMotor;
    return spriteset_TaitInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv1_pantocheck_at_1_r;
    return sw_TaitInterurban_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TaitInterurban_Liv1_Trailer;
    return sw_TaitInterurban_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv1_pantocheck_at_2_r;
    return sw_TaitInterurban_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv1_Trailer;
    3 : sw_TaitInterurban_Liv1_pantocheck_at_1_r;
    4 : sw_TaitInterurban_Liv1_sidecheck_4_r;
    5 : sw_TaitInterurban_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_TaitInterurban_Liv1_sidecheck_6_r;
    return sw_TaitInterurban_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv1_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv1_NonControlMotor;
    return spriteset_TaitInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv1_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv1_NonControlMotor;
    return spriteset_TaitInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv1_pantocheck_at_1;
    return sw_TaitInterurban_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv1_pantocheck_at_1;
    return spriteset_TaitInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv1_pantocheck_at_2;
    return sw_TaitInterurban_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv1_Trailer;
    3 : sw_TaitInterurban_Liv1_pantocheck_at_1;
    4 : sw_TaitInterurban_Liv1_sidecheck_4;
    5 : sw_TaitInterurban_Liv1_pantocheck_at_2;
    6 .. 7 : sw_TaitInterurban_Liv1_sidecheck_6;
    return sw_TaitInterurban_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TaitInterurban_Liv1_Motor_lead; //Panto
    return spriteset_TaitInterurban_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_TaitInterurban_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_TaitInterurban_Liv1_Motor_lead;        //Front panto
    return spriteset_TaitInterurban_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_TaitInterurban_Liv1_frontcheck; //We are going forwards
    return sw_TaitInterurban_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_TaitInterurban_Liv1_lencheck;
    return sw_TaitInterurban_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_TaitInterurban_Liv1, 14200) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAITINTERURBAN);
        introduction_date:                date(1922,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  65/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TaitInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TaitInterurban_Liv1_directioncheck;
        can_attach_wagon: sw_TaitInterurban_attach ;
        purchase: spriteset_TaitInterurban_Liv1_purchase;
        additional_text: string(STR_INFO_TAITINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TaitInterurban_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (65/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

//TaitInterurban_Liv2
spriteset(spriteset_TaitInterurban_Liv2_purchase,   "gfx/TaitInterurban_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitInterurban_Liv2_Motor_lead,   "gfx/TaitInterurban_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TaitInterurban_Liv2_Motor_rear,   "gfx/TaitInterurban_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TaitInterurban_Liv2_DrivingTrailer_lead,   "gfx/TaitInterurban_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_TaitInterurban_Liv2_DrivingTrailer_rear,   "gfx/TaitInterurban_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_TaitInterurban_Liv2_Trailer,   "gfx/TaitInterurban_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_TaitInterurban_Liv2_NonControlMotor,   "gfx/TaitInterurban_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_TaitInterurban_Liv2_NonControlMotor_r,   "gfx/TaitInterurban_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv2_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv2_NonControlMotor;
    return spriteset_TaitInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv2_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv2_Trailer;
    return spriteset_TaitInterurban_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv2_NonControlMotor;
    return spriteset_TaitInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv2_pantocheck_at_1_r;
    return sw_TaitInterurban_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TaitInterurban_Liv2_Trailer;
    return sw_TaitInterurban_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv2_pantocheck_at_2_r;
    return sw_TaitInterurban_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv2_Trailer;
    3 : sw_TaitInterurban_Liv2_pantocheck_at_1_r;
    4 : sw_TaitInterurban_Liv2_sidecheck_4_r;
    5 : sw_TaitInterurban_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_TaitInterurban_Liv2_sidecheck_6_r;
    return sw_TaitInterurban_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv2_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv2_NonControlMotor;
    return spriteset_TaitInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv2_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv2_NonControlMotor;
    return spriteset_TaitInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv2_pantocheck_at_1;
    return sw_TaitInterurban_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv2_pantocheck_at_1;
    return spriteset_TaitInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv2_pantocheck_at_2;
    return sw_TaitInterurban_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv2_Trailer;
    3 : sw_TaitInterurban_Liv2_pantocheck_at_1;
    4 : sw_TaitInterurban_Liv2_sidecheck_4;
    5 : sw_TaitInterurban_Liv2_pantocheck_at_2;
    6 .. 7 : sw_TaitInterurban_Liv2_sidecheck_6;
    return sw_TaitInterurban_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TaitInterurban_Liv2_Motor_lead; //Panto
    return spriteset_TaitInterurban_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_TaitInterurban_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_TaitInterurban_Liv2_Motor_lead;        //Front panto
    return spriteset_TaitInterurban_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_TaitInterurban_Liv2_frontcheck; //We are going forwards
    return sw_TaitInterurban_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_TaitInterurban_Liv2_lencheck;
    return sw_TaitInterurban_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_TaitInterurban_Liv2, 14201) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAITINTERURBAN);
        introduction_date:                date(1922,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  65/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TaitInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TaitInterurban_Liv2_directioncheck;
        can_attach_wagon: sw_TaitInterurban_attach ;
        purchase: spriteset_TaitInterurban_Liv2_purchase;
        additional_text: string(STR_INFO_TAITINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TaitInterurban_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (65/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

//TaitInterurban_Liv3
spriteset(spriteset_TaitInterurban_Liv3_purchase,   "gfx/TaitInterurban_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitInterurban_Liv3_Motor_lead,   "gfx/TaitInterurban_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TaitInterurban_Liv3_Motor_rear,   "gfx/TaitInterurban_Liv3.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TaitInterurban_Liv3_DrivingTrailer_lead,   "gfx/TaitInterurban_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_TaitInterurban_Liv3_DrivingTrailer_rear,   "gfx/TaitInterurban_Liv3.png") {template_8(187, 69)}
spriteset(spriteset_TaitInterurban_Liv3_Trailer,   "gfx/TaitInterurban_Liv3.png") {template_8(7, 99)}
spriteset(spriteset_TaitInterurban_Liv3_NonControlMotor,   "gfx/TaitInterurban_Liv3.png") {template_8(187, 99)}
spriteset(spriteset_TaitInterurban_Liv3_NonControlMotor_r,   "gfx/TaitInterurban_Liv3.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv3_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv3_NonControlMotor;
    return spriteset_TaitInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv3_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv3_Trailer;
    return spriteset_TaitInterurban_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv3_NonControlMotor;
    return spriteset_TaitInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv3_pantocheck_at_1_r;
    return sw_TaitInterurban_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TaitInterurban_Liv3_Trailer;
    return sw_TaitInterurban_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv3_pantocheck_at_2_r;
    return sw_TaitInterurban_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv3_Trailer;
    3 : sw_TaitInterurban_Liv3_pantocheck_at_1_r;
    4 : sw_TaitInterurban_Liv3_sidecheck_4_r;
    5 : sw_TaitInterurban_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_TaitInterurban_Liv3_sidecheck_6_r;
    return sw_TaitInterurban_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv3_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv3_NonControlMotor;
    return spriteset_TaitInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv3_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv3_NonControlMotor;
    return spriteset_TaitInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv3_pantocheck_at_1;
    return sw_TaitInterurban_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv3_pantocheck_at_1;
    return spriteset_TaitInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv3_pantocheck_at_2;
    return sw_TaitInterurban_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv3_Trailer;
    3 : sw_TaitInterurban_Liv3_pantocheck_at_1;
    4 : sw_TaitInterurban_Liv3_sidecheck_4;
    5 : sw_TaitInterurban_Liv3_pantocheck_at_2;
    6 .. 7 : sw_TaitInterurban_Liv3_sidecheck_6;
    return sw_TaitInterurban_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TaitInterurban_Liv3_Motor_lead; //Panto
    return spriteset_TaitInterurban_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_TaitInterurban_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_TaitInterurban_Liv3_Motor_lead;        //Front panto
    return spriteset_TaitInterurban_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_TaitInterurban_Liv3_frontcheck; //We are going forwards
    return sw_TaitInterurban_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_TaitInterurban_Liv3_lencheck;
    return sw_TaitInterurban_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_TaitInterurban_Liv3, 14202) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAITINTERURBAN);
        introduction_date:                date(1922,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  65/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TaitInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TaitInterurban_Liv3_directioncheck;
        can_attach_wagon: sw_TaitInterurban_attach ;
        purchase: spriteset_TaitInterurban_Liv3_purchase;
        additional_text: string(STR_INFO_TAITINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TaitInterurban_Liv3_revcheck ;
        length                      : 8;
        cargo_capacity              : (65/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

//TaitInterurban_Liv4
spriteset(spriteset_TaitInterurban_Liv4_purchase,   "gfx/TaitInterurban_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitInterurban_Liv4_Motor_lead,   "gfx/TaitInterurban_Liv4.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TaitInterurban_Liv4_Motor_rear,   "gfx/TaitInterurban_Liv4.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TaitInterurban_Liv4_DrivingTrailer_lead,   "gfx/TaitInterurban_Liv4.png") {template_8(187, 39)}
spriteset(spriteset_TaitInterurban_Liv4_DrivingTrailer_rear,   "gfx/TaitInterurban_Liv4.png") {template_8(187, 69)}
spriteset(spriteset_TaitInterurban_Liv4_Trailer,   "gfx/TaitInterurban_Liv4.png") {template_8(7, 99)}
spriteset(spriteset_TaitInterurban_Liv4_NonControlMotor,   "gfx/TaitInterurban_Liv4.png") {template_8(187, 99)}
spriteset(spriteset_TaitInterurban_Liv4_NonControlMotor_r,   "gfx/TaitInterurban_Liv4.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv4_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv4_NonControlMotor;
    return spriteset_TaitInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv4_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv4_Trailer;
    return spriteset_TaitInterurban_Liv4_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv4_NonControlMotor;
    return spriteset_TaitInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv4_pantocheck_at_1_r;
    return sw_TaitInterurban_Liv4_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TaitInterurban_Liv4_Trailer;
    return sw_TaitInterurban_Liv4_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv4_pantocheck_at_2_r;
    return sw_TaitInterurban_Liv4_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv4_Trailer;
    3 : sw_TaitInterurban_Liv4_pantocheck_at_1_r;
    4 : sw_TaitInterurban_Liv4_sidecheck_4_r;
    5 : sw_TaitInterurban_Liv4_pantocheck_at_2_r;
    6 .. 7 : sw_TaitInterurban_Liv4_sidecheck_6_r;
    return sw_TaitInterurban_Liv4_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TaitInterurban_Liv4_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TaitInterurban_Liv4_NonControlMotor;
    return spriteset_TaitInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TaitInterurban_Liv4_NonControlMotor_r;
    return spriteset_TaitInterurban_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TaitInterurban_Liv4_NonControlMotor;
    return spriteset_TaitInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv4_pantocheck_at_1;
    return sw_TaitInterurban_Liv4_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv4_pantocheck_at_1;
    return spriteset_TaitInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TaitInterurban_Liv4_pantocheck_at_2;
    return sw_TaitInterurban_Liv4_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TaitInterurban_Liv4_Trailer;
    3 : sw_TaitInterurban_Liv4_pantocheck_at_1;
    4 : sw_TaitInterurban_Liv4_sidecheck_4;
    5 : sw_TaitInterurban_Liv4_pantocheck_at_2;
    6 .. 7 : sw_TaitInterurban_Liv4_sidecheck_6;
    return sw_TaitInterurban_Liv4_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TaitInterurban_Liv4_Motor_lead; //Panto
    return spriteset_TaitInterurban_Liv4_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_panto_direction_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv4_panto_direction_r_pos;        //Front panto
    return spriteset_TaitInterurban_Liv4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv4_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv4_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_frontcheck_r, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv4_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv4_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_panto_direction, vehicle_is_flipped){
    0 : spriteset_TaitInterurban_Liv4_Motor_lead;        //Front panto
    return spriteset_TaitInterurban_Liv4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TaitInterurban_Liv4_panto_direction;        //Not flipped, give Panto
    return spriteset_TaitInterurban_Liv4_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TaitInterurban_Liv4_frontcheck, position_in_vehid_chain){
    0: sw_TaitInterurban_Liv4_panto_direction; //We need a pantograph, guaranteed
    return sw_TaitInterurban_Liv4_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv4_directioncheck, vehicle_is_reversed){
    0: sw_TaitInterurban_Liv4_frontcheck; //We are going forwards
    return sw_TaitInterurban_Liv4_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TaitInterurban_Liv4_revcheck, vehicle_is_reversed){
    0 : sw_TaitInterurban_Liv4_lencheck;
    return sw_TaitInterurban_Liv4_lencheck_r;
}

item(FEAT_TRAINS, Item_TaitInterurban_Liv4, 14203) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TAITINTERURBAN);
        introduction_date:                date(1922,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            115 km/h;
        power:                            282 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     9;
        running_cost_factor:             180;
        cargo_capacity:                  65/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TaitInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TaitInterurban_Liv4_directioncheck;
        can_attach_wagon: sw_TaitInterurban_attach ;
        purchase: spriteset_TaitInterurban_Liv4_purchase;
        additional_text: string(STR_INFO_TAITINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TaitInterurban_Liv4_revcheck ;
        length                      : 8;
        cargo_capacity              : (65/param_capacity_mod) ;
        power                       : 141 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_attach, vehicle_type_id){
	Item_TullochInterurban_Lined     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochInterurban_Stripe     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochInterurban_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochInterurban_Cityrail     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//TullochInterurban_Lined
spriteset(spriteset_TullochInterurban_Lined_purchase,   "gfx/TullochInterurban_Lined.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurban_Lined_Motor_lead,   "gfx/TullochInterurban_Lined.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochInterurban_Lined_Motor_rear,   "gfx/TullochInterurban_Lined.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochInterurban_Lined_DrivingTrailer_lead,   "gfx/TullochInterurban_Lined.png") {template_old_8(187, 39)}
spriteset(spriteset_TullochInterurban_Lined_DrivingTrailer_rear,   "gfx/TullochInterurban_Lined.png") {template_old_8(187, 64)}
spriteset(spriteset_TullochInterurban_Lined_Trailer,   "gfx/TullochInterurban_Lined.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurban_Lined_NonControlMotor,   "gfx/TullochInterurban_Lined.png") {template_old_8(187, 89)}
spriteset(spriteset_TullochInterurban_Lined_NonControlMotor_r,   "gfx/TullochInterurban_Lined.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_Lined_NonControlMotor_r;
    return spriteset_TullochInterurban_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_Lined_NonControlMotor;
    return spriteset_TullochInterurban_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Lined_NonControlMotor_r;
    return spriteset_TullochInterurban_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Lined_Trailer;
    return spriteset_TullochInterurban_Lined_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_Lined_NonControlMotor;
    return spriteset_TullochInterurban_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Lined_pantocheck_at_1_r;
    return sw_TullochInterurban_Lined_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochInterurban_Lined_Trailer;
    return sw_TullochInterurban_Lined_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Lined_pantocheck_at_2_r;
    return sw_TullochInterurban_Lined_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_Lined_Trailer;
    3 : sw_TullochInterurban_Lined_pantocheck_at_1_r;
    4 : sw_TullochInterurban_Lined_sidecheck_4_r;
    5 : sw_TullochInterurban_Lined_pantocheck_at_2_r;
    6 .. 7 : sw_TullochInterurban_Lined_sidecheck_6_r;
    return sw_TullochInterurban_Lined_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_Lined_NonControlMotor_r;
    return spriteset_TullochInterurban_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_Lined_NonControlMotor;
    return spriteset_TullochInterurban_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Lined_NonControlMotor_r;
    return spriteset_TullochInterurban_Lined_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_Lined_NonControlMotor;
    return spriteset_TullochInterurban_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Lined_pantocheck_at_1;
    return sw_TullochInterurban_Lined_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Lined_pantocheck_at_1;
    return spriteset_TullochInterurban_Lined_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Lined_pantocheck_at_2;
    return sw_TullochInterurban_Lined_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_Lined_Trailer;
    3 : sw_TullochInterurban_Lined_pantocheck_at_1;
    4 : sw_TullochInterurban_Lined_sidecheck_4;
    5 : sw_TullochInterurban_Lined_pantocheck_at_2;
    6 .. 7 : sw_TullochInterurban_Lined_sidecheck_6;
    return sw_TullochInterurban_Lined_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochInterurban_Lined_Motor_lead; //Panto
    return spriteset_TullochInterurban_Lined_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_Lined_panto_direction_r_pos;        //Front panto
    return spriteset_TullochInterurban_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_Lined_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochInterurban_Lined_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochInterurban_Lined_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochInterurban_Lined_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochInterurban_Lined_Motor_lead;        //Front panto
    return spriteset_TullochInterurban_Lined_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochInterurban_Lined_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochInterurban_Lined_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Lined_frontcheck, position_in_vehid_chain){
    0: sw_TullochInterurban_Lined_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochInterurban_Lined_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_Lined_directioncheck, vehicle_is_reversed){
    0: sw_TullochInterurban_Lined_frontcheck; //We are going forwards
    return sw_TullochInterurban_Lined_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_Lined_revcheck, vehicle_is_reversed){
    0 : sw_TullochInterurban_Lined_lencheck;
    return sw_TullochInterurban_Lined_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochInterurban_Lined, 14301) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHINTERURBAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TullochInterurban_Lined;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochInterurban_Lined_directioncheck;
        can_attach_wagon: sw_TullochInterurban_attach ;
        purchase: spriteset_TullochInterurban_Lined_purchase;
        additional_text: string(STR_INFO_TULLOCHINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochInterurban_Lined_revcheck ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        42;
		running_cost_factor:             50;

    }
}

//TullochInterurban_Stripe
spriteset(spriteset_TullochInterurban_Stripe_purchase,   "gfx/TullochInterurban_Stripe.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurban_Stripe_Motor_lead,   "gfx/TullochInterurban_Stripe.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochInterurban_Stripe_Motor_rear,   "gfx/TullochInterurban_Stripe.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochInterurban_Stripe_DrivingTrailer_lead,   "gfx/TullochInterurban_Stripe.png") {template_old_8(187, 39)}
spriteset(spriteset_TullochInterurban_Stripe_DrivingTrailer_rear,   "gfx/TullochInterurban_Stripe.png") {template_old_8(187, 64)}
spriteset(spriteset_TullochInterurban_Stripe_Trailer,   "gfx/TullochInterurban_Stripe.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurban_Stripe_NonControlMotor,   "gfx/TullochInterurban_Stripe.png") {template_old_8(187, 89)}
spriteset(spriteset_TullochInterurban_Stripe_NonControlMotor_r,   "gfx/TullochInterurban_Stripe.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_Stripe_NonControlMotor_r;
    return spriteset_TullochInterurban_Stripe_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_Stripe_NonControlMotor;
    return spriteset_TullochInterurban_Stripe_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Stripe_NonControlMotor_r;
    return spriteset_TullochInterurban_Stripe_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Stripe_Trailer;
    return spriteset_TullochInterurban_Stripe_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_Stripe_NonControlMotor;
    return spriteset_TullochInterurban_Stripe_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Stripe_pantocheck_at_1_r;
    return sw_TullochInterurban_Stripe_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochInterurban_Stripe_Trailer;
    return sw_TullochInterurban_Stripe_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Stripe_pantocheck_at_2_r;
    return sw_TullochInterurban_Stripe_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_Stripe_Trailer;
    3 : sw_TullochInterurban_Stripe_pantocheck_at_1_r;
    4 : sw_TullochInterurban_Stripe_sidecheck_4_r;
    5 : sw_TullochInterurban_Stripe_pantocheck_at_2_r;
    6 .. 7 : sw_TullochInterurban_Stripe_sidecheck_6_r;
    return sw_TullochInterurban_Stripe_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_Stripe_NonControlMotor_r;
    return spriteset_TullochInterurban_Stripe_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_Stripe_NonControlMotor;
    return spriteset_TullochInterurban_Stripe_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Stripe_NonControlMotor_r;
    return spriteset_TullochInterurban_Stripe_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_Stripe_NonControlMotor;
    return spriteset_TullochInterurban_Stripe_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Stripe_pantocheck_at_1;
    return sw_TullochInterurban_Stripe_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Stripe_pantocheck_at_1;
    return spriteset_TullochInterurban_Stripe_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Stripe_pantocheck_at_2;
    return sw_TullochInterurban_Stripe_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_Stripe_Trailer;
    3 : sw_TullochInterurban_Stripe_pantocheck_at_1;
    4 : sw_TullochInterurban_Stripe_sidecheck_4;
    5 : sw_TullochInterurban_Stripe_pantocheck_at_2;
    6 .. 7 : sw_TullochInterurban_Stripe_sidecheck_6;
    return sw_TullochInterurban_Stripe_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochInterurban_Stripe_Motor_lead; //Panto
    return spriteset_TullochInterurban_Stripe_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_Stripe_panto_direction_r_pos;        //Front panto
    return spriteset_TullochInterurban_Stripe_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_Stripe_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochInterurban_Stripe_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochInterurban_Stripe_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochInterurban_Stripe_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochInterurban_Stripe_Motor_lead;        //Front panto
    return spriteset_TullochInterurban_Stripe_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochInterurban_Stripe_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochInterurban_Stripe_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Stripe_frontcheck, position_in_vehid_chain){
    0: sw_TullochInterurban_Stripe_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochInterurban_Stripe_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_Stripe_directioncheck, vehicle_is_reversed){
    0: sw_TullochInterurban_Stripe_frontcheck; //We are going forwards
    return sw_TullochInterurban_Stripe_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_Stripe_revcheck, vehicle_is_reversed){
    0 : sw_TullochInterurban_Stripe_lencheck;
    return sw_TullochInterurban_Stripe_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochInterurban_Stripe, 14302) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHINTERURBAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TullochInterurban_Lined;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochInterurban_Stripe_directioncheck;
        can_attach_wagon: sw_TullochInterurban_attach ;
        purchase: spriteset_TullochInterurban_Stripe_purchase;
        additional_text: string(STR_INFO_TULLOCHINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochInterurban_Stripe_revcheck ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        42;
		running_cost_factor:             50;

    }
}

//TullochInterurban_SRA
spriteset(spriteset_TullochInterurban_SRA_purchase,   "gfx/TullochInterurban_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurban_SRA_Motor_lead,   "gfx/TullochInterurban_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochInterurban_SRA_Motor_rear,   "gfx/TullochInterurban_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochInterurban_SRA_DrivingTrailer_lead,   "gfx/TullochInterurban_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_TullochInterurban_SRA_DrivingTrailer_rear,   "gfx/TullochInterurban_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_TullochInterurban_SRA_Trailer,   "gfx/TullochInterurban_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurban_SRA_NonControlMotor,   "gfx/TullochInterurban_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_TullochInterurban_SRA_NonControlMotor_r,   "gfx/TullochInterurban_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_SRA_NonControlMotor_r;
    return spriteset_TullochInterurban_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_SRA_NonControlMotor;
    return spriteset_TullochInterurban_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_SRA_NonControlMotor_r;
    return spriteset_TullochInterurban_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_SRA_Trailer;
    return spriteset_TullochInterurban_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_SRA_NonControlMotor;
    return spriteset_TullochInterurban_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_SRA_pantocheck_at_1_r;
    return sw_TullochInterurban_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochInterurban_SRA_Trailer;
    return sw_TullochInterurban_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_SRA_pantocheck_at_2_r;
    return sw_TullochInterurban_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_SRA_Trailer;
    3 : sw_TullochInterurban_SRA_pantocheck_at_1_r;
    4 : sw_TullochInterurban_SRA_sidecheck_4_r;
    5 : sw_TullochInterurban_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_TullochInterurban_SRA_sidecheck_6_r;
    return sw_TullochInterurban_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_SRA_NonControlMotor_r;
    return spriteset_TullochInterurban_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_SRA_NonControlMotor;
    return spriteset_TullochInterurban_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_SRA_NonControlMotor_r;
    return spriteset_TullochInterurban_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_SRA_NonControlMotor;
    return spriteset_TullochInterurban_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_SRA_pantocheck_at_1;
    return sw_TullochInterurban_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_SRA_pantocheck_at_1;
    return spriteset_TullochInterurban_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_SRA_pantocheck_at_2;
    return sw_TullochInterurban_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_SRA_Trailer;
    3 : sw_TullochInterurban_SRA_pantocheck_at_1;
    4 : sw_TullochInterurban_SRA_sidecheck_4;
    5 : sw_TullochInterurban_SRA_pantocheck_at_2;
    6 .. 7 : sw_TullochInterurban_SRA_sidecheck_6;
    return sw_TullochInterurban_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochInterurban_SRA_Motor_lead; //Panto
    return spriteset_TullochInterurban_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_TullochInterurban_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochInterurban_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochInterurban_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochInterurban_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochInterurban_SRA_Motor_lead;        //Front panto
    return spriteset_TullochInterurban_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochInterurban_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochInterurban_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_SRA_frontcheck, position_in_vehid_chain){
    0: sw_TullochInterurban_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochInterurban_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_SRA_directioncheck, vehicle_is_reversed){
    0: sw_TullochInterurban_SRA_frontcheck; //We are going forwards
    return sw_TullochInterurban_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_SRA_revcheck, vehicle_is_reversed){
    0 : sw_TullochInterurban_SRA_lencheck;
    return sw_TullochInterurban_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochInterurban_SRA, 14303) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHINTERURBAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TullochInterurban_Lined;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochInterurban_SRA_directioncheck;
        can_attach_wagon: sw_TullochInterurban_attach ;
        purchase: spriteset_TullochInterurban_SRA_purchase;
        additional_text: string(STR_INFO_TULLOCHINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochInterurban_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        42;
		running_cost_factor:             50;

    }
}

//TullochInterurban_Cityrail
spriteset(spriteset_TullochInterurban_Cityrail_purchase,   "gfx/TullochInterurban_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurban_Cityrail_Motor_lead,   "gfx/TullochInterurban_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochInterurban_Cityrail_Motor_rear,   "gfx/TullochInterurban_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochInterurban_Cityrail_DrivingTrailer_lead,   "gfx/TullochInterurban_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_TullochInterurban_Cityrail_DrivingTrailer_rear,   "gfx/TullochInterurban_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_TullochInterurban_Cityrail_Trailer,   "gfx/TullochInterurban_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurban_Cityrail_NonControlMotor,   "gfx/TullochInterurban_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_TullochInterurban_Cityrail_NonControlMotor_r,   "gfx/TullochInterurban_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_Cityrail_NonControlMotor_r;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_Cityrail_NonControlMotor;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Cityrail_NonControlMotor_r;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Cityrail_Trailer;
    return spriteset_TullochInterurban_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_Cityrail_NonControlMotor;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Cityrail_pantocheck_at_1_r;
    return sw_TullochInterurban_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochInterurban_Cityrail_Trailer;
    return sw_TullochInterurban_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Cityrail_pantocheck_at_2_r;
    return sw_TullochInterurban_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_Cityrail_Trailer;
    3 : sw_TullochInterurban_Cityrail_pantocheck_at_1_r;
    4 : sw_TullochInterurban_Cityrail_sidecheck_4_r;
    5 : sw_TullochInterurban_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_TullochInterurban_Cityrail_sidecheck_6_r;
    return sw_TullochInterurban_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochInterurban_Cityrail_NonControlMotor_r;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochInterurban_Cityrail_NonControlMotor;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochInterurban_Cityrail_NonControlMotor_r;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochInterurban_Cityrail_NonControlMotor;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Cityrail_pantocheck_at_1;
    return sw_TullochInterurban_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Cityrail_pantocheck_at_1;
    return spriteset_TullochInterurban_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochInterurban_Cityrail_pantocheck_at_2;
    return sw_TullochInterurban_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochInterurban_Cityrail_Trailer;
    3 : sw_TullochInterurban_Cityrail_pantocheck_at_1;
    4 : sw_TullochInterurban_Cityrail_sidecheck_4;
    5 : sw_TullochInterurban_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_TullochInterurban_Cityrail_sidecheck_6;
    return sw_TullochInterurban_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochInterurban_Cityrail_Motor_lead; //Panto
    return spriteset_TullochInterurban_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_TullochInterurban_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochInterurban_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochInterurban_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochInterurban_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochInterurban_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochInterurban_Cityrail_Motor_lead;        //Front panto
    return spriteset_TullochInterurban_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochInterurban_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochInterurban_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurban_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_TullochInterurban_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochInterurban_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_TullochInterurban_Cityrail_frontcheck; //We are going forwards
    return sw_TullochInterurban_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochInterurban_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_TullochInterurban_Cityrail_lencheck;
    return sw_TullochInterurban_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochInterurban_Cityrail, 14304) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHINTERURBAN);
        introduction_date:                date(1937,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        42 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     11;
        running_cost_factor:             200;
        cargo_capacity:                  72/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_TullochInterurban_Lined;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochInterurban_Cityrail_directioncheck;
        can_attach_wagon: sw_TullochInterurban_attach ;
        purchase: spriteset_TullochInterurban_Cityrail_purchase;
        additional_text: string(STR_INFO_TULLOCHINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochInterurban_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (72/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        42;
		running_cost_factor:             50;

    }
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_attach, vehicle_type_id){
	Item_ComengInterurbanMk1_Liv1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengInterurbanMk1_Liv2     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengInterurbanMk1_Liv3     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//ComengInterurbanMk1_Liv1
spriteset(spriteset_ComengInterurbanMk1_Liv1_purchase,   "gfx/ComengInterurbanMk1_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengInterurbanMk1_Liv1_Motor_lead,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengInterurbanMk1_Liv1_Motor_rear,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengInterurbanMk1_Liv1_DrivingTrailer_lead,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_ComengInterurbanMk1_Liv1_DrivingTrailer_rear,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_ComengInterurbanMk1_Liv1_Trailer,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_ComengInterurbanMk1_Liv1_NonControlMotor,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_ComengInterurbanMk1_Liv1_NonControlMotor_r,   "gfx/ComengInterurbanMk1_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv1_Trailer;
    return spriteset_ComengInterurbanMk1_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_1_r;
    return sw_ComengInterurbanMk1_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengInterurbanMk1_Liv1_Trailer;
    return sw_ComengInterurbanMk1_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_2_r;
    return sw_ComengInterurbanMk1_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk1_Liv1_Trailer;
    3 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_1_r;
    4 : sw_ComengInterurbanMk1_Liv1_sidecheck_4_r;
    5 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_ComengInterurbanMk1_Liv1_sidecheck_6_r;
    return sw_ComengInterurbanMk1_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk1_Liv1_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_1;
    return sw_ComengInterurbanMk1_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_1;
    return spriteset_ComengInterurbanMk1_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_2;
    return sw_ComengInterurbanMk1_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk1_Liv1_Trailer;
    3 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_1;
    4 : sw_ComengInterurbanMk1_Liv1_sidecheck_4;
    5 : sw_ComengInterurbanMk1_Liv1_pantocheck_at_2;
    6 .. 7 : sw_ComengInterurbanMk1_Liv1_sidecheck_6;
    return sw_ComengInterurbanMk1_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengInterurbanMk1_Liv1_Motor_lead; //Panto
    return spriteset_ComengInterurbanMk1_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_ComengInterurbanMk1_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk1_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengInterurbanMk1_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk1_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengInterurbanMk1_Liv1_Motor_lead;        //Front panto
    return spriteset_ComengInterurbanMk1_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk1_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_ComengInterurbanMk1_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk1_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk1_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_ComengInterurbanMk1_Liv1_frontcheck; //We are going forwards
    return sw_ComengInterurbanMk1_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk1_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_ComengInterurbanMk1_Liv1_lencheck;
    return sw_ComengInterurbanMk1_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengInterurbanMk1_Liv1, 14500) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGINTERURBANMK1);
        introduction_date:                date(1958,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  70/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ComengInterurbanMk1_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengInterurbanMk1_Liv1_directioncheck;
        can_attach_wagon: sw_ComengInterurbanMk1_attach ;
        purchase: spriteset_ComengInterurbanMk1_Liv1_purchase;
        additional_text: string(STR_INFO_COMENGINTERURBANMK1);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengInterurbanMk1_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (70/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

//ComengInterurbanMk1_Liv2
spriteset(spriteset_ComengInterurbanMk1_Liv2_purchase,   "gfx/ComengInterurbanMk1_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengInterurbanMk1_Liv2_Motor_lead,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengInterurbanMk1_Liv2_Motor_rear,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengInterurbanMk1_Liv2_DrivingTrailer_lead,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_ComengInterurbanMk1_Liv2_DrivingTrailer_rear,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_ComengInterurbanMk1_Liv2_Trailer,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_ComengInterurbanMk1_Liv2_NonControlMotor,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_ComengInterurbanMk1_Liv2_NonControlMotor_r,   "gfx/ComengInterurbanMk1_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv2_Trailer;
    return spriteset_ComengInterurbanMk1_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_1_r;
    return sw_ComengInterurbanMk1_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengInterurbanMk1_Liv2_Trailer;
    return sw_ComengInterurbanMk1_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_2_r;
    return sw_ComengInterurbanMk1_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk1_Liv2_Trailer;
    3 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_1_r;
    4 : sw_ComengInterurbanMk1_Liv2_sidecheck_4_r;
    5 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_ComengInterurbanMk1_Liv2_sidecheck_6_r;
    return sw_ComengInterurbanMk1_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk1_Liv2_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_1;
    return sw_ComengInterurbanMk1_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_1;
    return spriteset_ComengInterurbanMk1_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_2;
    return sw_ComengInterurbanMk1_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk1_Liv2_Trailer;
    3 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_1;
    4 : sw_ComengInterurbanMk1_Liv2_sidecheck_4;
    5 : sw_ComengInterurbanMk1_Liv2_pantocheck_at_2;
    6 .. 7 : sw_ComengInterurbanMk1_Liv2_sidecheck_6;
    return sw_ComengInterurbanMk1_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengInterurbanMk1_Liv2_Motor_lead; //Panto
    return spriteset_ComengInterurbanMk1_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_ComengInterurbanMk1_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk1_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengInterurbanMk1_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk1_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengInterurbanMk1_Liv2_Motor_lead;        //Front panto
    return spriteset_ComengInterurbanMk1_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk1_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_ComengInterurbanMk1_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk1_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk1_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_ComengInterurbanMk1_Liv2_frontcheck; //We are going forwards
    return sw_ComengInterurbanMk1_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk1_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_ComengInterurbanMk1_Liv2_lencheck;
    return sw_ComengInterurbanMk1_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengInterurbanMk1_Liv2, 14501) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGINTERURBANMK1);
        introduction_date:                date(1958,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  70/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ComengInterurbanMk1_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengInterurbanMk1_Liv2_directioncheck;
        can_attach_wagon: sw_ComengInterurbanMk1_attach ;
        purchase: spriteset_ComengInterurbanMk1_Liv2_purchase;
        additional_text: string(STR_INFO_COMENGINTERURBANMK1);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengInterurbanMk1_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (70/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

//ComengInterurbanMk1_Liv3
spriteset(spriteset_ComengInterurbanMk1_Liv3_purchase,   "gfx/ComengInterurbanMk1_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengInterurbanMk1_Liv3_Motor_lead,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengInterurbanMk1_Liv3_Motor_rear,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengInterurbanMk1_Liv3_DrivingTrailer_lead,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_ComengInterurbanMk1_Liv3_DrivingTrailer_rear,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8(187, 69)}
spriteset(spriteset_ComengInterurbanMk1_Liv3_Trailer,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8(7, 99)}
spriteset(spriteset_ComengInterurbanMk1_Liv3_NonControlMotor,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8(187, 99)}
spriteset(spriteset_ComengInterurbanMk1_Liv3_NonControlMotor_r,   "gfx/ComengInterurbanMk1_Liv3.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv3_Trailer;
    return spriteset_ComengInterurbanMk1_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_1_r;
    return sw_ComengInterurbanMk1_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengInterurbanMk1_Liv3_Trailer;
    return sw_ComengInterurbanMk1_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_2_r;
    return sw_ComengInterurbanMk1_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk1_Liv3_Trailer;
    3 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_1_r;
    4 : sw_ComengInterurbanMk1_Liv3_sidecheck_4_r;
    5 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_ComengInterurbanMk1_Liv3_sidecheck_6_r;
    return sw_ComengInterurbanMk1_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor_r;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk1_Liv3_NonControlMotor;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_1;
    return sw_ComengInterurbanMk1_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_1;
    return spriteset_ComengInterurbanMk1_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_2;
    return sw_ComengInterurbanMk1_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk1_Liv3_Trailer;
    3 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_1;
    4 : sw_ComengInterurbanMk1_Liv3_sidecheck_4;
    5 : sw_ComengInterurbanMk1_Liv3_pantocheck_at_2;
    6 .. 7 : sw_ComengInterurbanMk1_Liv3_sidecheck_6;
    return sw_ComengInterurbanMk1_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengInterurbanMk1_Liv3_Motor_lead; //Panto
    return spriteset_ComengInterurbanMk1_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_ComengInterurbanMk1_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk1_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengInterurbanMk1_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk1_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengInterurbanMk1_Liv3_Motor_lead;        //Front panto
    return spriteset_ComengInterurbanMk1_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk1_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk1_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk1_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_ComengInterurbanMk1_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk1_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk1_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_ComengInterurbanMk1_Liv3_frontcheck; //We are going forwards
    return sw_ComengInterurbanMk1_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk1_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_ComengInterurbanMk1_Liv3_lencheck;
    return sw_ComengInterurbanMk1_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengInterurbanMk1_Liv3, 14502) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGINTERURBANMK1);
        introduction_date:                date(1958,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        40 ton;
        speed:                            130 km/h;
        power:                            800 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     13;
        running_cost_factor:             180;
        cargo_capacity:                  70/param_capacity_mod;
        loading_speed: 10;

        variant_group: Item_ComengInterurbanMk1_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengInterurbanMk1_Liv3_directioncheck;
        can_attach_wagon: sw_ComengInterurbanMk1_attach ;
        purchase: spriteset_ComengInterurbanMk1_Liv3_purchase;
        additional_text: string(STR_INFO_COMENGINTERURBANMK1);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengInterurbanMk1_Liv3_revcheck ;
        length                      : 8;
        cargo_capacity              : (70/param_capacity_mod) ;
        power                       : 400 ;
		weight:                        40;
		running_cost_factor:             45;

    }
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_attach, vehicle_type_id){
    Item_ComengInterurbanMk2_VR    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengInterurbanMk2_VLine1    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_ComengInterurbanMk2_VLine2    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}


//ComengInterurbanMk2_VR
spriteset(spriteset_ComengInterurbanMk2_VR_purchase,   "gfx/ComengInterurbanMk2_VR.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengInterurbanMk2_VR_Motor_lead,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengInterurbanMk2_VR_Motor_rear,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengInterurbanMk2_VR_DrivingTrailer_lead,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengInterurbanMk2_VR_DrivingTrailer_rear,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengInterurbanMk2_VR_Trailer,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengInterurbanMk2_VR_NonControlMotor,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengInterurbanMk2_VR_NonControlMotor_r,   "gfx/ComengInterurbanMk2_VR.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk2_VR_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk2_VR_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VR_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VR_Trailer;
    return spriteset_ComengInterurbanMk2_VR_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk2_VR_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VR_pantocheck_at_1_r;
    return sw_ComengInterurbanMk2_VR_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengInterurbanMk2_VR_Trailer;
    return sw_ComengInterurbanMk2_VR_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VR_pantocheck_at_2_r;
    return sw_ComengInterurbanMk2_VR_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk2_VR_Trailer;
    3 : sw_ComengInterurbanMk2_VR_pantocheck_at_1_r;
    4 : sw_ComengInterurbanMk2_VR_sidecheck_4_r;
    5 : sw_ComengInterurbanMk2_VR_pantocheck_at_2_r;
    6 .. 7 : sw_ComengInterurbanMk2_VR_sidecheck_6_r;
    return sw_ComengInterurbanMk2_VR_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk2_VR_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk2_VR_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VR_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk2_VR_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VR_pantocheck_at_1;
    return sw_ComengInterurbanMk2_VR_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VR_pantocheck_at_1;
    return spriteset_ComengInterurbanMk2_VR_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VR_pantocheck_at_2;
    return sw_ComengInterurbanMk2_VR_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk2_VR_Trailer;
    3 : sw_ComengInterurbanMk2_VR_pantocheck_at_1;
    4 : sw_ComengInterurbanMk2_VR_sidecheck_4;
    5 : sw_ComengInterurbanMk2_VR_pantocheck_at_2;
    6 .. 7 : sw_ComengInterurbanMk2_VR_sidecheck_6;
    return sw_ComengInterurbanMk2_VR_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengInterurbanMk2_VR_Motor_lead; //Panto
    return spriteset_ComengInterurbanMk2_VR_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VR_panto_direction_r_pos;        //Front panto
    return spriteset_ComengInterurbanMk2_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VR_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk2_VR_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengInterurbanMk2_VR_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk2_VR_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengInterurbanMk2_VR_Motor_lead;        //Front panto
    return spriteset_ComengInterurbanMk2_VR_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VR_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk2_VR_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VR_frontcheck, position_in_vehid_chain){
    0: sw_ComengInterurbanMk2_VR_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk2_VR_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk2_VR_directioncheck, vehicle_is_reversed){
    0: sw_ComengInterurbanMk2_VR_frontcheck; //We are going forwards
    return sw_ComengInterurbanMk2_VR_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk2_VR_revcheck, vehicle_is_reversed){
    0 : sw_ComengInterurbanMk2_VR_lencheck;
    return sw_ComengInterurbanMk2_VR_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengInterurbanMk2_VR, 14801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGINTERURBANMK2);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  79/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ComengInterurbanMk2_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengInterurbanMk2_VR_directioncheck;
        can_attach_wagon: sw_ComengInterurbanMk2_attach ;
        purchase: spriteset_ComengInterurbanMk2_VR_purchase;
        additional_text: string(STR_INFO_COMENGINTERURBANMK2);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengInterurbanMk2_VR_revcheck ;
        length                      : 8;
        cargo_capacity              : (79/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}


//ComengInterurbanMk2_VLine1
spriteset(spriteset_ComengInterurbanMk2_VLine1_purchase,   "gfx/ComengInterurbanMk2_VLine1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengInterurbanMk2_VLine1_Motor_lead,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengInterurbanMk2_VLine1_Motor_rear,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengInterurbanMk2_VLine1_DrivingTrailer_lead,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengInterurbanMk2_VLine1_DrivingTrailer_rear,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengInterurbanMk2_VLine1_Trailer,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengInterurbanMk2_VLine1_NonControlMotor,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengInterurbanMk2_VLine1_NonControlMotor_r,   "gfx/ComengInterurbanMk2_VLine1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VLine1_Trailer;
    return spriteset_ComengInterurbanMk2_VLine1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_1_r;
    return sw_ComengInterurbanMk2_VLine1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengInterurbanMk2_VLine1_Trailer;
    return sw_ComengInterurbanMk2_VLine1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_2_r;
    return sw_ComengInterurbanMk2_VLine1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk2_VLine1_Trailer;
    3 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_1_r;
    4 : sw_ComengInterurbanMk2_VLine1_sidecheck_4_r;
    5 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_2_r;
    6 .. 7 : sw_ComengInterurbanMk2_VLine1_sidecheck_6_r;
    return sw_ComengInterurbanMk2_VLine1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk2_VLine1_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_1;
    return sw_ComengInterurbanMk2_VLine1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_1;
    return spriteset_ComengInterurbanMk2_VLine1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_2;
    return sw_ComengInterurbanMk2_VLine1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk2_VLine1_Trailer;
    3 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_1;
    4 : sw_ComengInterurbanMk2_VLine1_sidecheck_4;
    5 : sw_ComengInterurbanMk2_VLine1_pantocheck_at_2;
    6 .. 7 : sw_ComengInterurbanMk2_VLine1_sidecheck_6;
    return sw_ComengInterurbanMk2_VLine1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengInterurbanMk2_VLine1_Motor_lead; //Panto
    return spriteset_ComengInterurbanMk2_VLine1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VLine1_panto_direction_r_pos;        //Front panto
    return spriteset_ComengInterurbanMk2_VLine1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VLine1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk2_VLine1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengInterurbanMk2_VLine1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk2_VLine1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengInterurbanMk2_VLine1_Motor_lead;        //Front panto
    return spriteset_ComengInterurbanMk2_VLine1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VLine1_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk2_VLine1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine1_frontcheck, position_in_vehid_chain){
    0: sw_ComengInterurbanMk2_VLine1_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk2_VLine1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk2_VLine1_directioncheck, vehicle_is_reversed){
    0: sw_ComengInterurbanMk2_VLine1_frontcheck; //We are going forwards
    return sw_ComengInterurbanMk2_VLine1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk2_VLine1_revcheck, vehicle_is_reversed){
    0 : sw_ComengInterurbanMk2_VLine1_lencheck;
    return sw_ComengInterurbanMk2_VLine1_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengInterurbanMk2_VLine1, 14802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGINTERURBANMK2);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  79/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ComengInterurbanMk2_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengInterurbanMk2_VLine1_directioncheck;
        can_attach_wagon: sw_ComengInterurbanMk2_attach ;
        purchase: spriteset_ComengInterurbanMk2_VLine1_purchase;
        additional_text: string(STR_INFO_COMENGINTERURBANMK2);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengInterurbanMk2_VLine1_revcheck ;
        length                      : 8;
        cargo_capacity              : (79/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}


//ComengInterurbanMk2_VLine2
spriteset(spriteset_ComengInterurbanMk2_VLine2_purchase,   "gfx/ComengInterurbanMk2_VLine2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengInterurbanMk2_VLine2_Motor_lead,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengInterurbanMk2_VLine2_Motor_rear,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengInterurbanMk2_VLine2_DrivingTrailer_lead,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengInterurbanMk2_VLine2_DrivingTrailer_rear,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengInterurbanMk2_VLine2_Trailer,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengInterurbanMk2_VLine2_NonControlMotor,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengInterurbanMk2_VLine2_NonControlMotor_r,   "gfx/ComengInterurbanMk2_VLine2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VLine2_Trailer;
    return spriteset_ComengInterurbanMk2_VLine2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_1_r;
    return sw_ComengInterurbanMk2_VLine2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengInterurbanMk2_VLine2_Trailer;
    return sw_ComengInterurbanMk2_VLine2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_2_r;
    return sw_ComengInterurbanMk2_VLine2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk2_VLine2_Trailer;
    3 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_1_r;
    4 : sw_ComengInterurbanMk2_VLine2_sidecheck_4_r;
    5 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_2_r;
    6 .. 7 : sw_ComengInterurbanMk2_VLine2_sidecheck_6_r;
    return sw_ComengInterurbanMk2_VLine2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor_r;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengInterurbanMk2_VLine2_NonControlMotor;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_1;
    return sw_ComengInterurbanMk2_VLine2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_1;
    return spriteset_ComengInterurbanMk2_VLine2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_2;
    return sw_ComengInterurbanMk2_VLine2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengInterurbanMk2_VLine2_Trailer;
    3 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_1;
    4 : sw_ComengInterurbanMk2_VLine2_sidecheck_4;
    5 : sw_ComengInterurbanMk2_VLine2_pantocheck_at_2;
    6 .. 7 : sw_ComengInterurbanMk2_VLine2_sidecheck_6;
    return sw_ComengInterurbanMk2_VLine2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengInterurbanMk2_VLine2_Motor_lead; //Panto
    return spriteset_ComengInterurbanMk2_VLine2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VLine2_panto_direction_r_pos;        //Front panto
    return spriteset_ComengInterurbanMk2_VLine2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VLine2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk2_VLine2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengInterurbanMk2_VLine2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk2_VLine2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengInterurbanMk2_VLine2_Motor_lead;        //Front panto
    return spriteset_ComengInterurbanMk2_VLine2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengInterurbanMk2_VLine2_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengInterurbanMk2_VLine2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengInterurbanMk2_VLine2_frontcheck, position_in_vehid_chain){
    0: sw_ComengInterurbanMk2_VLine2_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengInterurbanMk2_VLine2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk2_VLine2_directioncheck, vehicle_is_reversed){
    0: sw_ComengInterurbanMk2_VLine2_frontcheck; //We are going forwards
    return sw_ComengInterurbanMk2_VLine2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengInterurbanMk2_VLine2_revcheck, vehicle_is_reversed){
    0 : sw_ComengInterurbanMk2_VLine2_lencheck;
    return sw_ComengInterurbanMk2_VLine2_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengInterurbanMk2_VLine2, 14803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_FictionalDisable == 0 && param_IntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGINTERURBANMK2);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            885 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     15;
        running_cost_factor:             190;
        cargo_capacity:                  79/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_ComengInterurbanMk2_VR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengInterurbanMk2_VLine2_directioncheck;
        can_attach_wagon: sw_ComengInterurbanMk2_attach ;
        purchase: spriteset_ComengInterurbanMk2_VLine2_purchase;
        additional_text: string(STR_INFO_COMENGINTERURBANMK2);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengInterurbanMk2_VLine2_revcheck ;
        length                      : 8;
        cargo_capacity              : (79/param_capacity_mod) ;
        power                       : 442 ;
		weight:                        47;
		running_cost_factor:             48;
    }
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_attach, vehicle_type_id){
	Item_TullochDDInterurban_Liv1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDDInterurban_Liv2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDDInterurban_Liv3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDDInterurban_Liv4    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_TullochDDInterurban_Liv5    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//TullochDDInterurban_Liv1
spriteset(spriteset_TullochDDInterurban_Liv1_purchase,   "gfx/TullochDDInterurban_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDDInterurban_Liv1_Motor_lead,   "gfx/TullochDDInterurban_Liv1.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochDDInterurban_Liv1_Motor_rear,   "gfx/TullochDDInterurban_Liv1.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochDDInterurban_Liv1_DrivingTrailer_lead,   "gfx/TullochDDInterurban_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_TullochDDInterurban_Liv1_DrivingTrailer_rear,   "gfx/TullochDDInterurban_Liv1.png") {template_8(187, 69)}
spriteset(spriteset_TullochDDInterurban_Liv1_Trailer,   "gfx/TullochDDInterurban_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_TullochDDInterurban_Liv1_NonControlMotor,   "gfx/TullochDDInterurban_Liv1.png") {template_8(187, 99)}
spriteset(spriteset_TullochDDInterurban_Liv1_NonControlMotor_r,   "gfx/TullochDDInterurban_Liv1.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv1_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv1_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv1_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv1_Trailer;
    return spriteset_TullochDDInterurban_Liv1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv1_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv1_pantocheck_at_1_r;
    return sw_TullochDDInterurban_Liv1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochDDInterurban_Liv1_Trailer;
    return sw_TullochDDInterurban_Liv1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv1_pantocheck_at_2_r;
    return sw_TullochDDInterurban_Liv1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv1_Trailer;
    3 : sw_TullochDDInterurban_Liv1_pantocheck_at_1_r;
    4 : sw_TullochDDInterurban_Liv1_sidecheck_4_r;
    5 : sw_TullochDDInterurban_Liv1_pantocheck_at_2_r;
    6 .. 7 : sw_TullochDDInterurban_Liv1_sidecheck_6_r;
    return sw_TullochDDInterurban_Liv1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv1_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv1_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv1_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv1_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv1_pantocheck_at_1;
    return sw_TullochDDInterurban_Liv1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv1_pantocheck_at_1;
    return spriteset_TullochDDInterurban_Liv1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv1_pantocheck_at_2;
    return sw_TullochDDInterurban_Liv1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv1_Trailer;
    3 : sw_TullochDDInterurban_Liv1_pantocheck_at_1;
    4 : sw_TullochDDInterurban_Liv1_sidecheck_4;
    5 : sw_TullochDDInterurban_Liv1_pantocheck_at_2;
    6 .. 7 : sw_TullochDDInterurban_Liv1_sidecheck_6;
    return sw_TullochDDInterurban_Liv1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochDDInterurban_Liv1_Motor_lead; //Panto
    return spriteset_TullochDDInterurban_Liv1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv1_panto_direction_r_pos;        //Front panto
    return spriteset_TullochDDInterurban_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochDDInterurban_Liv1_Motor_lead;        //Front panto
    return spriteset_TullochDDInterurban_Liv1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv1_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv1_frontcheck, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv1_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv1_directioncheck, vehicle_is_reversed){
    0: sw_TullochDDInterurban_Liv1_frontcheck; //We are going forwards
    return sw_TullochDDInterurban_Liv1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv1_revcheck, vehicle_is_reversed){
    0 : sw_TullochDDInterurban_Liv1_lencheck;
    return sw_TullochDDInterurban_Liv1_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochDDInterurban_Liv1, 16600) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHDDINTERURBAN);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_TullochDDInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochDDInterurban_Liv1_directioncheck;
        can_attach_wagon: sw_TullochDDInterurban_attach ;
        purchase: spriteset_TullochDDInterurban_Liv1_purchase;
        additional_text: string(STR_INFO_TULLOCHDDINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochDDInterurban_Liv1_revcheck ;
        length                      : 8;
        cargo_capacity              : (108/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor: 40;
    }
}

//TullochDDInterurban_Liv2
spriteset(spriteset_TullochDDInterurban_Liv2_purchase,   "gfx/TullochDDInterurban_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDDInterurban_Liv2_Motor_lead,   "gfx/TullochDDInterurban_Liv2.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochDDInterurban_Liv2_Motor_rear,   "gfx/TullochDDInterurban_Liv2.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochDDInterurban_Liv2_DrivingTrailer_lead,   "gfx/TullochDDInterurban_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_TullochDDInterurban_Liv2_DrivingTrailer_rear,   "gfx/TullochDDInterurban_Liv2.png") {template_8(187, 69)}
spriteset(spriteset_TullochDDInterurban_Liv2_Trailer,   "gfx/TullochDDInterurban_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_TullochDDInterurban_Liv2_NonControlMotor,   "gfx/TullochDDInterurban_Liv2.png") {template_8(187, 99)}
spriteset(spriteset_TullochDDInterurban_Liv2_NonControlMotor_r,   "gfx/TullochDDInterurban_Liv2.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv2_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv2_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv2_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv2_Trailer;
    return spriteset_TullochDDInterurban_Liv2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv2_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv2_pantocheck_at_1_r;
    return sw_TullochDDInterurban_Liv2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochDDInterurban_Liv2_Trailer;
    return sw_TullochDDInterurban_Liv2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv2_pantocheck_at_2_r;
    return sw_TullochDDInterurban_Liv2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv2_Trailer;
    3 : sw_TullochDDInterurban_Liv2_pantocheck_at_1_r;
    4 : sw_TullochDDInterurban_Liv2_sidecheck_4_r;
    5 : sw_TullochDDInterurban_Liv2_pantocheck_at_2_r;
    6 .. 7 : sw_TullochDDInterurban_Liv2_sidecheck_6_r;
    return sw_TullochDDInterurban_Liv2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv2_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv2_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv2_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv2_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv2_pantocheck_at_1;
    return sw_TullochDDInterurban_Liv2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv2_pantocheck_at_1;
    return spriteset_TullochDDInterurban_Liv2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv2_pantocheck_at_2;
    return sw_TullochDDInterurban_Liv2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv2_Trailer;
    3 : sw_TullochDDInterurban_Liv2_pantocheck_at_1;
    4 : sw_TullochDDInterurban_Liv2_sidecheck_4;
    5 : sw_TullochDDInterurban_Liv2_pantocheck_at_2;
    6 .. 7 : sw_TullochDDInterurban_Liv2_sidecheck_6;
    return sw_TullochDDInterurban_Liv2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochDDInterurban_Liv2_Motor_lead; //Panto
    return spriteset_TullochDDInterurban_Liv2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv2_panto_direction_r_pos;        //Front panto
    return spriteset_TullochDDInterurban_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochDDInterurban_Liv2_Motor_lead;        //Front panto
    return spriteset_TullochDDInterurban_Liv2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv2_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv2_frontcheck, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv2_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv2_directioncheck, vehicle_is_reversed){
    0: sw_TullochDDInterurban_Liv2_frontcheck; //We are going forwards
    return sw_TullochDDInterurban_Liv2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv2_revcheck, vehicle_is_reversed){
    0 : sw_TullochDDInterurban_Liv2_lencheck;
    return sw_TullochDDInterurban_Liv2_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochDDInterurban_Liv2, 16601) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHDDINTERURBAN);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_TullochDDInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochDDInterurban_Liv2_directioncheck;
        can_attach_wagon: sw_TullochDDInterurban_attach ;
        purchase: spriteset_TullochDDInterurban_Liv2_purchase;
        additional_text: string(STR_INFO_TULLOCHDDINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochDDInterurban_Liv2_revcheck ;
        length                      : 8;
        cargo_capacity              : (108/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor: 40;
    }
}

//TullochDDInterurban_Liv3
spriteset(spriteset_TullochDDInterurban_Liv3_purchase,   "gfx/TullochDDInterurban_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDDInterurban_Liv3_Motor_lead,   "gfx/TullochDDInterurban_Liv3.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochDDInterurban_Liv3_Motor_rear,   "gfx/TullochDDInterurban_Liv3.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochDDInterurban_Liv3_DrivingTrailer_lead,   "gfx/TullochDDInterurban_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_TullochDDInterurban_Liv3_DrivingTrailer_rear,   "gfx/TullochDDInterurban_Liv3.png") {template_8(187, 69)}
spriteset(spriteset_TullochDDInterurban_Liv3_Trailer,   "gfx/TullochDDInterurban_Liv3.png") {template_8(7, 99)}
spriteset(spriteset_TullochDDInterurban_Liv3_NonControlMotor,   "gfx/TullochDDInterurban_Liv3.png") {template_8(187, 99)}
spriteset(spriteset_TullochDDInterurban_Liv3_NonControlMotor_r,   "gfx/TullochDDInterurban_Liv3.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv3_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv3_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv3_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv3_Trailer;
    return spriteset_TullochDDInterurban_Liv3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv3_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv3_pantocheck_at_1_r;
    return sw_TullochDDInterurban_Liv3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochDDInterurban_Liv3_Trailer;
    return sw_TullochDDInterurban_Liv3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv3_pantocheck_at_2_r;
    return sw_TullochDDInterurban_Liv3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv3_Trailer;
    3 : sw_TullochDDInterurban_Liv3_pantocheck_at_1_r;
    4 : sw_TullochDDInterurban_Liv3_sidecheck_4_r;
    5 : sw_TullochDDInterurban_Liv3_pantocheck_at_2_r;
    6 .. 7 : sw_TullochDDInterurban_Liv3_sidecheck_6_r;
    return sw_TullochDDInterurban_Liv3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv3_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv3_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv3_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv3_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv3_pantocheck_at_1;
    return sw_TullochDDInterurban_Liv3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv3_pantocheck_at_1;
    return spriteset_TullochDDInterurban_Liv3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv3_pantocheck_at_2;
    return sw_TullochDDInterurban_Liv3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv3_Trailer;
    3 : sw_TullochDDInterurban_Liv3_pantocheck_at_1;
    4 : sw_TullochDDInterurban_Liv3_sidecheck_4;
    5 : sw_TullochDDInterurban_Liv3_pantocheck_at_2;
    6 .. 7 : sw_TullochDDInterurban_Liv3_sidecheck_6;
    return sw_TullochDDInterurban_Liv3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochDDInterurban_Liv3_Motor_lead; //Panto
    return spriteset_TullochDDInterurban_Liv3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv3_panto_direction_r_pos;        //Front panto
    return spriteset_TullochDDInterurban_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochDDInterurban_Liv3_Motor_lead;        //Front panto
    return spriteset_TullochDDInterurban_Liv3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv3_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv3_frontcheck, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv3_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv3_directioncheck, vehicle_is_reversed){
    0: sw_TullochDDInterurban_Liv3_frontcheck; //We are going forwards
    return sw_TullochDDInterurban_Liv3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv3_revcheck, vehicle_is_reversed){
    0 : sw_TullochDDInterurban_Liv3_lencheck;
    return sw_TullochDDInterurban_Liv3_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochDDInterurban_Liv3, 16602) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHDDINTERURBAN);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_TullochDDInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochDDInterurban_Liv3_directioncheck;
        can_attach_wagon: sw_TullochDDInterurban_attach ;
        purchase: spriteset_TullochDDInterurban_Liv3_purchase;
        additional_text: string(STR_INFO_TULLOCHDDINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochDDInterurban_Liv3_revcheck ;
        length                      : 8;
        cargo_capacity              : (108/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor: 40;
    }
}

//TullochDDInterurban_Liv4
spriteset(spriteset_TullochDDInterurban_Liv4_purchase,   "gfx/TullochDDInterurban_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDDInterurban_Liv4_Motor_lead,   "gfx/TullochDDInterurban_Liv4.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochDDInterurban_Liv4_Motor_rear,   "gfx/TullochDDInterurban_Liv4.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochDDInterurban_Liv4_DrivingTrailer_lead,   "gfx/TullochDDInterurban_Liv4.png") {template_8(187, 39)}
spriteset(spriteset_TullochDDInterurban_Liv4_DrivingTrailer_rear,   "gfx/TullochDDInterurban_Liv4.png") {template_8(187, 69)}
spriteset(spriteset_TullochDDInterurban_Liv4_Trailer,   "gfx/TullochDDInterurban_Liv4.png") {template_8(7, 99)}
spriteset(spriteset_TullochDDInterurban_Liv4_NonControlMotor,   "gfx/TullochDDInterurban_Liv4.png") {template_8(187, 99)}
spriteset(spriteset_TullochDDInterurban_Liv4_NonControlMotor_r,   "gfx/TullochDDInterurban_Liv4.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv4_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv4_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv4_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv4_Trailer;
    return spriteset_TullochDDInterurban_Liv4_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv4_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv4_pantocheck_at_1_r;
    return sw_TullochDDInterurban_Liv4_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochDDInterurban_Liv4_Trailer;
    return sw_TullochDDInterurban_Liv4_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv4_pantocheck_at_2_r;
    return sw_TullochDDInterurban_Liv4_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv4_Trailer;
    3 : sw_TullochDDInterurban_Liv4_pantocheck_at_1_r;
    4 : sw_TullochDDInterurban_Liv4_sidecheck_4_r;
    5 : sw_TullochDDInterurban_Liv4_pantocheck_at_2_r;
    6 .. 7 : sw_TullochDDInterurban_Liv4_sidecheck_6_r;
    return sw_TullochDDInterurban_Liv4_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv4_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv4_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv4_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv4_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv4_pantocheck_at_1;
    return sw_TullochDDInterurban_Liv4_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv4_pantocheck_at_1;
    return spriteset_TullochDDInterurban_Liv4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv4_pantocheck_at_2;
    return sw_TullochDDInterurban_Liv4_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv4_Trailer;
    3 : sw_TullochDDInterurban_Liv4_pantocheck_at_1;
    4 : sw_TullochDDInterurban_Liv4_sidecheck_4;
    5 : sw_TullochDDInterurban_Liv4_pantocheck_at_2;
    6 .. 7 : sw_TullochDDInterurban_Liv4_sidecheck_6;
    return sw_TullochDDInterurban_Liv4_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochDDInterurban_Liv4_Motor_lead; //Panto
    return spriteset_TullochDDInterurban_Liv4_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv4_panto_direction_r_pos;        //Front panto
    return spriteset_TullochDDInterurban_Liv4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv4_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv4_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv4_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv4_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochDDInterurban_Liv4_Motor_lead;        //Front panto
    return spriteset_TullochDDInterurban_Liv4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv4_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv4_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv4_frontcheck, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv4_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv4_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv4_directioncheck, vehicle_is_reversed){
    0: sw_TullochDDInterurban_Liv4_frontcheck; //We are going forwards
    return sw_TullochDDInterurban_Liv4_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv4_revcheck, vehicle_is_reversed){
    0 : sw_TullochDDInterurban_Liv4_lencheck;
    return sw_TullochDDInterurban_Liv4_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochDDInterurban_Liv4, 16603) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHDDINTERURBAN);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_TullochDDInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochDDInterurban_Liv4_directioncheck;
        can_attach_wagon: sw_TullochDDInterurban_attach ;
        purchase: spriteset_TullochDDInterurban_Liv4_purchase;
        additional_text: string(STR_INFO_TULLOCHDDINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochDDInterurban_Liv4_revcheck ;
        length                      : 8;
        cargo_capacity              : (108/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor: 40;
    }
}

//TullochDDInterurban_Liv5
spriteset(spriteset_TullochDDInterurban_Liv5_purchase,   "gfx/TullochDDInterurban_Liv5.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDDInterurban_Liv5_Motor_lead,   "gfx/TullochDDInterurban_Liv5.png") {template_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_TullochDDInterurban_Liv5_Motor_rear,   "gfx/TullochDDInterurban_Liv5.png") {template_8(7, 69)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_TullochDDInterurban_Liv5_DrivingTrailer_lead,   "gfx/TullochDDInterurban_Liv5.png") {template_8(187, 39)}
spriteset(spriteset_TullochDDInterurban_Liv5_DrivingTrailer_rear,   "gfx/TullochDDInterurban_Liv5.png") {template_8(187, 69)}
spriteset(spriteset_TullochDDInterurban_Liv5_Trailer,   "gfx/TullochDDInterurban_Liv5.png") {template_8(7, 99)}
spriteset(spriteset_TullochDDInterurban_Liv5_NonControlMotor,   "gfx/TullochDDInterurban_Liv5.png") {template_8(187, 99)}
spriteset(spriteset_TullochDDInterurban_Liv5_NonControlMotor_r,   "gfx/TullochDDInterurban_Liv5.png") {template_8_r(187, 99)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv5_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv5_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv5_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv5_Trailer;
    return spriteset_TullochDDInterurban_Liv5_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv5_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv5_pantocheck_at_1_r;
    return sw_TullochDDInterurban_Liv5_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_TullochDDInterurban_Liv5_Trailer;
    return sw_TullochDDInterurban_Liv5_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv5_pantocheck_at_2_r;
    return sw_TullochDDInterurban_Liv5_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv5_Trailer;
    3 : sw_TullochDDInterurban_Liv5_pantocheck_at_1_r;
    4 : sw_TullochDDInterurban_Liv5_sidecheck_4_r;
    5 : sw_TullochDDInterurban_Liv5_pantocheck_at_2_r;
    6 .. 7 : sw_TullochDDInterurban_Liv5_sidecheck_6_r;
    return sw_TullochDDInterurban_Liv5_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_TullochDDInterurban_Liv5_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_TullochDDInterurban_Liv5_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_TullochDDInterurban_Liv5_NonControlMotor_r;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_TullochDDInterurban_Liv5_NonControlMotor;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv5_pantocheck_at_1;
    return sw_TullochDDInterurban_Liv5_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv5_pantocheck_at_1;
    return spriteset_TullochDDInterurban_Liv5_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_TullochDDInterurban_Liv5_pantocheck_at_2;
    return sw_TullochDDInterurban_Liv5_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_TullochDDInterurban_Liv5_Trailer;
    3 : sw_TullochDDInterurban_Liv5_pantocheck_at_1;
    4 : sw_TullochDDInterurban_Liv5_sidecheck_4;
    5 : sw_TullochDDInterurban_Liv5_pantocheck_at_2;
    6 .. 7 : sw_TullochDDInterurban_Liv5_sidecheck_6;
    return sw_TullochDDInterurban_Liv5_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_TullochDDInterurban_Liv5_Motor_lead; //Panto
    return spriteset_TullochDDInterurban_Liv5_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_panto_direction_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv5_panto_direction_r_pos;        //Front panto
    return spriteset_TullochDDInterurban_Liv5_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv5_panto_direction_r;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv5_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_frontcheck_r, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv5_panto_direction_r; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv5_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_panto_direction, vehicle_is_flipped){
    0 : spriteset_TullochDDInterurban_Liv5_Motor_lead;        //Front panto
    return spriteset_TullochDDInterurban_Liv5_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_panto_flipcheck, vehicle_is_flipped){
    0 : sw_TullochDDInterurban_Liv5_panto_direction;        //Not flipped, give Panto
    return spriteset_TullochDDInterurban_Liv5_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_TullochDDInterurban_Liv5_frontcheck, position_in_vehid_chain){
    0: sw_TullochDDInterurban_Liv5_panto_direction; //We need a pantograph, guaranteed
    return sw_TullochDDInterurban_Liv5_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv5_directioncheck, vehicle_is_reversed){
    0: sw_TullochDDInterurban_Liv5_frontcheck; //We are going forwards
    return sw_TullochDDInterurban_Liv5_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_TullochDDInterurban_Liv5_revcheck, vehicle_is_reversed){
    0 : sw_TullochDDInterurban_Liv5_lencheck;
    return sw_TullochDDInterurban_Liv5_lencheck_r;
}

item(FEAT_TRAINS, Item_TullochDDInterurban_Liv5, 16604) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_TULLOCHDDINTERURBAN);
        introduction_date:                date(1968,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        47 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     18;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 20;

        variant_group: Item_TullochDDInterurban_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_TullochDDInterurban_Liv5_directioncheck;
        can_attach_wagon: sw_TullochDDInterurban_attach ;
        purchase: spriteset_TullochDDInterurban_Liv5_purchase;
        additional_text: string(STR_INFO_TULLOCHDDINTERURBAN);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_TullochDDInterurban_Liv5_revcheck ;
        length                      : 8;
        cargo_capacity              : (108/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        47;
		running_cost_factor: 40;
    }
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_attach, vehicle_type_id){
	Item_ComengVSet_PTC    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_SRA    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_CentralCoast    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_Cityrail1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_Cityrail2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_Cityrail3    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_Cityrail4    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengVSet_Trainlink    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//VSet_PTC
spriteset(spriteset_ComengVSet_PTC_purchase,   "gfx/ComengVSet_PTC.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_PTC_Motor_lead,   "gfx/ComengVSet_PTC.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_PTC_Motor_rear,   "gfx/ComengVSet_PTC.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_PTC_DrivingTrailer_lead,   "gfx/ComengVSet_PTC.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_PTC_DrivingTrailer_rear,   "gfx/ComengVSet_PTC.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_PTC_Trailer,   "gfx/ComengVSet_PTC.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_PTC_NonControlMotor,   "gfx/ComengVSet_PTC.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_PTC_NonControlMotor_r,   "gfx/ComengVSet_PTC.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_PTC_NonControlMotor_r;
    return spriteset_ComengVSet_PTC_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_PTC_NonControlMotor;
    return spriteset_ComengVSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_PTC_NonControlMotor_r;
    return spriteset_ComengVSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_PTC_Trailer;
    return spriteset_ComengVSet_PTC_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_PTC_NonControlMotor;
    return spriteset_ComengVSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_PTC_pantocheck_at_1_r;
    return sw_ComengVSet_PTC_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_PTC_Trailer;
    return sw_ComengVSet_PTC_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_PTC_pantocheck_at_2_r;
    return sw_ComengVSet_PTC_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_PTC_Trailer;
    3 : sw_ComengVSet_PTC_pantocheck_at_1_r;
    4 : sw_ComengVSet_PTC_sidecheck_4_r;
    5 : sw_ComengVSet_PTC_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_PTC_sidecheck_6_r;
    return sw_ComengVSet_PTC_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_PTC_NonControlMotor_r;
    return spriteset_ComengVSet_PTC_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_PTC_NonControlMotor;
    return spriteset_ComengVSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_PTC_NonControlMotor_r;
    return spriteset_ComengVSet_PTC_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_PTC_NonControlMotor;
    return spriteset_ComengVSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_PTC_pantocheck_at_1;
    return sw_ComengVSet_PTC_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_PTC_pantocheck_at_1;
    return spriteset_ComengVSet_PTC_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_PTC_pantocheck_at_2;
    return sw_ComengVSet_PTC_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_PTC_Trailer;
    3 : sw_ComengVSet_PTC_pantocheck_at_1;
    4 : sw_ComengVSet_PTC_sidecheck_4;
    5 : sw_ComengVSet_PTC_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_PTC_sidecheck_6;
    return sw_ComengVSet_PTC_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_PTC_Motor_lead; //Panto
    return spriteset_ComengVSet_PTC_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_PTC_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_PTC_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_PTC_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_PTC_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_PTC_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_PTC_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_PTC_Motor_lead;        //Front panto
    return spriteset_ComengVSet_PTC_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_PTC_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_PTC_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_PTC_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_PTC_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_PTC_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_PTC_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_PTC_frontcheck; //We are going forwards
    return sw_ComengVSet_PTC_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_PTC_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_PTC_lencheck;
    return sw_ComengVSet_PTC_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_PTC, 16701) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_PTC_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_PTC_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_PTC_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_SRA_purchase,   "gfx/ComengVSet_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_SRA_Motor_lead,   "gfx/ComengVSet_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_SRA_Motor_rear,   "gfx/ComengVSet_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_SRA_DrivingTrailer_lead,   "gfx/ComengVSet_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_SRA_DrivingTrailer_rear,   "gfx/ComengVSet_SRA.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_SRA_Trailer,   "gfx/ComengVSet_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_SRA_NonControlMotor,   "gfx/ComengVSet_SRA.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_SRA_NonControlMotor_r,   "gfx/ComengVSet_SRA.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_SRA_NonControlMotor_r;
    return spriteset_ComengVSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_SRA_NonControlMotor;
    return spriteset_ComengVSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_SRA_NonControlMotor_r;
    return spriteset_ComengVSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_SRA_Trailer;
    return spriteset_ComengVSet_SRA_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_SRA_NonControlMotor;
    return spriteset_ComengVSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_SRA_pantocheck_at_1_r;
    return sw_ComengVSet_SRA_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_SRA_Trailer;
    return sw_ComengVSet_SRA_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_SRA_pantocheck_at_2_r;
    return sw_ComengVSet_SRA_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_SRA_Trailer;
    3 : sw_ComengVSet_SRA_pantocheck_at_1_r;
    4 : sw_ComengVSet_SRA_sidecheck_4_r;
    5 : sw_ComengVSet_SRA_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_SRA_sidecheck_6_r;
    return sw_ComengVSet_SRA_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_SRA_NonControlMotor_r;
    return spriteset_ComengVSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_SRA_NonControlMotor;
    return spriteset_ComengVSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_SRA_NonControlMotor_r;
    return spriteset_ComengVSet_SRA_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_SRA_NonControlMotor;
    return spriteset_ComengVSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_SRA_pantocheck_at_1;
    return sw_ComengVSet_SRA_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_SRA_pantocheck_at_1;
    return spriteset_ComengVSet_SRA_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_SRA_pantocheck_at_2;
    return sw_ComengVSet_SRA_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_SRA_Trailer;
    3 : sw_ComengVSet_SRA_pantocheck_at_1;
    4 : sw_ComengVSet_SRA_sidecheck_4;
    5 : sw_ComengVSet_SRA_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_SRA_sidecheck_6;
    return sw_ComengVSet_SRA_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_SRA_Motor_lead; //Panto
    return spriteset_ComengVSet_SRA_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_SRA_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_SRA_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_SRA_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_SRA_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_SRA_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_SRA_Motor_lead;        //Front panto
    return spriteset_ComengVSet_SRA_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_SRA_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_SRA_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_SRA_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_SRA_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_SRA_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_SRA_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_SRA_frontcheck; //We are going forwards
    return sw_ComengVSet_SRA_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_SRA_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_SRA_lencheck;
    return sw_ComengVSet_SRA_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_SRA, 16702) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_SRA_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_SRA_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_SRA_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_CentralCoast_purchase,   "gfx/ComengVSet_CentralCoast.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_CentralCoast_Motor_lead,   "gfx/ComengVSet_CentralCoast.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_CentralCoast_Motor_rear,   "gfx/ComengVSet_CentralCoast.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_CentralCoast_DrivingTrailer_lead,   "gfx/ComengVSet_CentralCoast.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_CentralCoast_DrivingTrailer_rear,   "gfx/ComengVSet_CentralCoast.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_CentralCoast_Trailer,   "gfx/ComengVSet_CentralCoast.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_CentralCoast_NonControlMotor,   "gfx/ComengVSet_CentralCoast.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_CentralCoast_NonControlMotor_r,   "gfx/ComengVSet_CentralCoast.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_CentralCoast_NonControlMotor_r;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_CentralCoast_NonControlMotor;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_CentralCoast_NonControlMotor_r;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_CentralCoast_Trailer;
    return spriteset_ComengVSet_CentralCoast_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_CentralCoast_NonControlMotor;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_CentralCoast_pantocheck_at_1_r;
    return sw_ComengVSet_CentralCoast_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_CentralCoast_Trailer;
    return sw_ComengVSet_CentralCoast_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_CentralCoast_pantocheck_at_2_r;
    return sw_ComengVSet_CentralCoast_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_CentralCoast_Trailer;
    3 : sw_ComengVSet_CentralCoast_pantocheck_at_1_r;
    4 : sw_ComengVSet_CentralCoast_sidecheck_4_r;
    5 : sw_ComengVSet_CentralCoast_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_CentralCoast_sidecheck_6_r;
    return sw_ComengVSet_CentralCoast_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_CentralCoast_NonControlMotor_r;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_CentralCoast_NonControlMotor;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_CentralCoast_NonControlMotor_r;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_CentralCoast_NonControlMotor;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_CentralCoast_pantocheck_at_1;
    return sw_ComengVSet_CentralCoast_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_CentralCoast_pantocheck_at_1;
    return spriteset_ComengVSet_CentralCoast_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_CentralCoast_pantocheck_at_2;
    return sw_ComengVSet_CentralCoast_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_CentralCoast_Trailer;
    3 : sw_ComengVSet_CentralCoast_pantocheck_at_1;
    4 : sw_ComengVSet_CentralCoast_sidecheck_4;
    5 : sw_ComengVSet_CentralCoast_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_CentralCoast_sidecheck_6;
    return sw_ComengVSet_CentralCoast_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_CentralCoast_Motor_lead; //Panto
    return spriteset_ComengVSet_CentralCoast_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_CentralCoast_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_CentralCoast_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_CentralCoast_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_CentralCoast_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_CentralCoast_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_CentralCoast_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_CentralCoast_Motor_lead;        //Front panto
    return spriteset_ComengVSet_CentralCoast_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_CentralCoast_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_CentralCoast_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_CentralCoast_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_CentralCoast_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_CentralCoast_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_CentralCoast_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_CentralCoast_frontcheck; //We are going forwards
    return sw_ComengVSet_CentralCoast_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_CentralCoast_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_CentralCoast_lencheck;
    return sw_ComengVSet_CentralCoast_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_CentralCoast, 16703) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_CentralCoast_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_CentralCoast_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_CentralCoast_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_Cityrail1_purchase,   "gfx/ComengVSet_Cityrail1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_Cityrail1_Motor_lead,   "gfx/ComengVSet_Cityrail1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_Cityrail1_Motor_rear,   "gfx/ComengVSet_Cityrail1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_Cityrail1_DrivingTrailer_lead,   "gfx/ComengVSet_Cityrail1.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_Cityrail1_DrivingTrailer_rear,   "gfx/ComengVSet_Cityrail1.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_Cityrail1_Trailer,   "gfx/ComengVSet_Cityrail1.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_Cityrail1_NonControlMotor,   "gfx/ComengVSet_Cityrail1.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_Cityrail1_NonControlMotor_r,   "gfx/ComengVSet_Cityrail1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail1_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail1_NonControlMotor;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail1_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail1_Trailer;
    return spriteset_ComengVSet_Cityrail1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail1_NonControlMotor;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail1_pantocheck_at_1_r;
    return sw_ComengVSet_Cityrail1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_Cityrail1_Trailer;
    return sw_ComengVSet_Cityrail1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail1_pantocheck_at_2_r;
    return sw_ComengVSet_Cityrail1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail1_Trailer;
    3 : sw_ComengVSet_Cityrail1_pantocheck_at_1_r;
    4 : sw_ComengVSet_Cityrail1_sidecheck_4_r;
    5 : sw_ComengVSet_Cityrail1_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_Cityrail1_sidecheck_6_r;
    return sw_ComengVSet_Cityrail1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail1_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail1_NonControlMotor;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail1_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail1_NonControlMotor;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail1_pantocheck_at_1;
    return sw_ComengVSet_Cityrail1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail1_pantocheck_at_1;
    return spriteset_ComengVSet_Cityrail1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail1_pantocheck_at_2;
    return sw_ComengVSet_Cityrail1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail1_Trailer;
    3 : sw_ComengVSet_Cityrail1_pantocheck_at_1;
    4 : sw_ComengVSet_Cityrail1_sidecheck_4;
    5 : sw_ComengVSet_Cityrail1_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_Cityrail1_sidecheck_6;
    return sw_ComengVSet_Cityrail1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_Cityrail1_Motor_lead; //Panto
    return spriteset_ComengVSet_Cityrail1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail1_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_Cityrail1_Motor_lead;        //Front panto
    return spriteset_ComengVSet_Cityrail1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail1_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail1_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail1_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail1_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_Cityrail1_frontcheck; //We are going forwards
    return sw_ComengVSet_Cityrail1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail1_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_Cityrail1_lencheck;
    return sw_ComengVSet_Cityrail1_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_Cityrail1, 16704) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_Cityrail1_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_Cityrail1_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_Cityrail1_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_Cityrail2_purchase,   "gfx/ComengVSet_Cityrail2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_Cityrail2_Motor_lead,   "gfx/ComengVSet_Cityrail2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_Cityrail2_Motor_rear,   "gfx/ComengVSet_Cityrail2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_Cityrail2_DrivingTrailer_lead,   "gfx/ComengVSet_Cityrail2.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_Cityrail2_DrivingTrailer_rear,   "gfx/ComengVSet_Cityrail2.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_Cityrail2_Trailer,   "gfx/ComengVSet_Cityrail2.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_Cityrail2_NonControlMotor,   "gfx/ComengVSet_Cityrail2.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_Cityrail2_NonControlMotor_r,   "gfx/ComengVSet_Cityrail2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail2_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail2_NonControlMotor;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail2_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail2_Trailer;
    return spriteset_ComengVSet_Cityrail2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail2_NonControlMotor;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail2_pantocheck_at_1_r;
    return sw_ComengVSet_Cityrail2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_Cityrail2_Trailer;
    return sw_ComengVSet_Cityrail2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail2_pantocheck_at_2_r;
    return sw_ComengVSet_Cityrail2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail2_Trailer;
    3 : sw_ComengVSet_Cityrail2_pantocheck_at_1_r;
    4 : sw_ComengVSet_Cityrail2_sidecheck_4_r;
    5 : sw_ComengVSet_Cityrail2_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_Cityrail2_sidecheck_6_r;
    return sw_ComengVSet_Cityrail2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail2_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail2_NonControlMotor;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail2_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail2_NonControlMotor;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail2_pantocheck_at_1;
    return sw_ComengVSet_Cityrail2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail2_pantocheck_at_1;
    return spriteset_ComengVSet_Cityrail2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail2_pantocheck_at_2;
    return sw_ComengVSet_Cityrail2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail2_Trailer;
    3 : sw_ComengVSet_Cityrail2_pantocheck_at_1;
    4 : sw_ComengVSet_Cityrail2_sidecheck_4;
    5 : sw_ComengVSet_Cityrail2_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_Cityrail2_sidecheck_6;
    return sw_ComengVSet_Cityrail2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_Cityrail2_Motor_lead; //Panto
    return spriteset_ComengVSet_Cityrail2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail2_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_Cityrail2_Motor_lead;        //Front panto
    return spriteset_ComengVSet_Cityrail2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail2_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail2_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail2_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail2_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_Cityrail2_frontcheck; //We are going forwards
    return sw_ComengVSet_Cityrail2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail2_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_Cityrail2_lencheck;
    return sw_ComengVSet_Cityrail2_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_Cityrail2, 16705) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_Cityrail2_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_Cityrail2_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_Cityrail2_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_Cityrail3_purchase,   "gfx/ComengVSet_Cityrail3.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_Cityrail3_Motor_lead,   "gfx/ComengVSet_Cityrail3.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_Cityrail3_Motor_rear,   "gfx/ComengVSet_Cityrail3.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_Cityrail3_DrivingTrailer_lead,   "gfx/ComengVSet_Cityrail3.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_Cityrail3_DrivingTrailer_rear,   "gfx/ComengVSet_Cityrail3.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_Cityrail3_Trailer,   "gfx/ComengVSet_Cityrail3.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_Cityrail3_NonControlMotor,   "gfx/ComengVSet_Cityrail3.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_Cityrail3_NonControlMotor_r,   "gfx/ComengVSet_Cityrail3.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail3_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail3_NonControlMotor;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail3_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail3_Trailer;
    return spriteset_ComengVSet_Cityrail3_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail3_NonControlMotor;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail3_pantocheck_at_1_r;
    return sw_ComengVSet_Cityrail3_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_Cityrail3_Trailer;
    return sw_ComengVSet_Cityrail3_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail3_pantocheck_at_2_r;
    return sw_ComengVSet_Cityrail3_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail3_Trailer;
    3 : sw_ComengVSet_Cityrail3_pantocheck_at_1_r;
    4 : sw_ComengVSet_Cityrail3_sidecheck_4_r;
    5 : sw_ComengVSet_Cityrail3_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_Cityrail3_sidecheck_6_r;
    return sw_ComengVSet_Cityrail3_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail3_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail3_NonControlMotor;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail3_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail3_NonControlMotor;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail3_pantocheck_at_1;
    return sw_ComengVSet_Cityrail3_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail3_pantocheck_at_1;
    return spriteset_ComengVSet_Cityrail3_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail3_pantocheck_at_2;
    return sw_ComengVSet_Cityrail3_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail3_Trailer;
    3 : sw_ComengVSet_Cityrail3_pantocheck_at_1;
    4 : sw_ComengVSet_Cityrail3_sidecheck_4;
    5 : sw_ComengVSet_Cityrail3_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_Cityrail3_sidecheck_6;
    return sw_ComengVSet_Cityrail3_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_Cityrail3_Motor_lead; //Panto
    return spriteset_ComengVSet_Cityrail3_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail3_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_Cityrail3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail3_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail3_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail3_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail3_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_Cityrail3_Motor_lead;        //Front panto
    return spriteset_ComengVSet_Cityrail3_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail3_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail3_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail3_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail3_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail3_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail3_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_Cityrail3_frontcheck; //We are going forwards
    return sw_ComengVSet_Cityrail3_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail3_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_Cityrail3_lencheck;
    return sw_ComengVSet_Cityrail3_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_Cityrail3, 16706) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_Cityrail3_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_Cityrail3_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_Cityrail3_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_Cityrail4_purchase,   "gfx/ComengVSet_Cityrail4.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_Cityrail4_Motor_lead,   "gfx/ComengVSet_Cityrail4.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_Cityrail4_Motor_rear,   "gfx/ComengVSet_Cityrail4.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_Cityrail4_DrivingTrailer_lead,   "gfx/ComengVSet_Cityrail4.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_Cityrail4_DrivingTrailer_rear,   "gfx/ComengVSet_Cityrail4.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_Cityrail4_Trailer,   "gfx/ComengVSet_Cityrail4.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_Cityrail4_NonControlMotor,   "gfx/ComengVSet_Cityrail4.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_Cityrail4_NonControlMotor_r,   "gfx/ComengVSet_Cityrail4.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail4_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail4_NonControlMotor;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail4_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail4_Trailer;
    return spriteset_ComengVSet_Cityrail4_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail4_NonControlMotor;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail4_pantocheck_at_1_r;
    return sw_ComengVSet_Cityrail4_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_Cityrail4_Trailer;
    return sw_ComengVSet_Cityrail4_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail4_pantocheck_at_2_r;
    return sw_ComengVSet_Cityrail4_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail4_Trailer;
    3 : sw_ComengVSet_Cityrail4_pantocheck_at_1_r;
    4 : sw_ComengVSet_Cityrail4_sidecheck_4_r;
    5 : sw_ComengVSet_Cityrail4_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_Cityrail4_sidecheck_6_r;
    return sw_ComengVSet_Cityrail4_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Cityrail4_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Cityrail4_NonControlMotor;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Cityrail4_NonControlMotor_r;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Cityrail4_NonControlMotor;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail4_pantocheck_at_1;
    return sw_ComengVSet_Cityrail4_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail4_pantocheck_at_1;
    return spriteset_ComengVSet_Cityrail4_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Cityrail4_pantocheck_at_2;
    return sw_ComengVSet_Cityrail4_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Cityrail4_Trailer;
    3 : sw_ComengVSet_Cityrail4_pantocheck_at_1;
    4 : sw_ComengVSet_Cityrail4_sidecheck_4;
    5 : sw_ComengVSet_Cityrail4_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_Cityrail4_sidecheck_6;
    return sw_ComengVSet_Cityrail4_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_Cityrail4_Motor_lead; //Panto
    return spriteset_ComengVSet_Cityrail4_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail4_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_Cityrail4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail4_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail4_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail4_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail4_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_Cityrail4_Motor_lead;        //Front panto
    return spriteset_ComengVSet_Cityrail4_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_Cityrail4_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_Cityrail4_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Cityrail4_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_Cityrail4_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_Cityrail4_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail4_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_Cityrail4_frontcheck; //We are going forwards
    return sw_ComengVSet_Cityrail4_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Cityrail4_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_Cityrail4_lencheck;
    return sw_ComengVSet_Cityrail4_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_Cityrail4, 16707) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_Cityrail4_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_Cityrail4_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_Cityrail4_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

//VSSet
spriteset(spriteset_ComengVSet_Trainlink_purchase,   "gfx/ComengVSet_Trainlink.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengVSet_Trainlink_Motor_lead,   "gfx/ComengVSet_Trainlink.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengVSet_Trainlink_Motor_rear,   "gfx/ComengVSet_Trainlink.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengVSet_Trainlink_DrivingTrailer_lead,   "gfx/ComengVSet_Trainlink.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengVSet_Trainlink_DrivingTrailer_rear,   "gfx/ComengVSet_Trainlink.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengVSet_Trainlink_Trailer,   "gfx/ComengVSet_Trainlink.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengVSet_Trainlink_NonControlMotor,   "gfx/ComengVSet_Trainlink.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengVSet_Trainlink_NonControlMotor_r,   "gfx/ComengVSet_Trainlink.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Trainlink_NonControlMotor_r;
    return spriteset_ComengVSet_Trainlink_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Trainlink_NonControlMotor;
    return spriteset_ComengVSet_Trainlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Trainlink_NonControlMotor_r;
    return spriteset_ComengVSet_Trainlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Trainlink_Trailer;
    return spriteset_ComengVSet_Trainlink_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Trainlink_NonControlMotor;
    return spriteset_ComengVSet_Trainlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Trainlink_pantocheck_at_1_r;
    return sw_ComengVSet_Trainlink_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengVSet_Trainlink_Trailer;
    return sw_ComengVSet_Trainlink_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Trainlink_pantocheck_at_2_r;
    return sw_ComengVSet_Trainlink_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Trainlink_Trailer;
    3 : sw_ComengVSet_Trainlink_pantocheck_at_1_r;
    4 : sw_ComengVSet_Trainlink_sidecheck_4_r;
    5 : sw_ComengVSet_Trainlink_pantocheck_at_2_r;
    6 .. 7 : sw_ComengVSet_Trainlink_sidecheck_6_r;
    return sw_ComengVSet_Trainlink_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengVSet_Trainlink_NonControlMotor_r;
    return spriteset_ComengVSet_Trainlink_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengVSet_Trainlink_NonControlMotor;
    return spriteset_ComengVSet_Trainlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengVSet_Trainlink_NonControlMotor_r;
    return spriteset_ComengVSet_Trainlink_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengVSet_Trainlink_NonControlMotor;
    return spriteset_ComengVSet_Trainlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Trainlink_pantocheck_at_1;
    return sw_ComengVSet_Trainlink_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Trainlink_pantocheck_at_1;
    return spriteset_ComengVSet_Trainlink_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengVSet_Trainlink_pantocheck_at_2;
    return sw_ComengVSet_Trainlink_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengVSet_Trainlink_Trailer;
    3 : sw_ComengVSet_Trainlink_pantocheck_at_1;
    4 : sw_ComengVSet_Trainlink_sidecheck_4;
    5 : sw_ComengVSet_Trainlink_pantocheck_at_2;
    6 .. 7 : sw_ComengVSet_Trainlink_sidecheck_6;
    return sw_ComengVSet_Trainlink_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengVSet_Trainlink_Motor_lead; //Panto
    return spriteset_ComengVSet_Trainlink_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Trainlink_panto_direction_r_pos;        //Front panto
    return spriteset_ComengVSet_Trainlink_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengVSet_Trainlink_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengVSet_Trainlink_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengVSet_Trainlink_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengVSet_Trainlink_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengVSet_Trainlink_Motor_lead;        //Front panto
    return spriteset_ComengVSet_Trainlink_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengVSet_Trainlink_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengVSet_Trainlink_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengVSet_Trainlink_frontcheck, position_in_vehid_chain){
    0: sw_ComengVSet_Trainlink_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengVSet_Trainlink_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Trainlink_directioncheck, vehicle_is_reversed){
    0: sw_ComengVSet_Trainlink_frontcheck; //We are going forwards
    return sw_ComengVSet_Trainlink_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengVSet_Trainlink_revcheck, vehicle_is_reversed){
    0 : sw_ComengVSet_Trainlink_lencheck;
    return sw_ComengVSet_Trainlink_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengVSet_Trainlink, 16708) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_RealDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGVSET);
        introduction_date:                date(1970,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        50 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     20;
        running_cost_factor:             180;
        cargo_capacity:                  112/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengVSet_PTC;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengVSet_Trainlink_directioncheck;
        can_attach_wagon: sw_ComengVSet_attach ;
        purchase: spriteset_ComengVSet_Trainlink_purchase;
        additional_text: string(STR_INFO_COMENGVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengVSet_Trainlink_revcheck ;
        length                      : 8;
        cargo_capacity              : (112/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        50;
		running_cost_factor: 40;
    }
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_attach, vehicle_type_id){
	Item_ComengDKVSet_SRA1    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengDKVSet_SRA2    : return CB_RESULT_ATTACH_ALLOW  ;
	Item_ComengDKVSet_Cityrail    : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer    : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//DKVSet_SRA1
spriteset(spriteset_ComengDKVSet_SRA1_purchase,   "gfx/ComengDKVSet_SRA1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengDKVSet_SRA1_Motor_lead,   "gfx/ComengDKVSet_SRA1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengDKVSet_SRA1_Motor_rear,   "gfx/ComengDKVSet_SRA1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengDKVSet_SRA1_DrivingTrailer_lead,   "gfx/ComengDKVSet_SRA1.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengDKVSet_SRA1_DrivingTrailer_rear,   "gfx/ComengDKVSet_SRA1.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengDKVSet_SRA1_Trailer,   "gfx/ComengDKVSet_SRA1.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengDKVSet_SRA1_NonControlMotor,   "gfx/ComengDKVSet_SRA1.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengDKVSet_SRA1_NonControlMotor_r,   "gfx/ComengDKVSet_SRA1.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengDKVSet_SRA1_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengDKVSet_SRA1_NonControlMotor;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_SRA1_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_SRA1_Trailer;
    return spriteset_ComengDKVSet_SRA1_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengDKVSet_SRA1_NonControlMotor;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA1_pantocheck_at_1_r;
    return sw_ComengDKVSet_SRA1_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengDKVSet_SRA1_Trailer;
    return sw_ComengDKVSet_SRA1_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA1_pantocheck_at_2_r;
    return sw_ComengDKVSet_SRA1_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengDKVSet_SRA1_Trailer;
    3 : sw_ComengDKVSet_SRA1_pantocheck_at_1_r;
    4 : sw_ComengDKVSet_SRA1_sidecheck_4_r;
    5 : sw_ComengDKVSet_SRA1_pantocheck_at_2_r;
    6 .. 7 : sw_ComengDKVSet_SRA1_sidecheck_6_r;
    return sw_ComengDKVSet_SRA1_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengDKVSet_SRA1_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengDKVSet_SRA1_NonControlMotor;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_SRA1_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengDKVSet_SRA1_NonControlMotor;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA1_pantocheck_at_1;
    return sw_ComengDKVSet_SRA1_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA1_pantocheck_at_1;
    return spriteset_ComengDKVSet_SRA1_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA1_pantocheck_at_2;
    return sw_ComengDKVSet_SRA1_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengDKVSet_SRA1_Trailer;
    3 : sw_ComengDKVSet_SRA1_pantocheck_at_1;
    4 : sw_ComengDKVSet_SRA1_sidecheck_4;
    5 : sw_ComengDKVSet_SRA1_pantocheck_at_2;
    6 .. 7 : sw_ComengDKVSet_SRA1_sidecheck_6;
    return sw_ComengDKVSet_SRA1_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengDKVSet_SRA1_Motor_lead; //Panto
    return spriteset_ComengDKVSet_SRA1_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengDKVSet_SRA1_panto_direction_r_pos;        //Front panto
    return spriteset_ComengDKVSet_SRA1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengDKVSet_SRA1_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengDKVSet_SRA1_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengDKVSet_SRA1_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengDKVSet_SRA1_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengDKVSet_SRA1_Motor_lead;        //Front panto
    return spriteset_ComengDKVSet_SRA1_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengDKVSet_SRA1_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengDKVSet_SRA1_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA1_frontcheck, position_in_vehid_chain){
    0: sw_ComengDKVSet_SRA1_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengDKVSet_SRA1_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengDKVSet_SRA1_directioncheck, vehicle_is_reversed){
    0: sw_ComengDKVSet_SRA1_frontcheck; //We are going forwards
    return sw_ComengDKVSet_SRA1_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengDKVSet_SRA1_revcheck, vehicle_is_reversed){
    0 : sw_ComengDKVSet_SRA1_lencheck;
    return sw_ComengDKVSet_SRA1_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengDKVSet_SRA1, 16801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGDKVSET);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengDKVSet_SRA1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengDKVSet_SRA1_directioncheck;
        can_attach_wagon: sw_ComengDKVSet_attach ;
        purchase: spriteset_ComengDKVSet_SRA1_purchase;
        additional_text: string(STR_INFO_COMENGDKVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengDKVSet_SRA1_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        49;
		running_cost_factor: 40;
    }
}

//DKVSet_SRA2
spriteset(spriteset_ComengDKVSet_SRA2_purchase,   "gfx/ComengDKVSet_SRA2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengDKVSet_SRA2_Motor_lead,   "gfx/ComengDKVSet_SRA2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengDKVSet_SRA2_Motor_rear,   "gfx/ComengDKVSet_SRA2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengDKVSet_SRA2_DrivingTrailer_lead,   "gfx/ComengDKVSet_SRA2.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengDKVSet_SRA2_DrivingTrailer_rear,   "gfx/ComengDKVSet_SRA2.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengDKVSet_SRA2_Trailer,   "gfx/ComengDKVSet_SRA2.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengDKVSet_SRA2_NonControlMotor,   "gfx/ComengDKVSet_SRA2.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengDKVSet_SRA2_NonControlMotor_r,   "gfx/ComengDKVSet_SRA2.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengDKVSet_SRA2_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengDKVSet_SRA2_NonControlMotor;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_SRA2_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_SRA2_Trailer;
    return spriteset_ComengDKVSet_SRA2_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengDKVSet_SRA2_NonControlMotor;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA2_pantocheck_at_1_r;
    return sw_ComengDKVSet_SRA2_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengDKVSet_SRA2_Trailer;
    return sw_ComengDKVSet_SRA2_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA2_pantocheck_at_2_r;
    return sw_ComengDKVSet_SRA2_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengDKVSet_SRA2_Trailer;
    3 : sw_ComengDKVSet_SRA2_pantocheck_at_1_r;
    4 : sw_ComengDKVSet_SRA2_sidecheck_4_r;
    5 : sw_ComengDKVSet_SRA2_pantocheck_at_2_r;
    6 .. 7 : sw_ComengDKVSet_SRA2_sidecheck_6_r;
    return sw_ComengDKVSet_SRA2_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengDKVSet_SRA2_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengDKVSet_SRA2_NonControlMotor;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_SRA2_NonControlMotor_r;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengDKVSet_SRA2_NonControlMotor;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA2_pantocheck_at_1;
    return sw_ComengDKVSet_SRA2_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA2_pantocheck_at_1;
    return spriteset_ComengDKVSet_SRA2_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_SRA2_pantocheck_at_2;
    return sw_ComengDKVSet_SRA2_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengDKVSet_SRA2_Trailer;
    3 : sw_ComengDKVSet_SRA2_pantocheck_at_1;
    4 : sw_ComengDKVSet_SRA2_sidecheck_4;
    5 : sw_ComengDKVSet_SRA2_pantocheck_at_2;
    6 .. 7 : sw_ComengDKVSet_SRA2_sidecheck_6;
    return sw_ComengDKVSet_SRA2_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengDKVSet_SRA2_Motor_lead; //Panto
    return spriteset_ComengDKVSet_SRA2_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengDKVSet_SRA2_panto_direction_r_pos;        //Front panto
    return spriteset_ComengDKVSet_SRA2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengDKVSet_SRA2_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengDKVSet_SRA2_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengDKVSet_SRA2_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengDKVSet_SRA2_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengDKVSet_SRA2_Motor_lead;        //Front panto
    return spriteset_ComengDKVSet_SRA2_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengDKVSet_SRA2_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengDKVSet_SRA2_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_SRA2_frontcheck, position_in_vehid_chain){
    0: sw_ComengDKVSet_SRA2_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengDKVSet_SRA2_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengDKVSet_SRA2_directioncheck, vehicle_is_reversed){
    0: sw_ComengDKVSet_SRA2_frontcheck; //We are going forwards
    return sw_ComengDKVSet_SRA2_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengDKVSet_SRA2_revcheck, vehicle_is_reversed){
    0 : sw_ComengDKVSet_SRA2_lencheck;
    return sw_ComengDKVSet_SRA2_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengDKVSet_SRA2, 16802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGDKVSET);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengDKVSet_SRA1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengDKVSet_SRA2_directioncheck;
        can_attach_wagon: sw_ComengDKVSet_attach ;
        purchase: spriteset_ComengDKVSet_SRA2_purchase;
        additional_text: string(STR_INFO_COMENGDKVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengDKVSet_SRA2_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        49;
		running_cost_factor: 40;
    }
}

//DKVSet_Cityrail
spriteset(spriteset_ComengDKVSet_Cityrail_purchase,   "gfx/ComengDKVSet_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengDKVSet_Cityrail_Motor_lead,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_ComengDKVSet_Cityrail_Motor_rear,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_ComengDKVSet_Cityrail_DrivingTrailer_lead,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8(187, 39)}
spriteset(spriteset_ComengDKVSet_Cityrail_DrivingTrailer_rear,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8(187, 64)}
spriteset(spriteset_ComengDKVSet_Cityrail_Trailer,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8(7, 89)}
spriteset(spriteset_ComengDKVSet_Cityrail_NonControlMotor,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8(187, 89)}
spriteset(spriteset_ComengDKVSet_Cityrail_NonControlMotor_r,   "gfx/ComengDKVSet_Cityrail.png") {template_old_8_r(187, 89)}

// C O D E
//Backward

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_2_r, position_in_vehid_chain % 3){
    2 : spriteset_ComengDKVSet_Cityrail_NonControlMotor_r;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_2r_r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengDKVSet_Cityrail_NonControlMotor;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_1_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_Cityrail_NonControlMotor_r;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_0_r, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_Cityrail_Trailer;
    return spriteset_ComengDKVSet_Cityrail_NonControlMotor;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_1r_r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengDKVSet_Cityrail_NonControlMotor;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_sidecheck_other_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_Cityrail_pantocheck_at_1_r;
    return sw_ComengDKVSet_Cityrail_pantocheck_at_1r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_sidecheck_4_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : spriteset_ComengDKVSet_Cityrail_Trailer;
    return sw_ComengDKVSet_Cityrail_pantocheck_at_0_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_sidecheck_6_r, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_Cityrail_pantocheck_at_2_r;
    return sw_ComengDKVSet_Cityrail_pantocheck_at_2r_r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_lencheck_r, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengDKVSet_Cityrail_Trailer;
    3 : sw_ComengDKVSet_Cityrail_pantocheck_at_1_r;
    4 : sw_ComengDKVSet_Cityrail_sidecheck_4_r;
    5 : sw_ComengDKVSet_Cityrail_pantocheck_at_2_r;
    6 .. 7 : sw_ComengDKVSet_Cityrail_sidecheck_6_r;
    return sw_ComengDKVSet_Cityrail_sidecheck_other_r;
}

//Forward

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_2, position_in_vehid_chain % 3){
    2 : spriteset_ComengDKVSet_Cityrail_NonControlMotor_r;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_2r, position_in_vehid_chain_from_end % 3){
    2 : spriteset_ComengDKVSet_Cityrail_NonControlMotor;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_1, position_in_vehid_chain % 2){
    1 : spriteset_ComengDKVSet_Cityrail_NonControlMotor_r;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}
switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_pantocheck_at_1r, position_in_vehid_chain_from_end % 2){
    1 : spriteset_ComengDKVSet_Cityrail_NonControlMotor;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_sidecheck_other, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_Cityrail_pantocheck_at_1;
    return sw_ComengDKVSet_Cityrail_pantocheck_at_1r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_sidecheck_4, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_Cityrail_pantocheck_at_1;
    return spriteset_ComengDKVSet_Cityrail_Trailer;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_sidecheck_6, num_vehs_in_vehid_chain/2 > position_in_vehid_chain ) {
    1 : sw_ComengDKVSet_Cityrail_pantocheck_at_2;
    return sw_ComengDKVSet_Cityrail_pantocheck_at_2r;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_lencheck, num_vehs_in_vehid_chain ) {
    0 .. 2 : spriteset_ComengDKVSet_Cityrail_Trailer;
    3 : sw_ComengDKVSet_Cityrail_pantocheck_at_1;
    4 : sw_ComengDKVSet_Cityrail_sidecheck_4;
    5 : sw_ComengDKVSet_Cityrail_pantocheck_at_2;
    6 .. 7 : sw_ComengDKVSet_Cityrail_sidecheck_6;
    return sw_ComengDKVSet_Cityrail_sidecheck_other;
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_panto_direction_r_pos, position_in_vehid_chain_from_end){
    0: spriteset_ComengDKVSet_Cityrail_Motor_lead; //Panto
    return spriteset_ComengDKVSet_Cityrail_DrivingTrailer_lead; //No Panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_panto_direction_r, vehicle_is_flipped){
    0 : sw_ComengDKVSet_Cityrail_panto_direction_r_pos;        //Front panto
    return spriteset_ComengDKVSet_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_panto_flipcheck_r, vehicle_is_flipped){
    0 : sw_ComengDKVSet_Cityrail_panto_direction_r;        //Not flipped, give Panto
    return spriteset_ComengDKVSet_Cityrail_Motor_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_frontcheck_r, position_in_vehid_chain){
    0: sw_ComengDKVSet_Cityrail_panto_direction_r; //We need a pantograph, guaranteed
    return sw_ComengDKVSet_Cityrail_panto_flipcheck_r; //More Checks
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_panto_direction, vehicle_is_flipped){
    0 : spriteset_ComengDKVSet_Cityrail_Motor_lead;        //Front panto
    return spriteset_ComengDKVSet_Cityrail_Motor_rear;    //Rear panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_panto_flipcheck, vehicle_is_flipped){
    0 : sw_ComengDKVSet_Cityrail_panto_direction;        //Not flipped, give Panto
    return spriteset_ComengDKVSet_Cityrail_DrivingTrailer_rear;    //Flipped, no panto
}

switch(FEAT_TRAINS, SELF, sw_ComengDKVSet_Cityrail_frontcheck, position_in_vehid_chain){
    0: sw_ComengDKVSet_Cityrail_panto_direction; //We need a pantograph, guaranteed
    return sw_ComengDKVSet_Cityrail_panto_flipcheck; //More Checks
}

switch(FEAT_TRAINS, PARENT, sw_ComengDKVSet_Cityrail_directioncheck, vehicle_is_reversed){
    0: sw_ComengDKVSet_Cityrail_frontcheck; //We are going forwards
    return sw_ComengDKVSet_Cityrail_frontcheck_r; //We are going backwards
}

switch(FEAT_TRAINS, PARENT, sw_ComengDKVSet_Cityrail_revcheck, vehicle_is_reversed){
    0 : sw_ComengDKVSet_Cityrail_lencheck;
    return sw_ComengDKVSet_Cityrail_lencheck_r;
}

item(FEAT_TRAINS, Item_ComengDKVSet_Cityrail, 16803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_DDIntercityEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_COMENGDKVSET);
        introduction_date:                date(1989,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        49 ton;
        speed:                            145 km/h;
        power:                            720 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     22;
        running_cost_factor:             180;
        cargo_capacity:                  120/param_capacity_mod;
        loading_speed: 40;

        variant_group: Item_ComengDKVSet_SRA1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_ComengDKVSet_Cityrail_directioncheck;
        can_attach_wagon: sw_ComengDKVSet_attach ;
        purchase: spriteset_ComengDKVSet_Cityrail_purchase;
        additional_text: string(STR_INFO_COMENGDKVSET);
    }
    livery_override (Item_MU_Trailer){
        default                     : sw_ComengDKVSet_Cityrail_revcheck ;
        length                      : 8;
        cargo_capacity              : (120/param_capacity_mod) ;
        power                       : 360 ;
		weight:                        49;
		running_cost_factor: 40;
    }
}


/////////////////
//Express EMUs//
/////////////////

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_attach, vehicle_type_id){
    Item_EXP_EMU_XPTE_BR     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_EXP_EMU_XPTE_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_EXP_EMU_XPTE_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_EXP_EMU_XPTE_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//XPT-E
//BR
spriteset(spriteset_EXP_EMU_XPTE_BR_Purchase,   "gfx/EXP_EMU_XPT-E_BR.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_BR_Lead,   "gfx/EXP_EMU_XPT-E_BR.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_BR_Rear,   "gfx/EXP_EMU_XPT-E_BR.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_BR_Mid,   "gfx/EXP_EMU_XPT-E_BR.png") {template_old_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_BR_Trailer,   "gfx/EXP_EMU_XPT-E_BR.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_BR_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_BR_Rear;
    spriteset_EXP_EMU_XPTE_BR_Lead;
}

item(FEAT_TRAINS, Item_EXP_EMU_XPTE_BR,18801) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_ExpressEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             160;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_EXP_EMU_XPTE_BR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_BR_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_BR_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_BR_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor: 20;
    }
}

//XPT-E
//SRA
spriteset(spriteset_EXP_EMU_XPTE_SRA_Purchase,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_SRA_Lead,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_SRA_Rear,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_SRA_Mid,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_SRA_Trailer,   "gfx/EXP_EMU_XPT-E_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_SRA_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_SRA_Rear;
    spriteset_EXP_EMU_XPTE_SRA_Lead;
}

item(FEAT_TRAINS, Item_EXP_EMU_XPTE_SRA, 18802) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_ExpressEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             160;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_EXP_EMU_XPTE_BR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_SRA_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_SRA_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor: 20;
    }
}

//XPT-E
//Countrylink1
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Purchase,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Lead,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Rear,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Mid,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_old_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink1_Trailer,   "gfx/EXP_EMU_XPT-E_Countrylink1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_Countrylink1_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_Countrylink1_Rear;
    spriteset_EXP_EMU_XPTE_Countrylink1_Lead;
}

item(FEAT_TRAINS, Item_EXP_EMU_XPTE_Countrylink1, 18803) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_ExpressEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             160;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_EXP_EMU_XPTE_BR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_Countrylink1_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_Countrylink1_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor: 20;
    }
}

//XPT-E
//Countrylink2
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Purchase,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Lead,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_old_8(7, 39)} // <- Define a wagon, in this case the cab
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Rear,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_old_8(7, 64)} // <- Define the cab wagon again, but this time using a slightly different alignment template to get it flipped. Unsure if necessary for PGT
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Mid,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_old_8(7, 89)}
spriteset(spriteset_EXP_EMU_XPTE_Countrylink2_Trailer,   "gfx/EXP_EMU_XPT-E_Countrylink2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_EXP_EMU_XPTE_Countrylink2_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_EXP_EMU_XPTE_Countrylink2_Rear;
    spriteset_EXP_EMU_XPTE_Countrylink2_Lead;
}

item(FEAT_TRAINS, Item_EXP_EMU_XPTE_Countrylink2, 18804) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_ExpressEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_EXP_EMU_XPTE);
        introduction_date:                date(1985,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        76 ton;
        speed:                            200 km/h;
        power:                            6000 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     30;
        running_cost_factor:             160;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_EXP_EMU_XPTE_BR;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_EXP_EMU_XPTE_Countrylink2_last;
        can_attach_wagon: sw_EXP_EMU_XPTE_attach;
        purchase: spriteset_EXP_EMU_XPTE_Countrylink2_Purchase;
        additional_text: string(STR_INFO_EXP_EMU_XPTE);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_EXP_EMU_XPTE_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (68/param_capacity_mod);
        power:                            0;
		weight:                        40;
		running_cost_factor: 20;
    }
}

switch(FEAT_TRAINS, SELF, sw_X2000_attach, vehicle_type_id){
	Item_X2000_SJ     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_X2000_SRA     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_X2000_Countrylink1     : return CB_RESULT_ATTACH_ALLOW  ;
	Item_X2000_Countrylink2     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//X2000_SJ
spriteset(spriteset_X2000_SJ_Purchase,   "gfx/X2000_SJ.png") {template_purchase(7, 21)}
spriteset(spriteset_X2000_SJ_Lead,   "gfx/X2000_SJ.png") {template_old_8(7, 39)}
spriteset(spriteset_X2000_SJ_Rear,   "gfx/X2000_SJ.png") {template_old_8(7, 64)}

spriteset(spriteset_X2000_SJ_DT_Lead,   "gfx/X2000_SJ.png") {template_old_8(187, 39)}
spriteset(spriteset_X2000_SJ_DT_Rear,   "gfx/X2000_SJ.png") {template_old_8(187, 64)}

spriteset(spriteset_X2000_SJ_Trailer,   "gfx/X2000_SJ.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_X2000_SJ_forward, vehicle_is_flipped){
    0:    spriteset_X2000_SJ_Lead;
    1: spriteset_X2000_SJ_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_X2000_SJ_rev, vehicle_is_flipped){
    0:    spriteset_X2000_SJ_DT_Lead;
    1: spriteset_X2000_SJ_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_X2000_SJ_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_X2000_SJ_forward;
    1:    sw_X2000_SJ_rev;
}

item(FEAT_TRAINS, Item_X2000_SJ, 18901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_X2000);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        64 ton;
        speed:                            210 km/h;
        power:                            4370 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     28;
        running_cost_factor:             160;
        cargo_capacity:                  36;
        loading_speed: 10;

        variant_group: Item_X2000_SJ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_X2000_SJ_directioncheck;
        can_attach_wagon: sw_X2000_attach;
        purchase: spriteset_X2000_SJ_Purchase;
        additional_text: string(STR_INFO_X2000);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_X2000_SJ_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
        weight:                        47;
        running_cost_factor:             20;
    }
}

//X2000_SRA
spriteset(spriteset_X2000_SRA_Purchase,   "gfx/X2000_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_X2000_SRA_Lead,   "gfx/X2000_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_X2000_SRA_Rear,   "gfx/X2000_SRA.png") {template_old_8(7, 64)}

spriteset(spriteset_X2000_SRA_DT_Lead,   "gfx/X2000_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_X2000_SRA_DT_Rear,   "gfx/X2000_SRA.png") {template_old_8(187, 64)}

spriteset(spriteset_X2000_SRA_Trailer,   "gfx/X2000_SRA.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_X2000_SRA_forward, vehicle_is_flipped){
    0:    spriteset_X2000_SRA_Lead;
    1: spriteset_X2000_SRA_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_X2000_SRA_rev, vehicle_is_flipped){
    0:    spriteset_X2000_SRA_DT_Lead;
    1: spriteset_X2000_SRA_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_X2000_SRA_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_X2000_SRA_forward;
    1:    sw_X2000_SRA_rev;
}

item(FEAT_TRAINS, Item_X2000_SRA, 18902) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_X2000);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        64 ton;
        speed:                            210 km/h;
        power:                            4370 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     28;
        running_cost_factor:             160;
        cargo_capacity:                  36;
        loading_speed: 10;

        variant_group: Item_X2000_SJ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_X2000_SRA_directioncheck;
        can_attach_wagon: sw_X2000_attach;
        purchase: spriteset_X2000_SRA_Purchase;
        additional_text: string(STR_INFO_X2000);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_X2000_SRA_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
        weight:                        47;
        running_cost_factor:             20;
    }
}

//X2000_Countrylink1
spriteset(spriteset_X2000_Countrylink1_Purchase,   "gfx/X2000_Countrylink1.png") {template_purchase(7, 21)}
spriteset(spriteset_X2000_Countrylink1_Lead,   "gfx/X2000_Countrylink1.png") {template_old_8(7, 39)}
spriteset(spriteset_X2000_Countrylink1_Rear,   "gfx/X2000_Countrylink1.png") {template_old_8(7, 64)}

spriteset(spriteset_X2000_Countrylink1_DT_Lead,   "gfx/X2000_Countrylink1.png") {template_old_8(187, 39)}
spriteset(spriteset_X2000_Countrylink1_DT_Rear,   "gfx/X2000_Countrylink1.png") {template_old_8(187, 64)}

spriteset(spriteset_X2000_Countrylink1_Trailer,   "gfx/X2000_Countrylink1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_X2000_Countrylink1_forward, vehicle_is_flipped){
    0:    spriteset_X2000_Countrylink1_Lead;
    1: spriteset_X2000_Countrylink1_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_X2000_Countrylink1_rev, vehicle_is_flipped){
    0:    spriteset_X2000_Countrylink1_DT_Lead;
    1: spriteset_X2000_Countrylink1_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_X2000_Countrylink1_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_X2000_Countrylink1_forward;
    1:    sw_X2000_Countrylink1_rev;
}

item(FEAT_TRAINS, Item_X2000_Countrylink1, 18903) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_X2000);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        64 ton;
        speed:                            210 km/h;
        power:                            4370 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     28;
        running_cost_factor:             160;
        cargo_capacity:                  36;
        loading_speed: 10;

        variant_group: Item_X2000_SJ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_X2000_Countrylink1_directioncheck;
        can_attach_wagon: sw_X2000_attach;
        purchase: spriteset_X2000_Countrylink1_Purchase;
        additional_text: string(STR_INFO_X2000);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_X2000_Countrylink1_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
        weight:                        47;
        running_cost_factor:             20;
    }
}

//X2000_Countrylink2
spriteset(spriteset_X2000_Countrylink2_Purchase,   "gfx/X2000_Countrylink2.png") {template_purchase(7, 21)}
spriteset(spriteset_X2000_Countrylink2_Lead,   "gfx/X2000_Countrylink2.png") {template_old_8(7, 39)}
spriteset(spriteset_X2000_Countrylink2_Rear,   "gfx/X2000_Countrylink2.png") {template_old_8(7, 64)}

spriteset(spriteset_X2000_Countrylink2_DT_Lead,   "gfx/X2000_Countrylink2.png") {template_old_8(187, 39)}
spriteset(spriteset_X2000_Countrylink2_DT_Rear,   "gfx/X2000_Countrylink2.png") {template_old_8(187, 64)}

spriteset(spriteset_X2000_Countrylink2_Trailer,   "gfx/X2000_Countrylink2.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_X2000_Countrylink2_forward, vehicle_is_flipped){
    0:    spriteset_X2000_Countrylink2_Lead;
    1: spriteset_X2000_Countrylink2_DT_Rear;
}

switch(FEAT_TRAINS, SELF, sw_X2000_Countrylink2_rev, vehicle_is_flipped){
    0:    spriteset_X2000_Countrylink2_DT_Lead;
    1: spriteset_X2000_Countrylink2_Rear;
}

switch(FEAT_TRAINS, PARENT, sw_X2000_Countrylink2_directioncheck, vehicle_is_reversed){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    sw_X2000_Countrylink2_forward;
    1:    sw_X2000_Countrylink2_rev;
}

item(FEAT_TRAINS, Item_X2000_Countrylink2, 18904) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_PrototypeDisable == 0 && param_SuburbanDMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        ELRL;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_X2000);
        introduction_date:                date(1990,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        64 ton;
        speed:                            210 km/h;
        power:                            4370 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     28;
        running_cost_factor:             160;
        cargo_capacity:                  36;
        loading_speed: 10;

        variant_group: Item_X2000_SJ;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_X2000_Countrylink2_directioncheck;
        can_attach_wagon: sw_X2000_attach;
        purchase: spriteset_X2000_Countrylink2_Purchase;
        additional_text: string(STR_INFO_X2000);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        spriteset_X2000_Countrylink2_Trailer; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (72/param_capacity_mod);
        power:                            0;
        weight:                        47;
        running_cost_factor:             20;
    }
}

switch(FEAT_TRAINS, SELF, sw_VFT_attach, vehicle_type_id){
	Item_VFT_Belbin     : return CB_RESULT_ATTACH_ALLOW  ;
    Item_MU_Trailer     : return CB_RESULT_ATTACH_ALLOW  ;
    return string(STR_NO_COUPLE_MU) ;
}

//VFT_Belbin
spriteset(spriteset_VFT_Belbin_Purchase,   "gfx/VFT_Belbin.png") {template_purchase(7, 21)}
spriteset(spriteset_VFT_Belbin_Lead,   "gfx/VFT_Belbin.png") {template_old_8(7, 39)}
spriteset(spriteset_VFT_Belbin_Rear,   "gfx/VFT_Belbin.png") {template_old_8(7, 64)}

spriteset(spriteset_VFT_Belbin_Trailer_Solo,   "gfx/VFT_Belbin.png") {template_old_8(187, 39)}
spriteset(spriteset_VFT_Belbin_Trailer_Lead,   "gfx/VFT_Belbin.png") {template_old_8_r(187, 64)}
spriteset(spriteset_VFT_Belbin_Trailer_Rear,   "gfx/VFT_Belbin.png") {template_old_8(187, 64)}
spriteset(spriteset_VFT_Belbin_Trailer_Middle,   "gfx/VFT_Belbin.png") {template_old_8(187, 89)}
spriteset(spriteset_VFT_Belbin_Trailer_Buffet,   "gfx/VFT_Belbin.png") {template_old_8(187, 114)}

switch(FEAT_TRAINS, SELF, sw_VFT_Belbin_last, position_in_consist_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VFT_Belbin_Rear;
    spriteset_VFT_Belbin_Lead;
}

switch(FEAT_TRAINS, SELF, sw_VFT_Belbin_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VFT_Belbin_Trailer_Buffet;
  spriteset_VFT_Belbin_Trailer_Middle;
}

switch(FEAT_TRAINS, SELF, sw_VFT_Belbin_Trailer_Rear, position_in_vehid_chain_from_end){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VFT_Belbin_Trailer_Rear;
    sw_VFT_Belbin_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VFT_Belbin_Trailer_Lead, position_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    0:    spriteset_VFT_Belbin_Trailer_Lead;
    sw_VFT_Belbin_Trailer_Rear;
}

switch(FEAT_TRAINS, SELF, sw_VFT_Belbin_solo, num_vehs_in_vehid_chain){ // <- This code tells the game whether to use the cab or flipped cab, based on if they're right at the end or not
    1:    spriteset_VFT_Belbin_Trailer_Solo;
    sw_VFT_Belbin_Trailer_Lead;
}

item(FEAT_TRAINS, Item_VFT_Belbin, 20901) {
    property {
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        refit_cost:                        0;
        climates_available: (param_ProposalDisable == 0 && param_ExpressEMUDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        bitmask_vehicle_info:            0;
        misc_flags:                        bitmask(TRAIN_FLAG_MU,TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK, TRAIN_FLAG_TILT); // <- Train Flag MU needed here

        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];

        track_type:                        IHBA;
        running_cost_base:                RUNNING_COST_ELECTRIC;
        engine_class:                     ENGINE_CLASS_ELECTRIC;
        ai_special_flag:                AI_FLAG_PASSENGER;
        dual_headed:                    1; // <- Double Headed, so cab on each end

        visual_effect_and_powered: VISUAL_EFFECT_ELECTRIC;

        name:                            string(STR_NAME_VFT);
        introduction_date:                date(1995,1,1);
        vehicle_life:                     50;
        model_life:                        30;
        length:                            8;

        weight:                        72 ton;
        speed:                            350 km/h;
        power:                            12600 hp;
        tractive_effort_coefficient:     0.7;
        cost_factor:                     35;
        running_cost_factor:             180;
        cargo_capacity:                  0;
        loading_speed: 10;

        variant_group: Item_VFT_Belbin;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);
    }
    graphics {
        default: sw_VFT_Belbin_last;
        can_attach_wagon: sw_VFT_attach;
        purchase: spriteset_VFT_Belbin_Purchase;
        additional_text: string(STR_INFO_VFT);
}
        livery_override (Item_MU_Trailer) { // <- Override the appearance and stats of Item_FAI_WAGON_MU_COACH when attached, to make it fit the MU's appearance and stats
        default:                        sw_VFT_Belbin_solo; // <- This tells the game that when attached, the livery_override wagon needs to use this sprite
        length:                            8;
        cargo_capacity:                   (70/param_capacity_mod);
        power:                            0;
        weight:                        30;
        running_cost_factor:             30;
    }
}

//4WheelCoach_Liv1
spriteset(spriteset_4WheelCoach_Liv1_Purchase,   "gfx/4WheelCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_4WheelCoach_Liv1,   "gfx/4WheelCoach_Liv1.png") {template_4(7, 39)}
spriteset(spriteset_4WheelCoach_Liv1_Rear,   "gfx/4WheelCoach_Liv1.png") {template_4(7, 69)}

switch(FEAT_TRAINS, SELF, sw_4WheelCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_4WheelCoach_Liv1_Rear;
    return spriteset_4WheelCoach_Liv1;
}

item (FEAT_TRAINS, Item_4WheelCoach_Liv1, 29000) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            4;
        cost_factor:                    20;
        running_cost_factor:            1;
        loading_speed:                    15;

        variant_group: Item_4WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_4WHEELCOACH);
        introduction_date:                date(1855, 1, 1);

        speed:                            80 km/h;
        weight:                            16 ton;
        cargo_capacity:                    33/param_capacity_mod;
    }
    graphics {
    default:                             sw_4WheelCoach_Liv1_rearcheck;
    purchase:                            spriteset_4WheelCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_4WHEELCOACH);
}
}

//Mail_4WheelCoach_Liv1
spriteset(spriteset_Mail_4WheelCoach_Liv1_Purchase,   "gfx/4WheelCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_4WheelCoach_Liv1,   "gfx/4WheelCoach_Liv1.png") {template_4(187, 39)}
spriteset(spriteset_Mail_4WheelCoach_Liv1_Rear,   "gfx/4WheelCoach_Liv1.png") {template_4(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_4WheelCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_4WheelCoach_Liv1_Rear;
    return spriteset_Mail_4WheelCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_4WheelCoach_Liv1, 29020) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            4;
        cost_factor:                    15;
        running_cost_factor:            1;
        loading_speed:                    15;

        variant_group: Item_Mail_4WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_4WHEELCOACH);
        introduction_date:                date(1855, 1, 1);

        speed:                            80 km/h;
        weight:                            16 ton;
        cargo_capacity:                    33/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_4WheelCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_4WheelCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_4WHEELCOACH);
}
}

//4WheelCoach_Liv2
spriteset(spriteset_4WheelCoach_Liv2_Purchase,   "gfx/4WheelCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_4WheelCoach_Liv2,   "gfx/4WheelCoach_Liv2.png") {template_4(7, 39)}
spriteset(spriteset_4WheelCoach_Liv2_Rear,   "gfx/4WheelCoach_Liv2.png") {template_4(7, 69)}

switch(FEAT_TRAINS, SELF, sw_4WheelCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_4WheelCoach_Liv2_Rear;
    return spriteset_4WheelCoach_Liv2;
}

item (FEAT_TRAINS, Item_4WheelCoach_Liv2, 29001) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            4;
        cost_factor:                    20;
        running_cost_factor:            1;
        loading_speed:                    15;

        variant_group: Item_4WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_4WHEELCOACH);
        introduction_date:                date(1855, 1, 1);

        speed:                            80 km/h;
        weight:                            16 ton;
        cargo_capacity:                    33/param_capacity_mod;
    }
    graphics {
    default:                             sw_4WheelCoach_Liv2_rearcheck;
    purchase:                            spriteset_4WheelCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_4WHEELCOACH);
}
}

//Mail_4WheelCoach_Liv2
spriteset(spriteset_Mail_4WheelCoach_Liv2_Purchase,   "gfx/4WheelCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_4WheelCoach_Liv2,   "gfx/4WheelCoach_Liv2.png") {template_4(187, 39)}
spriteset(spriteset_Mail_4WheelCoach_Liv2_Rear,   "gfx/4WheelCoach_Liv2.png") {template_4(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_4WheelCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_4WheelCoach_Liv2_Rear;
    return spriteset_Mail_4WheelCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_4WheelCoach_Liv2, 29021) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            4;
        cost_factor:                    15;
        running_cost_factor:            1;
        loading_speed:                    15;

        variant_group: Item_Mail_4WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_4WHEELCOACH);
        introduction_date:                date(1855, 1, 1);

        speed:                            80 km/h;
        weight:                            16 ton;
        cargo_capacity:                    33/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_4WheelCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_4WheelCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_4WHEELCOACH);
}
}

//4WheelCoach_Liv3
spriteset(spriteset_4WheelCoach_Liv3_Purchase,   "gfx/4WheelCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_4WheelCoach_Liv3,   "gfx/4WheelCoach_Liv3.png") {template_4(7, 39)}
spriteset(spriteset_4WheelCoach_Liv3_Rear,   "gfx/4WheelCoach_Liv3.png") {template_4(7, 69)}

switch(FEAT_TRAINS, SELF, sw_4WheelCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_4WheelCoach_Liv3_Rear;
    return spriteset_4WheelCoach_Liv3;
}

item (FEAT_TRAINS, Item_4WheelCoach_Liv3, 29002) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            4;
        cost_factor:                    20;
        running_cost_factor:            1;
        loading_speed:                    15;

        variant_group: Item_4WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_4WHEELCOACH);
        introduction_date:                date(1855, 1, 1);

        speed:                            80 km/h;
        weight:                            16 ton;
        cargo_capacity:                    33/param_capacity_mod;
    }
    graphics {
    default:                             sw_4WheelCoach_Liv3_rearcheck;
    purchase:                            spriteset_4WheelCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_4WHEELCOACH);
}
}

//Mail_4WheelCoach_Liv3
spriteset(spriteset_Mail_4WheelCoach_Liv3_Purchase,   "gfx/4WheelCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_4WheelCoach_Liv3,   "gfx/4WheelCoach_Liv3.png") {template_4(187, 39)}
spriteset(spriteset_Mail_4WheelCoach_Liv3_Rear,   "gfx/4WheelCoach_Liv3.png") {template_4(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_4WheelCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_4WheelCoach_Liv3_Rear;
    return spriteset_Mail_4WheelCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_4WheelCoach_Liv3, 29022) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            4;
        cost_factor:                    15;
        running_cost_factor:            1;
        loading_speed:                    15;

        variant_group: Item_Mail_4WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_4WHEELCOACH);
        introduction_date:                date(1855, 1, 1);

        speed:                            80 km/h;
        weight:                            16 ton;
        cargo_capacity:                    33/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_4WheelCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_4WheelCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_4WHEELCOACH);
}
}

//6WheelCoach_Liv1
spriteset(spriteset_6WheelCoach_Liv1_Purchase,   "gfx/6WheelCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_6WheelCoach_Liv1,   "gfx/6WheelCoach_Liv1.png") {template_5(7, 39)}
spriteset(spriteset_6WheelCoach_Liv1_Rear,   "gfx/6WheelCoach_Liv1.png") {template_5(7, 69)}

switch(FEAT_TRAINS, SELF, sw_6WheelCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_6WheelCoach_Liv1_Rear;
    return spriteset_6WheelCoach_Liv1;
}

item (FEAT_TRAINS, Item_6WheelCoach_Liv1, 29100) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            5;
        cost_factor:                    25;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_6WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_6WHEELCOACH);
        introduction_date:                date(1864, 1, 1);

        speed:                            80 km/h;
        weight:                            17 ton;
        cargo_capacity:                    38/param_capacity_mod;
    }
    graphics {
    default:                             sw_6WheelCoach_Liv1_rearcheck;
    purchase:                            spriteset_6WheelCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_6WHEELCOACH);
}
}

//Mail_6WheelCoach_Liv1
spriteset(spriteset_Mail_6WheelCoach_Liv1_Purchase,   "gfx/6WheelCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_6WheelCoach_Liv1,   "gfx/6WheelCoach_Liv1.png") {template_5(187, 39)}
spriteset(spriteset_Mail_6WheelCoach_Liv1_Rear,   "gfx/6WheelCoach_Liv1.png") {template_5(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_6WheelCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_6WheelCoach_Liv1_Rear;
    return spriteset_Mail_6WheelCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_6WheelCoach_Liv1, 29120) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            5;
        cost_factor:                    20;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_Mail_6WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_6WHEELCOACH);
        introduction_date:                date(1864, 1, 1);

        speed:                            80 km/h;
        weight:                            17 ton;
        cargo_capacity:                    38/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_6WheelCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_6WheelCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_6WHEELCOACH);
}
}

//6WheelCoach_Liv2
spriteset(spriteset_6WheelCoach_Liv2_Purchase,   "gfx/6WheelCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_6WheelCoach_Liv2,   "gfx/6WheelCoach_Liv2.png") {template_5(7, 39)}
spriteset(spriteset_6WheelCoach_Liv2_Rear,   "gfx/6WheelCoach_Liv2.png") {template_5(7, 69)}

switch(FEAT_TRAINS, SELF, sw_6WheelCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_6WheelCoach_Liv2_Rear;
    return spriteset_6WheelCoach_Liv2;
}

item (FEAT_TRAINS, Item_6WheelCoach_Liv2, 29101) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            5;
        cost_factor:                    25;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_6WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_6WHEELCOACH);
        introduction_date:                date(1864, 1, 1);

        speed:                            80 km/h;
        weight:                            17 ton;
        cargo_capacity:                    38/param_capacity_mod;
    }
    graphics {
    default:                             sw_6WheelCoach_Liv2_rearcheck;
    purchase:                            spriteset_6WheelCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_6WHEELCOACH);
}
}

//Mail_6WheelCoach_Liv2
spriteset(spriteset_Mail_6WheelCoach_Liv2_Purchase,   "gfx/6WheelCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_6WheelCoach_Liv2,   "gfx/6WheelCoach_Liv2.png") {template_5(187, 39)}
spriteset(spriteset_Mail_6WheelCoach_Liv2_Rear,   "gfx/6WheelCoach_Liv2.png") {template_5(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_6WheelCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_6WheelCoach_Liv2_Rear;
    return spriteset_Mail_6WheelCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_6WheelCoach_Liv2, 29121) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            5;
        cost_factor:                    20;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_Mail_6WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_6WHEELCOACH);
        introduction_date:                date(1864, 1, 1);

        speed:                            80 km/h;
        weight:                            17 ton;
        cargo_capacity:                    38/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_6WheelCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_6WheelCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_6WHEELCOACH);
}
}

//6WheelCoach_Liv3
spriteset(spriteset_6WheelCoach_Liv3_Purchase,   "gfx/6WheelCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_6WheelCoach_Liv3,   "gfx/6WheelCoach_Liv3.png") {template_5(7, 39)}
spriteset(spriteset_6WheelCoach_Liv3_Rear,   "gfx/6WheelCoach_Liv3.png") {template_5(7, 69)}

switch(FEAT_TRAINS, SELF, sw_6WheelCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_6WheelCoach_Liv3_Rear;
    return spriteset_6WheelCoach_Liv3;
}

item (FEAT_TRAINS, Item_6WheelCoach_Liv3, 29102) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            5;
        cost_factor:                    25;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_6WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_6WHEELCOACH);
        introduction_date:                date(1864, 1, 1);

        speed:                            80 km/h;
        weight:                            17 ton;
        cargo_capacity:                    38/param_capacity_mod;
    }
    graphics {
    default:                             sw_6WheelCoach_Liv3_rearcheck;
    purchase:                            spriteset_6WheelCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_6WHEELCOACH);
}
}

//Mail_6WheelCoach_Liv3
spriteset(spriteset_Mail_6WheelCoach_Liv3_Purchase,   "gfx/6WheelCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_6WheelCoach_Liv3,   "gfx/6WheelCoach_Liv3.png") {template_5(187, 39)}
spriteset(spriteset_Mail_6WheelCoach_Liv3_Rear,   "gfx/6WheelCoach_Liv3.png") {template_5(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_6WheelCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_6WheelCoach_Liv3_Rear;
    return spriteset_Mail_6WheelCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_6WheelCoach_Liv3, 29122) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            5;
        cost_factor:                    20;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_Mail_6WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_6WHEELCOACH);
        introduction_date:                date(1864, 1, 1);

        speed:                            80 km/h;
        weight:                            17 ton;
        cargo_capacity:                    38/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_6WheelCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_6WheelCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_6WHEELCOACH);
}
}

//8WheelCoach_Liv1
spriteset(spriteset_8WheelCoach_Liv1_Purchase,   "gfx/8WheelCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_8WheelCoach_Liv1,   "gfx/8WheelCoach_Liv1.png") {template_6(7, 39)}
spriteset(spriteset_8WheelCoach_Liv1_Rear,   "gfx/8WheelCoach_Liv1.png") {template_6(7, 69)}

switch(FEAT_TRAINS, SELF, sw_8WheelCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_8WheelCoach_Liv1_Rear;
    return spriteset_8WheelCoach_Liv1;
}

item (FEAT_TRAINS, Item_8WheelCoach_Liv1, 29180) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            6;
        cost_factor:                    25;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_8WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_8WHEELCOACH);
        introduction_date:                date(1868, 1, 1);

        speed:                            80 km/h;
        weight:                            18 ton;
        cargo_capacity:                    45/param_capacity_mod;
    }
    graphics {
    default:                             sw_8WheelCoach_Liv1_rearcheck;
    purchase:                            spriteset_8WheelCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_8WHEELCOACH);
}
}

//Mail_8WheelCoach_Liv1
spriteset(spriteset_Mail_8WheelCoach_Liv1_Purchase,   "gfx/8WheelCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_8WheelCoach_Liv1,   "gfx/8WheelCoach_Liv1.png") {template_6(187, 39)}
spriteset(spriteset_Mail_8WheelCoach_Liv1_Rear,   "gfx/8WheelCoach_Liv1.png") {template_6(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_8WheelCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_8WheelCoach_Liv1_Rear;
    return spriteset_Mail_8WheelCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_8WheelCoach_Liv1, 29190) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            6;
        cost_factor:                    20;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_Mail_8WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_8WHEELCOACH);
        introduction_date:                date(1868, 1, 1);

        speed:                            80 km/h;
        weight:                            18 ton;
        cargo_capacity:                    45/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_8WheelCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_8WheelCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_8WHEELCOACH);
}
}

//8WheelCoach_Liv2
spriteset(spriteset_8WheelCoach_Liv2_Purchase,   "gfx/8WheelCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_8WheelCoach_Liv2,   "gfx/8WheelCoach_Liv2.png") {template_6(7, 39)}
spriteset(spriteset_8WheelCoach_Liv2_Rear,   "gfx/8WheelCoach_Liv2.png") {template_6(7, 69)}

switch(FEAT_TRAINS, SELF, sw_8WheelCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_8WheelCoach_Liv2_Rear;
    return spriteset_8WheelCoach_Liv2;
}

item (FEAT_TRAINS, Item_8WheelCoach_Liv2, 29181) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            6;
        cost_factor:                    25;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_8WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_8WHEELCOACH);
        introduction_date:                date(1868, 1, 1);

        speed:                            80 km/h;
        weight:                            18 ton;
        cargo_capacity:                    45/param_capacity_mod;
    }
    graphics {
    default:                             sw_8WheelCoach_Liv2_rearcheck;
    purchase:                            spriteset_8WheelCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_8WHEELCOACH);
}
}

//Mail_8WheelCoach_Liv2
spriteset(spriteset_Mail_8WheelCoach_Liv2_Purchase,   "gfx/8WheelCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_8WheelCoach_Liv2,   "gfx/8WheelCoach_Liv2.png") {template_6(187, 39)}
spriteset(spriteset_Mail_8WheelCoach_Liv2_Rear,   "gfx/8WheelCoach_Liv2.png") {template_6(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_8WheelCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_8WheelCoach_Liv2_Rear;
    return spriteset_Mail_8WheelCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_8WheelCoach_Liv2, 29191) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            6;
        cost_factor:                    20;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_Mail_8WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_8WHEELCOACH);
        introduction_date:                date(1868, 1, 1);

        speed:                            80 km/h;
        weight:                            18 ton;
        cargo_capacity:                    45/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_8WheelCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_8WheelCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_8WHEELCOACH);
}
}

//8WheelCoach_Liv3
spriteset(spriteset_8WheelCoach_Liv3_Purchase,   "gfx/8WheelCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_8WheelCoach_Liv3,   "gfx/8WheelCoach_Liv3.png") {template_6(7, 39)}
spriteset(spriteset_8WheelCoach_Liv3_Rear,   "gfx/8WheelCoach_Liv3.png") {template_6(7, 69)}

switch(FEAT_TRAINS, SELF, sw_8WheelCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_8WheelCoach_Liv3_Rear;
    return spriteset_8WheelCoach_Liv3;
}

item (FEAT_TRAINS, Item_8WheelCoach_Liv3, 29182) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            6;
        cost_factor:                    25;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_8WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_8WHEELCOACH);
        introduction_date:                date(1868, 1, 1);

        speed:                            80 km/h;
        weight:                            18 ton;
        cargo_capacity:                    45/param_capacity_mod;
    }
    graphics {
    default:                             sw_8WheelCoach_Liv3_rearcheck;
    purchase:                            spriteset_8WheelCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_8WHEELCOACH);
}
}

//Mail_8WheelCoach_Liv3
spriteset(spriteset_Mail_8WheelCoach_Liv3_Purchase,   "gfx/8WheelCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_8WheelCoach_Liv3,   "gfx/8WheelCoach_Liv3.png") {template_6(187, 39)}
spriteset(spriteset_Mail_8WheelCoach_Liv3_Rear,   "gfx/8WheelCoach_Liv3.png") {template_6(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_8WheelCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_8WheelCoach_Liv3_Rear;
    return spriteset_Mail_8WheelCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_8WheelCoach_Liv3, 29192) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            6;
        cost_factor:                    20;
        running_cost_factor:            2;
        loading_speed:                    15;

        variant_group: Item_Mail_8WheelCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_8WHEELCOACH);
        introduction_date:                date(1868, 1, 1);

        speed:                            80 km/h;
        weight:                            18 ton;
        cargo_capacity:                    45/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_8WheelCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_8WheelCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_8WHEELCOACH);
}
}

//AmericanCoach_Liv1
spriteset(spriteset_AmericanCoach_Liv1_Purchase,   "gfx/AmericanCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_AmericanCoach_Liv1,   "gfx/AmericanCoach_Liv1.png") {template_7(7, 39)}
spriteset(spriteset_AmericanCoach_Liv1_Rear,   "gfx/AmericanCoach_Liv1.png") {template_7(7, 69)}

switch(FEAT_TRAINS, SELF, sw_AmericanCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_AmericanCoach_Liv1_Rear;
    return spriteset_AmericanCoach_Liv1;
}

item (FEAT_TRAINS, Item_AmericanCoach_Liv1, 29200) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AmericanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_AMERICANCOACH);
        introduction_date:                date(1877, 1, 1);

        speed:                            80 km/h;
        weight:                            23 ton;
        cargo_capacity:                    50/param_capacity_mod;
    }
    graphics {
    default:                             sw_AmericanCoach_Liv1_rearcheck;
    purchase:                            spriteset_AmericanCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_AMERICANCOACH);
}
}

//Mail_AmericanCoach_Liv1
spriteset(spriteset_Mail_AmericanCoach_Liv1_Purchase,   "gfx/AmericanCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AmericanCoach_Liv1,   "gfx/AmericanCoach_Liv1.png") {template_7(187, 39)}
spriteset(spriteset_Mail_AmericanCoach_Liv1_Rear,   "gfx/AmericanCoach_Liv1.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_AmericanCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AmericanCoach_Liv1_Rear;
    return spriteset_Mail_AmericanCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_AmericanCoach_Liv1, 29210) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_Mail_AmericanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_AMERICANCOACH);
        introduction_date:                date(1877, 1, 1);

        speed:                            80 km/h;
        weight:                            23 ton;
        cargo_capacity:                    50/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AmericanCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_AmericanCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_AMERICANCOACH);
}
}

//AmericanCoach_Liv2
spriteset(spriteset_AmericanCoach_Liv2_Purchase,   "gfx/AmericanCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_AmericanCoach_Liv2,   "gfx/AmericanCoach_Liv2.png") {template_7(7, 39)}
spriteset(spriteset_AmericanCoach_Liv2_Rear,   "gfx/AmericanCoach_Liv2.png") {template_7(7, 69)}

switch(FEAT_TRAINS, SELF, sw_AmericanCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_AmericanCoach_Liv2_Rear;
    return spriteset_AmericanCoach_Liv2;
}

item (FEAT_TRAINS, Item_AmericanCoach_Liv2, 29201) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AmericanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_AMERICANCOACH);
        introduction_date:                date(1877, 1, 1);

        speed:                            80 km/h;
        weight:                            23 ton;
        cargo_capacity:                    50/param_capacity_mod;
    }
    graphics {
    default:                             sw_AmericanCoach_Liv2_rearcheck;
    purchase:                            spriteset_AmericanCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_AMERICANCOACH);
}
}

//Mail_AmericanCoach_Liv2
spriteset(spriteset_Mail_AmericanCoach_Liv2_Purchase,   "gfx/AmericanCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AmericanCoach_Liv2,   "gfx/AmericanCoach_Liv2.png") {template_7(187, 39)}
spriteset(spriteset_Mail_AmericanCoach_Liv2_Rear,   "gfx/AmericanCoach_Liv2.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_AmericanCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AmericanCoach_Liv2_Rear;
    return spriteset_Mail_AmericanCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_AmericanCoach_Liv2, 29211) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_Mail_AmericanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_AMERICANCOACH);
        introduction_date:                date(1877, 1, 1);

        speed:                            80 km/h;
        weight:                            23 ton;
        cargo_capacity:                    50/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AmericanCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_AmericanCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_AMERICANCOACH);
}
}

//AmericanCoach_Liv3
spriteset(spriteset_AmericanCoach_Liv3_Purchase,   "gfx/AmericanCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_AmericanCoach_Liv3,   "gfx/AmericanCoach_Liv3.png") {template_7(7, 39)}
spriteset(spriteset_AmericanCoach_Liv3_Rear,   "gfx/AmericanCoach_Liv3.png") {template_7(7, 69)}

switch(FEAT_TRAINS, SELF, sw_AmericanCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_AmericanCoach_Liv3_Rear;
    return spriteset_AmericanCoach_Liv3;
}

item (FEAT_TRAINS, Item_AmericanCoach_Liv3, 29202) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AmericanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_AMERICANCOACH);
        introduction_date:                date(1877, 1, 1);

        speed:                            80 km/h;
        weight:                            23 ton;
        cargo_capacity:                    50/param_capacity_mod;
    }
    graphics {
    default:                             sw_AmericanCoach_Liv3_rearcheck;
    purchase:                            spriteset_AmericanCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_AMERICANCOACH);
}
}

//Mail_AmericanCoach_Liv3
spriteset(spriteset_Mail_AmericanCoach_Liv3_Purchase,   "gfx/AmericanCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AmericanCoach_Liv3,   "gfx/AmericanCoach_Liv3.png") {template_7(187, 39)}
spriteset(spriteset_Mail_AmericanCoach_Liv3_Rear,   "gfx/AmericanCoach_Liv3.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_AmericanCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AmericanCoach_Liv3_Rear;
    return spriteset_Mail_AmericanCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_AmericanCoach_Liv3, 29212) {
    property {
        climates_available: (param_RealDisable == 0 && param_GenericPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_Mail_AmericanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_AMERICANCOACH);
        introduction_date:                date(1877, 1, 1);

        speed:                            80 km/h;
        weight:                            23 ton;
        cargo_capacity:                    50/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AmericanCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_AmericanCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_AMERICANCOACH);
}
}

//AmericanSuburbanCoach_Liv1
spriteset(spriteset_AmericanSuburbanCoach_Liv1_Purchase,   "gfx/AmericanSuburbanCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_AmericanSuburbanCoach_Liv1,   "gfx/AmericanSuburbanCoach_Liv1.png") {template_7(7, 39)}
spriteset(spriteset_AmericanSuburbanCoach_Liv1_Rear,   "gfx/AmericanSuburbanCoach_Liv1.png") {template_7(7, 69)}

switch(FEAT_TRAINS, SELF, sw_AmericanSuburbanCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_AmericanSuburbanCoach_Liv1_Rear;
    return spriteset_AmericanSuburbanCoach_Liv1;
}

item (FEAT_TRAINS, Item_AmericanSuburbanCoach_Liv1, 30400) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AmericanSuburbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_AMERICANSUBURBANCOACH);
        introduction_date:                date(1890, 1, 1);

        speed:                            80 km/h;
        weight:                            21 ton;
        cargo_capacity:                    62/param_capacity_mod;
    }
    graphics {
    default:                             sw_AmericanSuburbanCoach_Liv1_rearcheck;
    purchase:                            spriteset_AmericanSuburbanCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_AMERICANSUBURBANCOACH);
}
}

//AmericanSuburbanCoach_Liv2
spriteset(spriteset_AmericanSuburbanCoach_Liv2_Purchase,   "gfx/AmericanSuburbanCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_AmericanSuburbanCoach_Liv2,   "gfx/AmericanSuburbanCoach_Liv2.png") {template_7(7, 39)}
spriteset(spriteset_AmericanSuburbanCoach_Liv2_Rear,   "gfx/AmericanSuburbanCoach_Liv2.png") {template_7(7, 69)}

switch(FEAT_TRAINS, SELF, sw_AmericanSuburbanCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_AmericanSuburbanCoach_Liv2_Rear;
    return spriteset_AmericanSuburbanCoach_Liv2;
}

item (FEAT_TRAINS, Item_AmericanSuburbanCoach_Liv2, 30401) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AmericanSuburbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_AMERICANSUBURBANCOACH);
        introduction_date:                date(1890, 1, 1);

        speed:                            80 km/h;
        weight:                            21 ton;
        cargo_capacity:                    62/param_capacity_mod;
    }
    graphics {
    default:                             sw_AmericanSuburbanCoach_Liv2_rearcheck;
    purchase:                            spriteset_AmericanSuburbanCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_AMERICANSUBURBANCOACH);
}
}

//TaitCoach_Liv1
spriteset(spriteset_TaitCoach_Liv1_Purchase,   "gfx/TaitCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitCoach_Liv1,   "gfx/TaitCoach_Liv1.png") {template_8(7, 69)}
spriteset(spriteset_TaitCoach_Liv1_Lead,   "gfx/TaitCoach_Liv1.png") {template_8(7, 39)}
spriteset(spriteset_TaitCoach_Liv1_Rear,   "gfx/TaitCoach_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_TaitCoach_Liv1_leadcheck, position_in_vehid_chain){
    0 : spriteset_TaitCoach_Liv1_Lead;
    return spriteset_TaitCoach_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_TaitCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_TaitCoach_Liv1_Rear;
    return sw_TaitCoach_Liv1_leadcheck;
}

item (FEAT_TRAINS, Item_TaitCoach_Liv1, 30600) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    25;

        variant_group: Item_TaitCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TAITCOACH);
        introduction_date:                date(1910, 1, 1);

        speed:                            80 km/h;
        weight:                            32 ton;
        cargo_capacity:                   87/param_capacity_mod;
    }
    graphics {
    default:                             sw_TaitCoach_Liv1_rearcheck;
    purchase:                            spriteset_TaitCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_TAITCOACH);
}
}

//TaitCoach_Liv2
spriteset(spriteset_TaitCoach_Liv2_Purchase,   "gfx/TaitCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitCoach_Liv2,   "gfx/TaitCoach_Liv2.png") {template_8(7, 69)}
spriteset(spriteset_TaitCoach_Liv2_Lead,   "gfx/TaitCoach_Liv2.png") {template_8(7, 39)}
spriteset(spriteset_TaitCoach_Liv2_Rear,   "gfx/TaitCoach_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_TaitCoach_Liv2_leadcheck, position_in_vehid_chain){
    0 : spriteset_TaitCoach_Liv2_Lead;
    return spriteset_TaitCoach_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_TaitCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_TaitCoach_Liv2_Rear;
    return sw_TaitCoach_Liv2_leadcheck;
}

item (FEAT_TRAINS, Item_TaitCoach_Liv2, 30601) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    25;

        variant_group: Item_TaitCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TAITCOACH);
        introduction_date:                date(1910, 1, 1);

        speed:                            80 km/h;
        weight:                            32 ton;
        cargo_capacity:                   87/param_capacity_mod;
    }
    graphics {
    default:                             sw_TaitCoach_Liv2_rearcheck;
    purchase:                            spriteset_TaitCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_TAITCOACH);
}
}

//TaitCoach_Liv3
spriteset(spriteset_TaitCoach_Liv3_Purchase,   "gfx/TaitCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_TaitCoach_Liv3,   "gfx/TaitCoach_Liv3.png") {template_8(7, 69)}
spriteset(spriteset_TaitCoach_Liv3_Lead,   "gfx/TaitCoach_Liv3.png") {template_8(7, 39)}
spriteset(spriteset_TaitCoach_Liv3_Rear,   "gfx/TaitCoach_Liv3.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_TaitCoach_Liv3_leadcheck, position_in_vehid_chain){
    0 : spriteset_TaitCoach_Liv3_Lead;
    return spriteset_TaitCoach_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_TaitCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_TaitCoach_Liv3_Rear;
    return sw_TaitCoach_Liv3_leadcheck;
}

item (FEAT_TRAINS, Item_TaitCoach_Liv3, 30602) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    25;

        variant_group: Item_TaitCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TAITCOACH);
        introduction_date:                date(1910, 1, 1);

        speed:                            80 km/h;
        weight:                            32 ton;
        cargo_capacity:                   87/param_capacity_mod;
    }
    graphics {
    default:                             sw_TaitCoach_Liv3_rearcheck;
    purchase:                            spriteset_TaitCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_TAITCOACH);
}
}

//SXCoach_Liv1
spriteset(spriteset_SXCoach_Liv1_Purchase,   "gfx/SXCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_SXCoach_Liv1,   "gfx/SXCoach_Liv1.png") {template_7(7, 69)}
spriteset(spriteset_SXCoach_Liv1_Rear,   "gfx/SXCoach_Liv1.png") {template_7(7, 99)}

switch(FEAT_TRAINS, SELF, sw_SXCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_SXCoach_Liv1_Rear;
    return spriteset_SXCoach_Liv1;
}

item (FEAT_TRAINS, Item_SXCoach_Liv1, 31100) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_SXCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_SXCOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            115 km/h;
        weight:                            28 ton;
        cargo_capacity:                    82/param_capacity_mod;
    }
    graphics {
    default:                             sw_SXCoach_Liv1_rearcheck;
    purchase:                            spriteset_SXCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_SXCOACH);
}
}

//SXCoach_Liv1_Cab
spriteset(spriteset_SXCoach_Liv1_Cab_Purchase,   "gfx/SXCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_SXCoach_Liv1_Cab,   "gfx/SXCoach_Liv1.png") {template_7(187, 39)}
spriteset(spriteset_SXCoach_Liv1_Cab_Rear,   "gfx/SXCoach_Liv1.png") {template_7(187, 69)}

switch(FEAT_TRAINS, SELF, sw_SXCoach_Liv1_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_SXCoach_Liv1_Cab_Rear;
    return spriteset_SXCoach_Liv1_Cab;
}

item (FEAT_TRAINS, Item_SXCoach_Liv1_Cab, 31110) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            7;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_SXCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_SXCOACH_CAB);
        introduction_date:                date(1961, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            28 ton;
        cargo_capacity:                    82/param_capacity_mod;
    }
    graphics {
    default:                             sw_SXCoach_Liv1_Cab_rearcheck;
    purchase:                            spriteset_SXCoach_Liv1_Cab_Purchase;
    additional_text: string(STR_INFO_SXCOACH_CAB);
}
}

//SXCoach_Liv2
spriteset(spriteset_SXCoach_Liv2_Purchase,   "gfx/SXCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_SXCoach_Liv2,   "gfx/SXCoach_Liv2.png") {template_7(7, 69)}
spriteset(spriteset_SXCoach_Liv2_Rear,   "gfx/SXCoach_Liv2.png") {template_7(7, 99)}

switch(FEAT_TRAINS, SELF, sw_SXCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_SXCoach_Liv2_Rear;
    return spriteset_SXCoach_Liv2;
}

item (FEAT_TRAINS, Item_SXCoach_Liv2, 31101) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_SXCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_SXCOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            115 km/h;
        weight:                            28 ton;
        cargo_capacity:                    82/param_capacity_mod;
    }
    graphics {
    default:                             sw_SXCoach_Liv2_rearcheck;
    purchase:                            spriteset_SXCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_SXCOACH);
}
}

//SXCoach_Liv2_Cab
spriteset(spriteset_SXCoach_Liv2_Cab_Purchase,   "gfx/SXCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_SXCoach_Liv2_Cab,   "gfx/SXCoach_Liv2.png") {template_7(187, 39)}
spriteset(spriteset_SXCoach_Liv2_Cab_Rear,   "gfx/SXCoach_Liv2.png") {template_7(187, 69)}

switch(FEAT_TRAINS, SELF, sw_SXCoach_Liv2_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_SXCoach_Liv2_Cab_Rear;
    return spriteset_SXCoach_Liv2_Cab;
}

item (FEAT_TRAINS, Item_SXCoach_Liv2_Cab, 31111) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            7;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_SXCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_SXCOACH_CAB);
        introduction_date:                date(1961, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            28 ton;
        cargo_capacity:                    82/param_capacity_mod;
    }
    graphics {
    default:                             sw_SXCoach_Liv2_Cab_rearcheck;
    purchase:                            spriteset_SXCoach_Liv2_Cab_Purchase;
    additional_text: string(STR_INFO_SXCOACH_CAB);
}
}

//SXCoach_Liv3
spriteset(spriteset_SXCoach_Liv3_Purchase,   "gfx/SXCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_SXCoach_Liv3,   "gfx/SXCoach_Liv3.png") {template_7(7, 69)}
spriteset(spriteset_SXCoach_Liv3_Rear,   "gfx/SXCoach_Liv3.png") {template_7(7, 99)}

switch(FEAT_TRAINS, SELF, sw_SXCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_SXCoach_Liv3_Rear;
    return spriteset_SXCoach_Liv3;
}

item (FEAT_TRAINS, Item_SXCoach_Liv3, 31102) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_SXCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_SXCOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            115 km/h;
        weight:                            28 ton;
        cargo_capacity:                    82/param_capacity_mod;
    }
    graphics {
    default:                             sw_SXCoach_Liv3_rearcheck;
    purchase:                            spriteset_SXCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_SXCOACH);
}
}

//SXCoach_Liv3_Cab
spriteset(spriteset_SXCoach_Liv3_Cab_Purchase,   "gfx/SXCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_SXCoach_Liv3_Cab,   "gfx/SXCoach_Liv3.png") {template_7(187, 39)}
spriteset(spriteset_SXCoach_Liv3_Cab_Rear,   "gfx/SXCoach_Liv3.png") {template_7(187, 69)}

switch(FEAT_TRAINS, SELF, sw_SXCoach_Liv3_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_SXCoach_Liv3_Cab_Rear;
    return spriteset_SXCoach_Liv3_Cab;
}

item (FEAT_TRAINS, Item_SXCoach_Liv3_Cab, 31112) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            7;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_SXCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_SXCOACH_CAB);
        introduction_date:                date(1961, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            28 ton;
        cargo_capacity:                    82/param_capacity_mod;
    }
    graphics {
    default:                             sw_SXCoach_Liv3_Cab_rearcheck;
    purchase:                            spriteset_SXCoach_Liv3_Cab_Purchase;
    additional_text: string(STR_INFO_SXCOACH_CAB);
}
}

//HType_Liv1
spriteset(spriteset_HType_Liv1_Purchase,   "gfx/HType_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_HType_Liv1,   "gfx/HType_Liv1.png") {template_8(7, 39)}
spriteset(spriteset_HType_Liv1_MTHRear,   "gfx/HType_Liv1.png") {template_8(7, 69)}
spriteset(spriteset_HType_Liv1_Rear,   "gfx/HType_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv1_Rear;
    return spriteset_HType_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv1_MTHrearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv1_MTHRear;
    return spriteset_HType_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv1_MTHCheck, num_vehs_in_vehid_chain){
    1..2 : sw_HType_Liv1_MTHrearcheck;
    return sw_HType_Liv1_rearcheck;
}

item (FEAT_TRAINS, Item_HType_Liv1, 31300) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE);
        introduction_date:                date(1984, 1, 1);

        speed:                            115 km/h;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv1_MTHCheck;
    purchase:                            spriteset_HType_Liv1_Purchase;
    additional_text: string(STR_INFO_HTYPE);
}
}

//HType_Liv1_Cab
spriteset(spriteset_HType_Liv1_Cab_Purchase,   "gfx/HType_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_HType_Liv1_Cab,   "gfx/HType_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_HType_Liv1_Cab_Rear,   "gfx/HType_Liv1.png") {template_8(187, 69)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv1_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv1_Cab_Rear;
    return spriteset_HType_Liv1_Cab;
}

item (FEAT_TRAINS, Item_HType_Liv1_Cab, 31310) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE_CAB);
        introduction_date:                date(1984, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv1_Cab_rearcheck;
    purchase:                            spriteset_HType_Liv1_Cab_Purchase;
    additional_text: string(STR_INFO_HTYPE_CAB);
}
}

//HType_Liv2
spriteset(spriteset_HType_Liv2_Purchase,   "gfx/HType_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_HType_Liv2,   "gfx/HType_Liv2.png") {template_8(7, 39)}
spriteset(spriteset_HType_Liv2_MTHRear,   "gfx/HType_Liv2.png") {template_8(7, 69)}
spriteset(spriteset_HType_Liv2_Rear,   "gfx/HType_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv2_Rear;
    return spriteset_HType_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv2_MTHrearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv2_MTHRear;
    return spriteset_HType_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv2_MTHCheck, num_vehs_in_vehid_chain){
    1..2 : sw_HType_Liv2_MTHrearcheck;
    return sw_HType_Liv2_rearcheck;
}

item (FEAT_TRAINS, Item_HType_Liv2, 31301) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE);
        introduction_date:                date(1984, 1, 1);

        speed:                            115 km/h;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv2_MTHCheck;
    purchase:                            spriteset_HType_Liv2_Purchase;
    additional_text: string(STR_INFO_HTYPE);
}
}

//HType_Liv2_Cab
spriteset(spriteset_HType_Liv2_Cab_Purchase,   "gfx/HType_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_HType_Liv2_Cab,   "gfx/HType_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_HType_Liv2_Cab_Rear,   "gfx/HType_Liv2.png") {template_8(187, 69)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv2_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv2_Cab_Rear;
    return spriteset_HType_Liv2_Cab;
}

item (FEAT_TRAINS, Item_HType_Liv2_Cab, 31311) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE_CAB);
        introduction_date:                date(1984, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv2_Cab_rearcheck;
    purchase:                            spriteset_HType_Liv2_Cab_Purchase;
    additional_text: string(STR_INFO_HTYPE_CAB);
}
}

//HType_Liv3
spriteset(spriteset_HType_Liv3_Purchase,   "gfx/HType_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_HType_Liv3,   "gfx/HType_Liv3.png") {template_8(7, 39)}
spriteset(spriteset_HType_Liv3_MTHRear,   "gfx/HType_Liv3.png") {template_8(7, 69)}
spriteset(spriteset_HType_Liv3_Rear,   "gfx/HType_Liv3.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv3_Rear;
    return spriteset_HType_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv3_MTHrearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv3_MTHRear;
    return spriteset_HType_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv3_MTHCheck, num_vehs_in_vehid_chain){
    1..2 : sw_HType_Liv3_MTHrearcheck;
    return sw_HType_Liv3_rearcheck;
}

item (FEAT_TRAINS, Item_HType_Liv3, 31302) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE);
        introduction_date:                date(1984, 1, 1);

        speed:                            115 km/h;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv3_MTHCheck;
    purchase:                            spriteset_HType_Liv3_Purchase;
    additional_text: string(STR_INFO_HTYPE);
}
}

//HType_Liv3_Cab
spriteset(spriteset_HType_Liv3_Cab_Purchase,   "gfx/HType_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_HType_Liv3_Cab,   "gfx/HType_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_HType_Liv3_Cab_Rear,   "gfx/HType_Liv3.png") {template_8(187, 69)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv3_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv3_Cab_Rear;
    return spriteset_HType_Liv3_Cab;
}

item (FEAT_TRAINS, Item_HType_Liv3_Cab, 31312) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE_CAB);
        introduction_date:                date(1984, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv3_Cab_rearcheck;
    purchase:                            spriteset_HType_Liv3_Cab_Purchase;
    additional_text: string(STR_INFO_HTYPE_CAB);
}
}

//HType_Liv4
spriteset(spriteset_HType_Liv4_Purchase,   "gfx/HType_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_HType_Liv4,   "gfx/HType_Liv4.png") {template_8(7, 39)}
spriteset(spriteset_HType_Liv4_MTHRear,   "gfx/HType_Liv4.png") {template_8(7, 69)}
spriteset(spriteset_HType_Liv4_Rear,   "gfx/HType_Liv4.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv4_Rear;
    return spriteset_HType_Liv4;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv4_MTHrearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv4_MTHRear;
    return spriteset_HType_Liv4;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv4_MTHCheck, num_vehs_in_vehid_chain){
    1..2 : sw_HType_Liv4_MTHrearcheck;
    return sw_HType_Liv4_rearcheck;
}

item (FEAT_TRAINS, Item_HType_Liv4, 31303) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE);
        introduction_date:                date(1984, 1, 1);

        speed:                            115 km/h;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv4_MTHCheck;
    purchase:                            spriteset_HType_Liv4_Purchase;
    additional_text: string(STR_INFO_HTYPE);
}
}

//HType_Liv4_Cab
spriteset(spriteset_HType_Liv4_Cab_Purchase,   "gfx/HType_Liv4.png") {template_purchase(187, 21)}
spriteset(spriteset_HType_Liv4_Cab,   "gfx/HType_Liv4.png") {template_8(187, 39)}
spriteset(spriteset_HType_Liv4_Cab_Rear,   "gfx/HType_Liv4.png") {template_8(187, 69)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv4_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv4_Cab_Rear;
    return spriteset_HType_Liv4_Cab;
}

item (FEAT_TRAINS, Item_HType_Liv4_Cab, 31313) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE_CAB);
        introduction_date:                date(1984, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv4_Cab_rearcheck;
    purchase:                            spriteset_HType_Liv4_Cab_Purchase;
    additional_text: string(STR_INFO_HTYPE_CAB);
}
}

//HType_Liv5
spriteset(spriteset_HType_Liv5_Purchase,   "gfx/HType_Liv5.png") {template_purchase(7, 21)}
spriteset(spriteset_HType_Liv5,   "gfx/HType_Liv5.png") {template_8(7, 39)}
spriteset(spriteset_HType_Liv5_MTHRear,   "gfx/HType_Liv5.png") {template_8(7, 69)}
spriteset(spriteset_HType_Liv5_Rear,   "gfx/HType_Liv5.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv5_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv5_Rear;
    return spriteset_HType_Liv5;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv5_MTHrearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv5_MTHRear;
    return spriteset_HType_Liv5;
}

switch(FEAT_TRAINS, SELF, sw_HType_Liv5_MTHCheck, num_vehs_in_vehid_chain){
    1..2 : sw_HType_Liv5_MTHrearcheck;
    return sw_HType_Liv5_rearcheck;
}

item (FEAT_TRAINS, Item_HType_Liv5, 31304) {
    property {
        climates_available: (param_RealDisable == 0 && param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE);
        introduction_date:                date(1984, 1, 1);

        speed:                            115 km/h;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv5_MTHCheck;
    purchase:                            spriteset_HType_Liv5_Purchase;
    additional_text: string(STR_INFO_HTYPE);
}
}

//HType_Liv5_Cab
spriteset(spriteset_HType_Liv5_Cab_Purchase,   "gfx/HType_Liv5.png") {template_purchase(187, 21)}
spriteset(spriteset_HType_Liv5_Cab,   "gfx/HType_Liv5.png") {template_8(187, 39)}
spriteset(spriteset_HType_Liv5_Cab_Rear,   "gfx/HType_Liv5.png") {template_8(187, 69)}

switch(FEAT_TRAINS, SELF, sw_HType_Liv5_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_HType_Liv5_Cab_Rear;
    return spriteset_HType_Liv5_Cab;
}

item (FEAT_TRAINS, Item_HType_Liv5_Cab, 31314) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_SuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    30;

        variant_group: Item_HType_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_HTYPE_CAB);
        introduction_date:                date(1984, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            115 km/h;
        power:                            1 hp;
        weight:                            33 ton;
        cargo_capacity:                    127/param_capacity_mod;
    }
    graphics {
    default:                             sw_HType_Liv5_Cab_rearcheck;
    purchase:                            spriteset_HType_Liv5_Cab_Purchase;
    additional_text: string(STR_INFO_HTYPE_CAB);
}
}

//TullochDoubleDeckers
spriteset(spriteset_TullochDoubleDeckers_Purchase,   "gfx/TullochDoubleDeckers.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDoubleDeckers,   "gfx/TullochDoubleDeckers.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochDoubleDeckers_Rear,   "gfx/TullochDoubleDeckers.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_TullochDoubleDeckers_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochDoubleDeckers_Rear;
    return spriteset_TullochDoubleDeckers;
}

item (FEAT_TRAINS, Item_TullochDoubleDeckers, 33100) {
    property {
        climates_available: (param_RealDisable == 0 && param_DDSuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    30;

//        variant_group: Item_TullochDoubleDeckers;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHDOUBLEDECKERS);
        introduction_date:                date(1964, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    150/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochDoubleDeckers_rearcheck;
    purchase:                            spriteset_TullochDoubleDeckers_Purchase;
    additional_text: string(STR_INFO_TULLOCHDOUBLEDECKERS);
}
}



//TullochDoubleDeckers_PTC1
spriteset(spriteset_TullochDoubleDeckers_PTC1_Purchase,   "gfx/TullochDoubleDeckers_PTC1.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDoubleDeckers_PTC1,   "gfx/TullochDoubleDeckers_PTC1.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochDoubleDeckers_PTC1_Rear,   "gfx/TullochDoubleDeckers_PTC1.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_TullochDoubleDeckers_PTC1_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochDoubleDeckers_PTC1_Rear;
    return spriteset_TullochDoubleDeckers_PTC1;
}

item (FEAT_TRAINS, Item_TullochDoubleDeckers_PTC1, 33101) {
    property {
        climates_available: (param_RealDisable == 0 && param_DDSuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_TullochDoubleDeckers;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHDOUBLEDECKERS);
        introduction_date:                date(1964, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    150/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochDoubleDeckers_PTC1_rearcheck;
    purchase:                            spriteset_TullochDoubleDeckers_PTC1_Purchase;
    additional_text: string(STR_INFO_TULLOCHDOUBLEDECKERS);
}
}

//TullochDoubleDeckers_PTC2
spriteset(spriteset_TullochDoubleDeckers_PTC2_Purchase,   "gfx/TullochDoubleDeckers_PTC2.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDoubleDeckers_PTC2,   "gfx/TullochDoubleDeckers_PTC2.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochDoubleDeckers_PTC2_Rear,   "gfx/TullochDoubleDeckers_PTC2.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_TullochDoubleDeckers_PTC2_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochDoubleDeckers_PTC2_Rear;
    return spriteset_TullochDoubleDeckers_PTC2;
}

item (FEAT_TRAINS, Item_TullochDoubleDeckers_PTC2, 33102) {
    property {
        climates_available: (param_RealDisable == 0 && param_DDSuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_TullochDoubleDeckers;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHDOUBLEDECKERS);
        introduction_date:                date(1964, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    150/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochDoubleDeckers_PTC2_rearcheck;
    purchase:                            spriteset_TullochDoubleDeckers_PTC2_Purchase;
    additional_text: string(STR_INFO_TULLOCHDOUBLEDECKERS);
}
}

//TullochDoubleDeckers_Bare
spriteset(spriteset_TullochDoubleDeckers_Bare_Purchase,   "gfx/TullochDoubleDeckers_Bare.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDoubleDeckers_Bare,   "gfx/TullochDoubleDeckers_Bare.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochDoubleDeckers_Bare_Rear,   "gfx/TullochDoubleDeckers_Bare.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_TullochDoubleDeckers_Bare_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochDoubleDeckers_Bare_Rear;
    return spriteset_TullochDoubleDeckers_Bare;
}

item (FEAT_TRAINS, Item_TullochDoubleDeckers_Bare, 33103) {
    property {
        climates_available: (param_RealDisable == 0 && param_DDSuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_TullochDoubleDeckers;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHDOUBLEDECKERS);
        introduction_date:                date(1964, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    150/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochDoubleDeckers_Bare_rearcheck;
    purchase:                            spriteset_TullochDoubleDeckers_Bare_Purchase;
    additional_text: string(STR_INFO_TULLOCHDOUBLEDECKERS);
}
}

//TullochDoubleDeckers_Cityrail
spriteset(spriteset_TullochDoubleDeckers_Cityrail_Purchase,   "gfx/TullochDoubleDeckers_Cityrail.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochDoubleDeckers_Cityrail,   "gfx/TullochDoubleDeckers_Cityrail.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochDoubleDeckers_Cityrail_Rear,   "gfx/TullochDoubleDeckers_Cityrail.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_TullochDoubleDeckers_Cityrail_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochDoubleDeckers_Cityrail_Rear;
    return spriteset_TullochDoubleDeckers_Cityrail;
}

item (FEAT_TRAINS, Item_TullochDoubleDeckers_Cityrail, 33104) {
    property {
        climates_available: (param_RealDisable == 0 && param_DDSuburbanPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    30;

        variant_group: Item_TullochDoubleDeckers;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHDOUBLEDECKERS);
        introduction_date:                date(1964, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    150/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochDoubleDeckers_Cityrail_rearcheck;
    purchase:                            spriteset_TullochDoubleDeckers_Cityrail_Purchase;
    additional_text: string(STR_INFO_TULLOCHDOUBLEDECKERS);
}
}



//AshburyCoach
spriteset(spriteset_AshburyCoach_Purchase,   "gfx/AshburyCoach.png") {template_purchase(7, 21)}
spriteset(spriteset_AshburyCoach,   "gfx/AshburyCoach.png") {template_old_7(7, 39)}
spriteset(spriteset_AshburyCoach_Rear,   "gfx/AshburyCoach.png") {template_old_7(7, 64)}

switch(FEAT_TRAINS, SELF, sw_AshburyCoach_rearcheck, position_in_consist_from_end){
    0 : spriteset_AshburyCoach_Rear;
    return spriteset_AshburyCoach;
}

item (FEAT_TRAINS, Item_AshburyCoach, 40240) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

//        variant_group: Item_AshburyCoach;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_AshburyCoach_rearcheck;
    purchase:                            spriteset_AshburyCoach_Purchase;
    additional_text: string(STR_INFO_ASHBURYCOACH);
}
}

//Mail_AshburyCoach
spriteset(spriteset_Mail_AshburyCoach_Purchase,   "gfx/AshburyCoach.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AshburyCoach,   "gfx/AshburyCoach.png") {template_old_7(187, 39)}
spriteset(spriteset_Mail_AshburyCoach_Rear,   "gfx/AshburyCoach.png") {template_old_7(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_AshburyCoach_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AshburyCoach_Rear;
    return spriteset_Mail_AshburyCoach;
}

item (FEAT_TRAINS, Item_Mail_AshburyCoach, 40250) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

//        variant_group: Item_Mail_AshburyCoach;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AshburyCoach_rearcheck;
    purchase:                            spriteset_Mail_AshburyCoach_Purchase;
    additional_text: string(STR_INFO_MAIL_ASHBURYCOACH);
}
}

//AshburyCoach_Liv1
spriteset(spriteset_AshburyCoach_Liv1_Purchase,   "gfx/AshburyCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_AshburyCoach_Liv1,   "gfx/AshburyCoach_Liv1.png") {template_old_7(7, 39)}
spriteset(spriteset_AshburyCoach_Liv1_Rear,   "gfx/AshburyCoach_Liv1.png") {template_old_7(7, 64)}

switch(FEAT_TRAINS, SELF, sw_AshburyCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_AshburyCoach_Liv1_Rear;
    return spriteset_AshburyCoach_Liv1;
}

item (FEAT_TRAINS, Item_AshburyCoach_Liv1, 40241) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AshburyCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_AshburyCoach_Liv1_rearcheck;
    purchase:                            spriteset_AshburyCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_ASHBURYCOACH);
}
}

//Mail_AshburyCoach_Liv1
spriteset(spriteset_Mail_AshburyCoach_Liv1_Purchase,   "gfx/AshburyCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AshburyCoach_Liv1,   "gfx/AshburyCoach_Liv1.png") {template_old_7(187, 39)}
spriteset(spriteset_Mail_AshburyCoach_Liv1_Rear,   "gfx/AshburyCoach_Liv1.png") {template_old_7(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_AshburyCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AshburyCoach_Liv1_Rear;
    return spriteset_Mail_AshburyCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_AshburyCoach_Liv1, 40251) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_Mail_AshburyCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AshburyCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_AshburyCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_ASHBURYCOACH);
}
}

//AshburyCoach_Liv2
spriteset(spriteset_AshburyCoach_Liv2_Purchase,   "gfx/AshburyCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_AshburyCoach_Liv2,   "gfx/AshburyCoach_Liv2.png") {template_old_7(7, 39)}
spriteset(spriteset_AshburyCoach_Liv2_Rear,   "gfx/AshburyCoach_Liv2.png") {template_old_7(7, 64)}

switch(FEAT_TRAINS, SELF, sw_AshburyCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_AshburyCoach_Liv2_Rear;
    return spriteset_AshburyCoach_Liv2;
}

item (FEAT_TRAINS, Item_AshburyCoach_Liv2, 40242) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AshburyCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_AshburyCoach_Liv2_rearcheck;
    purchase:                            spriteset_AshburyCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_ASHBURYCOACH);
}
}

//Mail_AshburyCoach_Liv2
spriteset(spriteset_Mail_AshburyCoach_Liv2_Purchase,   "gfx/AshburyCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AshburyCoach_Liv2,   "gfx/AshburyCoach_Liv2.png") {template_old_7(187, 39)}
spriteset(spriteset_Mail_AshburyCoach_Liv2_Rear,   "gfx/AshburyCoach_Liv2.png") {template_old_7(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_AshburyCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AshburyCoach_Liv2_Rear;
    return spriteset_Mail_AshburyCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_AshburyCoach_Liv2, 40252) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_Mail_AshburyCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AshburyCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_AshburyCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_ASHBURYCOACH);
}
}

//AshburyCoach_Liv3
spriteset(spriteset_AshburyCoach_Liv3_Purchase,   "gfx/AshburyCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_AshburyCoach_Liv3,   "gfx/AshburyCoach_Liv3.png") {template_old_7(7, 39)}
spriteset(spriteset_AshburyCoach_Liv3_Rear,   "gfx/AshburyCoach_Liv3.png") {template_old_7(7, 64)}

switch(FEAT_TRAINS, SELF, sw_AshburyCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_AshburyCoach_Liv3_Rear;
    return spriteset_AshburyCoach_Liv3;
}

item (FEAT_TRAINS, Item_AshburyCoach_Liv3, 40243) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    27;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_AshburyCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_AshburyCoach_Liv3_rearcheck;
    purchase:                            spriteset_AshburyCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_ASHBURYCOACH);
}
}

//Mail_AshburyCoach_Liv3
spriteset(spriteset_Mail_AshburyCoach_Liv3_Purchase,   "gfx/AshburyCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_AshburyCoach_Liv3,   "gfx/AshburyCoach_Liv3.png") {template_old_7(187, 39)}
spriteset(spriteset_Mail_AshburyCoach_Liv3_Rear,   "gfx/AshburyCoach_Liv3.png") {template_old_7(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_AshburyCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_AshburyCoach_Liv3_Rear;
    return spriteset_Mail_AshburyCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_AshburyCoach_Liv3, 40253) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    25;
        running_cost_factor:            3;
        loading_speed:                    15;

        variant_group: Item_Mail_AshburyCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_ASHBURYCOACH);
        introduction_date:                date(1879, 1, 1);

        speed:                            95 km/h;
        weight:                            30 ton;
        cargo_capacity:                    48/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_AshburyCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_AshburyCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_ASHBURYCOACH);
}
}

//VictorianInterstateCoach_Liv1
spriteset(spriteset_VictorianInterstateCoach_Liv1_Purchase,   "gfx/VictorianInterstateCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateCoach_Liv1,   "gfx/VictorianInterstateCoach_Liv1.png") {template_8(7, 39)}
spriteset(spriteset_VictorianInterstateCoach_Liv1_Diner,   "gfx/VictorianInterstateCoach_Liv1.png") {template_8(7, 69)}
spriteset(spriteset_VictorianInterstateCoach_Liv1_Rear,   "gfx/VictorianInterstateCoach_Liv1.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VictorianInterstateCoach_Liv1_Diner;
  spriteset_VictorianInterstateCoach_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateCoach_Liv1_Rear;
    return sw_VictorianInterstateCoach_Liv1_dinerposition;
}

item (FEAT_TRAINS, Item_VictorianInterstateCoach_Liv1, 40500) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    5;

        variant_group: Item_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            45 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateCoach_Liv1_rearcheck;
    purchase:                            spriteset_VictorianInterstateCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATECOACH);
}
}

//Mail_VictorianInterstateCoach_Liv1
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv1_Purchase,   "gfx/VictorianInterstateCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv1,   "gfx/VictorianInterstateCoach_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv1_Rear,   "gfx/VictorianInterstateCoach_Liv1.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_VictorianInterstateCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VictorianInterstateCoach_Liv1_Rear;
    return spriteset_Mail_VictorianInterstateCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_VictorianInterstateCoach_Liv1, 40510) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_Mail_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VictorianInterstateCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_VictorianInterstateCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_VICTORIANINTERSTATECOACH);
}
}

//VictorianInterstateCoach_Liv2
spriteset(spriteset_VictorianInterstateCoach_Liv2_Purchase,   "gfx/VictorianInterstateCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateCoach_Liv2,   "gfx/VictorianInterstateCoach_Liv2.png") {template_8(7, 39)}
spriteset(spriteset_VictorianInterstateCoach_Liv2_Diner,   "gfx/VictorianInterstateCoach_Liv2.png") {template_8(7, 69)}
spriteset(spriteset_VictorianInterstateCoach_Liv2_Rear,   "gfx/VictorianInterstateCoach_Liv2.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VictorianInterstateCoach_Liv2_Diner;
  spriteset_VictorianInterstateCoach_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateCoach_Liv2_Rear;
    return sw_VictorianInterstateCoach_Liv2_dinerposition;
}

item (FEAT_TRAINS, Item_VictorianInterstateCoach_Liv2, 40501) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    5;

        variant_group: Item_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            45 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateCoach_Liv2_rearcheck;
    purchase:                            spriteset_VictorianInterstateCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATECOACH);
}
}

//Mail_VictorianInterstateCoach_Liv2
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv2_Purchase,   "gfx/VictorianInterstateCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv2,   "gfx/VictorianInterstateCoach_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv2_Rear,   "gfx/VictorianInterstateCoach_Liv2.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_VictorianInterstateCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VictorianInterstateCoach_Liv2_Rear;
    return spriteset_Mail_VictorianInterstateCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_VictorianInterstateCoach_Liv2, 40511) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_Mail_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VictorianInterstateCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_VictorianInterstateCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_VICTORIANINTERSTATECOACH);
}
}

//VictorianInterstateCoach_Liv3
spriteset(spriteset_VictorianInterstateCoach_Liv3_Purchase,   "gfx/VictorianInterstateCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateCoach_Liv3,   "gfx/VictorianInterstateCoach_Liv3.png") {template_8(7, 39)}
spriteset(spriteset_VictorianInterstateCoach_Liv3_Diner,   "gfx/VictorianInterstateCoach_Liv3.png") {template_8(7, 69)}
spriteset(spriteset_VictorianInterstateCoach_Liv3_Rear,   "gfx/VictorianInterstateCoach_Liv3.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VictorianInterstateCoach_Liv3_Diner;
  spriteset_VictorianInterstateCoach_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateCoach_Liv3_Rear;
    return sw_VictorianInterstateCoach_Liv3_dinerposition;
}

item (FEAT_TRAINS, Item_VictorianInterstateCoach_Liv3, 40502) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    5;

        variant_group: Item_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            45 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateCoach_Liv3_rearcheck;
    purchase:                            spriteset_VictorianInterstateCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATECOACH);
}
}

//Mail_VictorianInterstateCoach_Liv3
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv3_Purchase,   "gfx/VictorianInterstateCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv3,   "gfx/VictorianInterstateCoach_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv3_Rear,   "gfx/VictorianInterstateCoach_Liv3.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_VictorianInterstateCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VictorianInterstateCoach_Liv3_Rear;
    return spriteset_Mail_VictorianInterstateCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_VictorianInterstateCoach_Liv3, 40512) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_Mail_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VictorianInterstateCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_VictorianInterstateCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_VICTORIANINTERSTATECOACH);
}
}

//VictorianInterstateCoach_Liv4
spriteset(spriteset_VictorianInterstateCoach_Liv4_Purchase,   "gfx/VictorianInterstateCoach_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateCoach_Liv4,   "gfx/VictorianInterstateCoach_Liv4.png") {template_8(7, 39)}
spriteset(spriteset_VictorianInterstateCoach_Liv4_Diner,   "gfx/VictorianInterstateCoach_Liv4.png") {template_8(7, 69)}
spriteset(spriteset_VictorianInterstateCoach_Liv4_Rear,   "gfx/VictorianInterstateCoach_Liv4.png") {template_8(7, 99)}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv4_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VictorianInterstateCoach_Liv4_Diner;
  spriteset_VictorianInterstateCoach_Liv4;
}

switch(FEAT_TRAINS, SELF, sw_VictorianInterstateCoach_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateCoach_Liv4_Rear;
    return sw_VictorianInterstateCoach_Liv4_dinerposition;
}

item (FEAT_TRAINS, Item_VictorianInterstateCoach_Liv4, 40503) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    65;
        running_cost_factor:            3;
        loading_speed:                    5;

        variant_group: Item_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            45 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateCoach_Liv4_rearcheck;
    purchase:                            spriteset_VictorianInterstateCoach_Liv4_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATECOACH);
}
}

//Mail_VictorianInterstateCoach_Liv4
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv4_Purchase,   "gfx/VictorianInterstateCoach_Liv4.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv4,   "gfx/VictorianInterstateCoach_Liv4.png") {template_8(187, 39)}
spriteset(spriteset_Mail_VictorianInterstateCoach_Liv4_Rear,   "gfx/VictorianInterstateCoach_Liv4.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_VictorianInterstateCoach_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VictorianInterstateCoach_Liv4_Rear;
    return spriteset_Mail_VictorianInterstateCoach_Liv4;
}

item (FEAT_TRAINS, Item_Mail_VictorianInterstateCoach_Liv4, 40513) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_Mail_VictorianInterstateCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VICTORIANINTERSTATECOACH);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            40 ton;
        cargo_capacity:                    65/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VictorianInterstateCoach_Liv4_rearcheck;
    purchase:                            spriteset_Mail_VictorianInterstateCoach_Liv4_Purchase;
    additional_text: string(STR_INFO_MAIL_VICTORIANINTERSTATECOACH);
}
}

//NSWRType_Liv1
spriteset(spriteset_NSWRType_Liv1_Purchase,   "gfx/NSWRType_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_NSWRType_Liv1,   "gfx/NSWRType_Liv1.png") {template_7(7, 99)}
spriteset(spriteset_NSWRType_Liv1_Lead,   "gfx/NSWRType_Liv1.png") {template_7(7, 39)}
spriteset(spriteset_NSWRType_Liv1_Diner,   "gfx/NSWRType_Liv1.png") {template_7(7, 69)}
spriteset(spriteset_NSWRType_Liv1_Rear,   "gfx/NSWRType_Liv1.png") {template_7(7, 129)}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_NSWRType_Liv1_Diner;
  spriteset_NSWRType_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv1_leadcheck, position_in_vehid_chain){
    0 : spriteset_NSWRType_Liv1_Lead;
    return sw_NSWRType_Liv1_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_NSWRType_Liv1_Rear;
    return sw_NSWRType_Liv1_leadcheck;
}

item (FEAT_TRAINS, Item_NSWRType_Liv1, 40800) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_NSWRType_Liv1_rearcheck;
    purchase:                            spriteset_NSWRType_Liv1_Purchase;
    additional_text: string(STR_INFO_NSWRTYPE);
}
}

//Mail_NSWRType_Liv1
spriteset(spriteset_Mail_NSWRType_Liv1_Purchase,   "gfx/NSWRType_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_NSWRType_Liv1,   "gfx/NSWRType_Liv1.png") {template_7(187, 39)}
spriteset(spriteset_Mail_NSWRType_Liv1_Rear,   "gfx/NSWRType_Liv1.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_NSWRType_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_NSWRType_Liv1_Rear;
    return spriteset_Mail_NSWRType_Liv1;
}

item (FEAT_TRAINS, Item_Mail_NSWRType_Liv1, 40810) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    60;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_NSWRType_Liv1_rearcheck;
    purchase:                            spriteset_Mail_NSWRType_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_NSWRTYPE);
}
}

//NSWRType_Liv2
spriteset(spriteset_NSWRType_Liv2_Purchase,   "gfx/NSWRType_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_NSWRType_Liv2,   "gfx/NSWRType_Liv2.png") {template_7(7, 99)}
spriteset(spriteset_NSWRType_Liv2_Lead,   "gfx/NSWRType_Liv2.png") {template_7(7, 39)}
spriteset(spriteset_NSWRType_Liv2_Diner,   "gfx/NSWRType_Liv2.png") {template_7(7, 69)}
spriteset(spriteset_NSWRType_Liv2_Rear,   "gfx/NSWRType_Liv2.png") {template_7(7, 129)}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_NSWRType_Liv2_Diner;
  spriteset_NSWRType_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv2_leadcheck, position_in_vehid_chain){
    0 : spriteset_NSWRType_Liv2_Lead;
    return sw_NSWRType_Liv2_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_NSWRType_Liv2_Rear;
    return sw_NSWRType_Liv2_leadcheck;
}

item (FEAT_TRAINS, Item_NSWRType_Liv2, 40801) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_NSWRType_Liv2_rearcheck;
    purchase:                            spriteset_NSWRType_Liv2_Purchase;
    additional_text: string(STR_INFO_NSWRTYPE);
}
}

//Mail_NSWRType_Liv2
spriteset(spriteset_Mail_NSWRType_Liv2_Purchase,   "gfx/NSWRType_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_NSWRType_Liv2,   "gfx/NSWRType_Liv2.png") {template_7(187, 39)}
spriteset(spriteset_Mail_NSWRType_Liv2_Rear,   "gfx/NSWRType_Liv2.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_NSWRType_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_NSWRType_Liv2_Rear;
    return spriteset_Mail_NSWRType_Liv2;
}

item (FEAT_TRAINS, Item_Mail_NSWRType_Liv2, 40811) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    60;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_NSWRType_Liv2_rearcheck;
    purchase:                            spriteset_Mail_NSWRType_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_NSWRTYPE);
}
}

//NSWRType_Liv3
spriteset(spriteset_NSWRType_Liv3_Purchase,   "gfx/NSWRType_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_NSWRType_Liv3,   "gfx/NSWRType_Liv3.png") {template_7(7, 99)}
spriteset(spriteset_NSWRType_Liv3_Lead,   "gfx/NSWRType_Liv3.png") {template_7(7, 39)}
spriteset(spriteset_NSWRType_Liv3_Diner,   "gfx/NSWRType_Liv3.png") {template_7(7, 69)}
spriteset(spriteset_NSWRType_Liv3_Rear,   "gfx/NSWRType_Liv3.png") {template_7(7, 129)}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_NSWRType_Liv3_Diner;
  spriteset_NSWRType_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv3_leadcheck, position_in_vehid_chain){
    0 : spriteset_NSWRType_Liv3_Lead;
    return sw_NSWRType_Liv3_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_NSWRType_Liv3_Rear;
    return sw_NSWRType_Liv3_leadcheck;
}

item (FEAT_TRAINS, Item_NSWRType_Liv3, 40802) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_NSWRType_Liv3_rearcheck;
    purchase:                            spriteset_NSWRType_Liv3_Purchase;
    additional_text: string(STR_INFO_NSWRTYPE);
}
}

//Mail_NSWRType_Liv3
spriteset(spriteset_Mail_NSWRType_Liv3_Purchase,   "gfx/NSWRType_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_NSWRType_Liv3,   "gfx/NSWRType_Liv3.png") {template_7(187, 39)}
spriteset(spriteset_Mail_NSWRType_Liv3_Rear,   "gfx/NSWRType_Liv3.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_NSWRType_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_NSWRType_Liv3_Rear;
    return spriteset_Mail_NSWRType_Liv3;
}

item (FEAT_TRAINS, Item_Mail_NSWRType_Liv3, 40812) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    60;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_NSWRType_Liv3_rearcheck;
    purchase:                            spriteset_Mail_NSWRType_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_NSWRTYPE);
}
}

//NSWRType_Liv4
spriteset(spriteset_NSWRType_Liv4_Purchase,   "gfx/NSWRType_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_NSWRType_Liv4,   "gfx/NSWRType_Liv4.png") {template_7(7, 99)}
spriteset(spriteset_NSWRType_Liv4_Lead,   "gfx/NSWRType_Liv4.png") {template_7(7, 39)}
spriteset(spriteset_NSWRType_Liv4_Diner,   "gfx/NSWRType_Liv4.png") {template_7(7, 69)}
spriteset(spriteset_NSWRType_Liv4_Rear,   "gfx/NSWRType_Liv4.png") {template_7(7, 129)}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv4_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_NSWRType_Liv4_Diner;
  spriteset_NSWRType_Liv4;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv4_leadcheck, position_in_vehid_chain){
    0 : spriteset_NSWRType_Liv4_Lead;
    return sw_NSWRType_Liv4_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_NSWRType_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_NSWRType_Liv4_Rear;
    return sw_NSWRType_Liv4_leadcheck;
}

item (FEAT_TRAINS, Item_NSWRType_Liv4, 40803) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    75;
        running_cost_factor:            2;
        loading_speed:                    5;

        variant_group: Item_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_NSWRType_Liv4_rearcheck;
    purchase:                            spriteset_NSWRType_Liv4_Purchase;
    additional_text: string(STR_INFO_NSWRTYPE);
}
}

//Mail_NSWRType_Liv4
spriteset(spriteset_Mail_NSWRType_Liv4_Purchase,   "gfx/NSWRType_Liv4.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_NSWRType_Liv4,   "gfx/NSWRType_Liv4.png") {template_7(187, 39)}
spriteset(spriteset_Mail_NSWRType_Liv4_Rear,   "gfx/NSWRType_Liv4.png") {template_7(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_NSWRType_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_NSWRType_Liv4_Rear;
    return spriteset_Mail_NSWRType_Liv4;
}

item (FEAT_TRAINS, Item_Mail_NSWRType_Liv4, 40813) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    60;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_NSWRType_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_NSWRTYPE);
        introduction_date:                date(1931, 1, 1);

        speed:                            115 km/h;
        weight:                            24 ton;
        cargo_capacity:                    44/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_NSWRType_Liv4_rearcheck;
    purchase:                            spriteset_Mail_NSWRType_Liv4_Purchase;
    additional_text: string(STR_INFO_MAIL_NSWRTYPE);
}
}

//WaddingtonsInterurban
spriteset(spriteset_WaddingtonsInterurban_Purchase,   "gfx/WaddingtonsInterurban.png") {template_purchase(7, 21)}
spriteset(spriteset_WaddingtonsInterurban,   "gfx/WaddingtonsInterurban.png") {template_old_8(7, 89)}
spriteset(spriteset_WaddingtonsInterurban_Lead,   "gfx/WaddingtonsInterurban.png") {template_old_8(7, 39)}
spriteset(spriteset_WaddingtonsInterurban_Diner,   "gfx/WaddingtonsInterurban.png") {template_old_8(7, 64)}
spriteset(spriteset_WaddingtonsInterurban_Rear,   "gfx/WaddingtonsInterurban.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_WaddingtonsInterurban_Diner;
  spriteset_WaddingtonsInterurban;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_leadcheck, position_in_vehid_chain){
    0 : spriteset_WaddingtonsInterurban_Lead;
    return sw_WaddingtonsInterurban_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_rearcheck, position_in_consist_from_end){
    0 : spriteset_WaddingtonsInterurban_Rear;
    return sw_WaddingtonsInterurban_leadcheck;
}

item (FEAT_TRAINS, Item_WaddingtonsInterurban, 40880) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

//        variant_group: Item_WaddingtonsInterurban;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_WaddingtonsInterurban_rearcheck;
    purchase:                            spriteset_WaddingtonsInterurban_Purchase;
    additional_text: string(STR_INFO_WADDINGTONSINTERURBAN);
}
}

//Mail_WaddingtonsInterurban
spriteset(spriteset_Mail_WaddingtonsInterurban_Purchase,   "gfx/WaddingtonsInterurban.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_WaddingtonsInterurban,   "gfx/WaddingtonsInterurban.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Rear,   "gfx/WaddingtonsInterurban.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_WaddingtonsInterurban_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_WaddingtonsInterurban_Rear;
    return spriteset_Mail_WaddingtonsInterurban;
}

item (FEAT_TRAINS, Item_Mail_WaddingtonsInterurban, 40890) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

//        variant_group: Item_Mail_WaddingtonsInterurban;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_WaddingtonsInterurban_rearcheck;
    purchase:                            spriteset_Mail_WaddingtonsInterurban_Purchase;
    additional_text: string(STR_INFO_MAIL_WADDINGTONSINTERURBAN);
}
}

//WaddingtonsInterurban_Liv1
spriteset(spriteset_WaddingtonsInterurban_Liv1_Purchase,   "gfx/WaddingtonsInterurban_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_WaddingtonsInterurban_Liv1,   "gfx/WaddingtonsInterurban_Liv1.png") {template_old_8(7, 89)}
spriteset(spriteset_WaddingtonsInterurban_Liv1_Lead,   "gfx/WaddingtonsInterurban_Liv1.png") {template_old_8(7, 39)}
spriteset(spriteset_WaddingtonsInterurban_Liv1_Diner,   "gfx/WaddingtonsInterurban_Liv1.png") {template_old_8(7, 64)}
spriteset(spriteset_WaddingtonsInterurban_Liv1_Rear,   "gfx/WaddingtonsInterurban_Liv1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_WaddingtonsInterurban_Liv1_Diner;
  spriteset_WaddingtonsInterurban_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv1_leadcheck, position_in_vehid_chain){
    0 : spriteset_WaddingtonsInterurban_Liv1_Lead;
    return sw_WaddingtonsInterurban_Liv1_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_WaddingtonsInterurban_Liv1_Rear;
    return sw_WaddingtonsInterurban_Liv1_leadcheck;
}

item (FEAT_TRAINS, Item_WaddingtonsInterurban_Liv1, 40881) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_WaddingtonsInterurban_Liv1_rearcheck;
    purchase:                            spriteset_WaddingtonsInterurban_Liv1_Purchase;
    additional_text: string(STR_INFO_WADDINGTONSINTERURBAN);
}
}

//Mail_WaddingtonsInterurban_Liv1
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv1_Purchase,   "gfx/WaddingtonsInterurban_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv1,   "gfx/WaddingtonsInterurban_Liv1.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv1_Rear,   "gfx/WaddingtonsInterurban_Liv1.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_WaddingtonsInterurban_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_WaddingtonsInterurban_Liv1_Rear;
    return spriteset_Mail_WaddingtonsInterurban_Liv1;
}

item (FEAT_TRAINS, Item_Mail_WaddingtonsInterurban_Liv1, 40891) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_WaddingtonsInterurban_Liv1_rearcheck;
    purchase:                            spriteset_Mail_WaddingtonsInterurban_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_WADDINGTONSINTERURBAN);
}
}

//WaddingtonsInterurban_Liv2
spriteset(spriteset_WaddingtonsInterurban_Liv2_Purchase,   "gfx/WaddingtonsInterurban_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_WaddingtonsInterurban_Liv2,   "gfx/WaddingtonsInterurban_Liv2.png") {template_old_8(7, 89)}
spriteset(spriteset_WaddingtonsInterurban_Liv2_Lead,   "gfx/WaddingtonsInterurban_Liv2.png") {template_old_8(7, 39)}
spriteset(spriteset_WaddingtonsInterurban_Liv2_Diner,   "gfx/WaddingtonsInterurban_Liv2.png") {template_old_8(7, 64)}
spriteset(spriteset_WaddingtonsInterurban_Liv2_Rear,   "gfx/WaddingtonsInterurban_Liv2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_WaddingtonsInterurban_Liv2_Diner;
  spriteset_WaddingtonsInterurban_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv2_leadcheck, position_in_vehid_chain){
    0 : spriteset_WaddingtonsInterurban_Liv2_Lead;
    return sw_WaddingtonsInterurban_Liv2_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_WaddingtonsInterurban_Liv2_Rear;
    return sw_WaddingtonsInterurban_Liv2_leadcheck;
}

item (FEAT_TRAINS, Item_WaddingtonsInterurban_Liv2, 40882) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_WaddingtonsInterurban_Liv2_rearcheck;
    purchase:                            spriteset_WaddingtonsInterurban_Liv2_Purchase;
    additional_text: string(STR_INFO_WADDINGTONSINTERURBAN);
}
}

//Mail_WaddingtonsInterurban_Liv2
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv2_Purchase,   "gfx/WaddingtonsInterurban_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv2,   "gfx/WaddingtonsInterurban_Liv2.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv2_Rear,   "gfx/WaddingtonsInterurban_Liv2.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_WaddingtonsInterurban_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_WaddingtonsInterurban_Liv2_Rear;
    return spriteset_Mail_WaddingtonsInterurban_Liv2;
}

item (FEAT_TRAINS, Item_Mail_WaddingtonsInterurban_Liv2, 40892) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_WaddingtonsInterurban_Liv2_rearcheck;
    purchase:                            spriteset_Mail_WaddingtonsInterurban_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_WADDINGTONSINTERURBAN);
}
}

//WaddingtonsInterurban_Liv3
spriteset(spriteset_WaddingtonsInterurban_Liv3_Purchase,   "gfx/WaddingtonsInterurban_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_WaddingtonsInterurban_Liv3,   "gfx/WaddingtonsInterurban_Liv3.png") {template_old_8(7, 89)}
spriteset(spriteset_WaddingtonsInterurban_Liv3_Lead,   "gfx/WaddingtonsInterurban_Liv3.png") {template_old_8(7, 39)}
spriteset(spriteset_WaddingtonsInterurban_Liv3_Diner,   "gfx/WaddingtonsInterurban_Liv3.png") {template_old_8(7, 64)}
spriteset(spriteset_WaddingtonsInterurban_Liv3_Rear,   "gfx/WaddingtonsInterurban_Liv3.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_WaddingtonsInterurban_Liv3_Diner;
  spriteset_WaddingtonsInterurban_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv3_leadcheck, position_in_vehid_chain){
    0 : spriteset_WaddingtonsInterurban_Liv3_Lead;
    return sw_WaddingtonsInterurban_Liv3_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_WaddingtonsInterurban_Liv3_Rear;
    return sw_WaddingtonsInterurban_Liv3_leadcheck;
}

item (FEAT_TRAINS, Item_WaddingtonsInterurban_Liv3, 40883) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_WaddingtonsInterurban_Liv3_rearcheck;
    purchase:                            spriteset_WaddingtonsInterurban_Liv3_Purchase;
    additional_text: string(STR_INFO_WADDINGTONSINTERURBAN);
}
}

//Mail_WaddingtonsInterurban_Liv3
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv3_Purchase,   "gfx/WaddingtonsInterurban_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv3,   "gfx/WaddingtonsInterurban_Liv3.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_WaddingtonsInterurban_Liv3_Rear,   "gfx/WaddingtonsInterurban_Liv3.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_WaddingtonsInterurban_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_WaddingtonsInterurban_Liv3_Rear;
    return spriteset_Mail_WaddingtonsInterurban_Liv3;
}

item (FEAT_TRAINS, Item_Mail_WaddingtonsInterurban_Liv3, 40893) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_WaddingtonsInterurban_Liv3_rearcheck;
    purchase:                            spriteset_Mail_WaddingtonsInterurban_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_WADDINGTONSINTERURBAN);
}
}

//WaddingtonsInterurban_SRA
spriteset(spriteset_WaddingtonsInterurban_SRA_Purchase,   "gfx/WaddingtonsInterurban_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_WaddingtonsInterurban_SRA,   "gfx/WaddingtonsInterurban_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_WaddingtonsInterurban_SRA_Lead,   "gfx/WaddingtonsInterurban_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_WaddingtonsInterurban_SRA_Diner,   "gfx/WaddingtonsInterurban_SRA.png") {template_old_8(7, 64)}
spriteset(spriteset_WaddingtonsInterurban_SRA_Rear,   "gfx/WaddingtonsInterurban_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_SRA_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_WaddingtonsInterurban_SRA_Diner;
  spriteset_WaddingtonsInterurban_SRA;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_SRA_leadcheck, position_in_vehid_chain){
    0 : spriteset_WaddingtonsInterurban_SRA_Lead;
    return sw_WaddingtonsInterurban_SRA_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_WaddingtonsInterurban_SRA_rearcheck, position_in_consist_from_end){
    0 : spriteset_WaddingtonsInterurban_SRA_Rear;
    return sw_WaddingtonsInterurban_SRA_leadcheck;
}

item (FEAT_TRAINS, Item_WaddingtonsInterurban_SRA, 40884) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_WaddingtonsInterurban_SRA_rearcheck;
    purchase:                            spriteset_WaddingtonsInterurban_SRA_Purchase;
    additional_text: string(STR_INFO_WADDINGTONSINTERURBAN);
}
}

//Mail_WaddingtonsInterurban_SRA
spriteset(spriteset_Mail_WaddingtonsInterurban_SRA_Purchase,   "gfx/WaddingtonsInterurban_SRA.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_WaddingtonsInterurban_SRA,   "gfx/WaddingtonsInterurban_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_WaddingtonsInterurban_SRA_Rear,   "gfx/WaddingtonsInterurban_SRA.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_WaddingtonsInterurban_SRA_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_WaddingtonsInterurban_SRA_Rear;
    return spriteset_Mail_WaddingtonsInterurban_SRA;
}

item (FEAT_TRAINS, Item_Mail_WaddingtonsInterurban_SRA, 40894) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_WaddingtonsInterurban;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_WADDINGTONSINTERURBAN);
        introduction_date:                date(1939, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    75/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_WaddingtonsInterurban_SRA_rearcheck;
    purchase:                            spriteset_Mail_WaddingtonsInterurban_SRA_Purchase;
    additional_text: string(STR_INFO_MAIL_WADDINGTONSINTERURBAN);
}
}


//TullochInterurbanCoach
spriteset(spriteset_TullochInterurbanCoach_Purchase,   "gfx/TullochInterurbanCoach.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurbanCoach,   "gfx/TullochInterurbanCoach.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurbanCoach_Lead,   "gfx/TullochInterurbanCoach.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochInterurbanCoach_Diner,   "gfx/TullochInterurbanCoach.png") {template_old_8(7, 64)}
spriteset(spriteset_TullochInterurbanCoach_Rear,   "gfx/TullochInterurbanCoach.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_TullochInterurbanCoach_Diner;
  spriteset_TullochInterurbanCoach;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_leadcheck, position_in_vehid_chain){
    0 : spriteset_TullochInterurbanCoach_Lead;
    return sw_TullochInterurbanCoach_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochInterurbanCoach_Rear;
    return sw_TullochInterurbanCoach_leadcheck;
}

item (FEAT_TRAINS, Item_TullochInterurbanCoach, 40900) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

//        variant_group: Item_TullochInterurbanCoach;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochInterurbanCoach_rearcheck;
    purchase:                            spriteset_TullochInterurbanCoach_Purchase;
    additional_text: string(STR_INFO_TULLOCHINTERURBANCOACH);
}
}

//Mail_TullochInterurbanCoach
spriteset(spriteset_Mail_TullochInterurbanCoach_Purchase,   "gfx/TullochInterurbanCoach.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_TullochInterurbanCoach,   "gfx/TullochInterurbanCoach.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Rear,   "gfx/TullochInterurbanCoach.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_TullochInterurbanCoach_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_TullochInterurbanCoach_Rear;
    return spriteset_Mail_TullochInterurbanCoach;
}

item (FEAT_TRAINS, Item_Mail_TullochInterurbanCoach, 40910) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

//        variant_group: Item_Mail_TullochInterurbanCoach;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_TullochInterurbanCoach_rearcheck;
    purchase:                            spriteset_Mail_TullochInterurbanCoach_Purchase;
    additional_text: string(STR_INFO_MAIL_TULLOCHINTERURBANCOACH);
}
}

//TullochInterurbanCoach_Liv1
spriteset(spriteset_TullochInterurbanCoach_Liv1_Purchase,   "gfx/TullochInterurbanCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurbanCoach_Liv1,   "gfx/TullochInterurbanCoach_Liv1.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurbanCoach_Liv1_Lead,   "gfx/TullochInterurbanCoach_Liv1.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochInterurbanCoach_Liv1_Diner,   "gfx/TullochInterurbanCoach_Liv1.png") {template_old_8(7, 64)}
spriteset(spriteset_TullochInterurbanCoach_Liv1_Rear,   "gfx/TullochInterurbanCoach_Liv1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_TullochInterurbanCoach_Liv1_Diner;
  spriteset_TullochInterurbanCoach_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv1_leadcheck, position_in_vehid_chain){
    0 : spriteset_TullochInterurbanCoach_Liv1_Lead;
    return sw_TullochInterurbanCoach_Liv1_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochInterurbanCoach_Liv1_Rear;
    return sw_TullochInterurbanCoach_Liv1_leadcheck;
}

item (FEAT_TRAINS, Item_TullochInterurbanCoach_Liv1, 40901) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochInterurbanCoach_Liv1_rearcheck;
    purchase:                            spriteset_TullochInterurbanCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_TULLOCHINTERURBANCOACH);
}
}

//Mail_TullochInterurbanCoach_Liv1
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv1_Purchase,   "gfx/TullochInterurbanCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv1,   "gfx/TullochInterurbanCoach_Liv1.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv1_Rear,   "gfx/TullochInterurbanCoach_Liv1.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_TullochInterurbanCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_TullochInterurbanCoach_Liv1_Rear;
    return spriteset_Mail_TullochInterurbanCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_TullochInterurbanCoach_Liv1, 40911) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_TullochInterurbanCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_TullochInterurbanCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_TULLOCHINTERURBANCOACH);
}
}

//TullochInterurbanCoach_Liv2
spriteset(spriteset_TullochInterurbanCoach_Liv2_Purchase,   "gfx/TullochInterurbanCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurbanCoach_Liv2,   "gfx/TullochInterurbanCoach_Liv2.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurbanCoach_Liv2_Lead,   "gfx/TullochInterurbanCoach_Liv2.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochInterurbanCoach_Liv2_Diner,   "gfx/TullochInterurbanCoach_Liv2.png") {template_old_8(7, 64)}
spriteset(spriteset_TullochInterurbanCoach_Liv2_Rear,   "gfx/TullochInterurbanCoach_Liv2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_TullochInterurbanCoach_Liv2_Diner;
  spriteset_TullochInterurbanCoach_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv2_leadcheck, position_in_vehid_chain){
    0 : spriteset_TullochInterurbanCoach_Liv2_Lead;
    return sw_TullochInterurbanCoach_Liv2_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochInterurbanCoach_Liv2_Rear;
    return sw_TullochInterurbanCoach_Liv2_leadcheck;
}

item (FEAT_TRAINS, Item_TullochInterurbanCoach_Liv2, 40902) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochInterurbanCoach_Liv2_rearcheck;
    purchase:                            spriteset_TullochInterurbanCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_TULLOCHINTERURBANCOACH);
}
}

//Mail_TullochInterurbanCoach_Liv2
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv2_Purchase,   "gfx/TullochInterurbanCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv2,   "gfx/TullochInterurbanCoach_Liv2.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv2_Rear,   "gfx/TullochInterurbanCoach_Liv2.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_TullochInterurbanCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_TullochInterurbanCoach_Liv2_Rear;
    return spriteset_Mail_TullochInterurbanCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_TullochInterurbanCoach_Liv2, 40912) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_TullochInterurbanCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_TullochInterurbanCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_TULLOCHINTERURBANCOACH);
}
}

//TullochInterurbanCoach_Liv3
spriteset(spriteset_TullochInterurbanCoach_Liv3_Purchase,   "gfx/TullochInterurbanCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurbanCoach_Liv3,   "gfx/TullochInterurbanCoach_Liv3.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurbanCoach_Liv3_Lead,   "gfx/TullochInterurbanCoach_Liv3.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochInterurbanCoach_Liv3_Diner,   "gfx/TullochInterurbanCoach_Liv3.png") {template_old_8(7, 64)}
spriteset(spriteset_TullochInterurbanCoach_Liv3_Rear,   "gfx/TullochInterurbanCoach_Liv3.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_TullochInterurbanCoach_Liv3_Diner;
  spriteset_TullochInterurbanCoach_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv3_leadcheck, position_in_vehid_chain){
    0 : spriteset_TullochInterurbanCoach_Liv3_Lead;
    return sw_TullochInterurbanCoach_Liv3_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochInterurbanCoach_Liv3_Rear;
    return sw_TullochInterurbanCoach_Liv3_leadcheck;
}

item (FEAT_TRAINS, Item_TullochInterurbanCoach_Liv3, 40903) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochInterurbanCoach_Liv3_rearcheck;
    purchase:                            spriteset_TullochInterurbanCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_TULLOCHINTERURBANCOACH);
}
}

//Mail_TullochInterurbanCoach_Liv3
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv3_Purchase,   "gfx/TullochInterurbanCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv3,   "gfx/TullochInterurbanCoach_Liv3.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_TullochInterurbanCoach_Liv3_Rear,   "gfx/TullochInterurbanCoach_Liv3.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_TullochInterurbanCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_TullochInterurbanCoach_Liv3_Rear;
    return spriteset_Mail_TullochInterurbanCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_TullochInterurbanCoach_Liv3, 40913) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_TullochInterurbanCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_TullochInterurbanCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_TULLOCHINTERURBANCOACH);
}
}

//TullochInterurbanCoach_SRA
spriteset(spriteset_TullochInterurbanCoach_SRA_Purchase,   "gfx/TullochInterurbanCoach_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_TullochInterurbanCoach_SRA,   "gfx/TullochInterurbanCoach_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_TullochInterurbanCoach_SRA_Lead,   "gfx/TullochInterurbanCoach_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_TullochInterurbanCoach_SRA_Diner,   "gfx/TullochInterurbanCoach_SRA.png") {template_old_8(7, 64)}
spriteset(spriteset_TullochInterurbanCoach_SRA_Rear,   "gfx/TullochInterurbanCoach_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_SRA_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_TullochInterurbanCoach_SRA_Diner;
  spriteset_TullochInterurbanCoach_SRA;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_SRA_leadcheck, position_in_vehid_chain){
    0 : spriteset_TullochInterurbanCoach_SRA_Lead;
    return sw_TullochInterurbanCoach_SRA_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_TullochInterurbanCoach_SRA_rearcheck, position_in_consist_from_end){
    0 : spriteset_TullochInterurbanCoach_SRA_Rear;
    return sw_TullochInterurbanCoach_SRA_leadcheck;
}

item (FEAT_TRAINS, Item_TullochInterurbanCoach_SRA, 40904) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_TullochInterurbanCoach_SRA_rearcheck;
    purchase:                            spriteset_TullochInterurbanCoach_SRA_Purchase;
    additional_text: string(STR_INFO_TULLOCHINTERURBANCOACH);
}
}

//Mail_TullochInterurbanCoach_SRA
spriteset(spriteset_Mail_TullochInterurbanCoach_SRA_Purchase,   "gfx/TullochInterurbanCoach_SRA.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_TullochInterurbanCoach_SRA,   "gfx/TullochInterurbanCoach_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_TullochInterurbanCoach_SRA_Rear,   "gfx/TullochInterurbanCoach_SRA.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_TullochInterurbanCoach_SRA_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_TullochInterurbanCoach_SRA_Rear;
    return spriteset_Mail_TullochInterurbanCoach_SRA;
}

item (FEAT_TRAINS, Item_Mail_TullochInterurbanCoach_SRA, 40914) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_TullochInterurbanCoach;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_TULLOCHINTERURBANCOACH);
        introduction_date:                date(1948, 1, 1);

        speed:                            115 km/h;
        weight:                            42 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_TullochInterurbanCoach_SRA_rearcheck;
    purchase:                            spriteset_Mail_TullochInterurbanCoach_SRA_Purchase;
    additional_text: string(STR_INFO_MAIL_TULLOCHINTERURBANCOACH);
}
}

//VLine_ZType
spriteset(spriteset_VLine_ZType_Purchase,   "gfx/VLine_ZType.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType,   "gfx/VLine_ZType.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_Lead,   "gfx/VLine_ZType.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_Diner,   "gfx/VLine_ZType.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_Rear,   "gfx/VLine_ZType.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_Diner;
  spriteset_VLine_ZType;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_Lead;
    return sw_VLine_ZType_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_Rear;
    return sw_VLine_ZType_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType, 41000) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

//        variant_group: Item_VLine_ZType;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_rearcheck;
    purchase:                            spriteset_VLine_ZType_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType
spriteset(spriteset_Mail_VLine_ZType_Purchase,   "gfx/VLine_ZType.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType,   "gfx/VLine_ZType.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_Rear,   "gfx/VLine_ZType.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_Rear;
    return spriteset_Mail_VLine_ZType;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType, 41050) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

//        variant_group: Item_Mail_VLine_ZType;
//        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_Liv1
spriteset(spriteset_VLine_ZType_Liv1_Purchase,   "gfx/VLine_ZType_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_Liv1,   "gfx/VLine_ZType_Liv1.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_Liv1_Lead,   "gfx/VLine_ZType_Liv1.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_Liv1_Diner,   "gfx/VLine_ZType_Liv1.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_Liv1_Rear,   "gfx/VLine_ZType_Liv1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_Liv1_Diner;
  spriteset_VLine_ZType_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv1_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_Liv1_Lead;
    return sw_VLine_ZType_Liv1_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_Liv1_Rear;
    return sw_VLine_ZType_Liv1_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_Liv1, 41001) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_Liv1_rearcheck;
    purchase:                            spriteset_VLine_ZType_Liv1_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_Liv1
spriteset(spriteset_Mail_VLine_ZType_Liv1_Purchase,   "gfx/VLine_ZType_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_Liv1,   "gfx/VLine_ZType_Liv1.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_Liv1_Rear,   "gfx/VLine_ZType_Liv1.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_Liv1_Rear;
    return spriteset_Mail_VLine_ZType_Liv1;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_Liv1, 41051) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_Liv1_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_Liv2
spriteset(spriteset_VLine_ZType_Liv2_Purchase,   "gfx/VLine_ZType_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_Liv2,   "gfx/VLine_ZType_Liv2.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_Liv2_Lead,   "gfx/VLine_ZType_Liv2.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_Liv2_Diner,   "gfx/VLine_ZType_Liv2.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_Liv2_Rear,   "gfx/VLine_ZType_Liv2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_Liv2_Diner;
  spriteset_VLine_ZType_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv2_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_Liv2_Lead;
    return sw_VLine_ZType_Liv2_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_Liv2_Rear;
    return sw_VLine_ZType_Liv2_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_Liv2, 41002) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_Liv2_rearcheck;
    purchase:                            spriteset_VLine_ZType_Liv2_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_Liv2
spriteset(spriteset_Mail_VLine_ZType_Liv2_Purchase,   "gfx/VLine_ZType_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_Liv2,   "gfx/VLine_ZType_Liv2.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_Liv2_Rear,   "gfx/VLine_ZType_Liv2.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_Liv2_Rear;
    return spriteset_Mail_VLine_ZType_Liv2;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_Liv2, 41052) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_Liv2_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_Liv3
spriteset(spriteset_VLine_ZType_Liv3_Purchase,   "gfx/VLine_ZType_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_Liv3,   "gfx/VLine_ZType_Liv3.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_Liv3_Lead,   "gfx/VLine_ZType_Liv3.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_Liv3_Diner,   "gfx/VLine_ZType_Liv3.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_Liv3_Rear,   "gfx/VLine_ZType_Liv3.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_Liv3_Diner;
  spriteset_VLine_ZType_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv3_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_Liv3_Lead;
    return sw_VLine_ZType_Liv3_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_Liv3_Rear;
    return sw_VLine_ZType_Liv3_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_Liv3, 41003) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_Liv3_rearcheck;
    purchase:                            spriteset_VLine_ZType_Liv3_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_Liv3
spriteset(spriteset_Mail_VLine_ZType_Liv3_Purchase,   "gfx/VLine_ZType_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_Liv3,   "gfx/VLine_ZType_Liv3.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_Liv3_Rear,   "gfx/VLine_ZType_Liv3.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_Liv3_Rear;
    return spriteset_Mail_VLine_ZType_Liv3;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_Liv3, 41053) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_Liv3_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_SRA
spriteset(spriteset_VLine_ZType_SRA_Purchase,   "gfx/VLine_ZType_SRA.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_SRA,   "gfx/VLine_ZType_SRA.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_SRA_Lead,   "gfx/VLine_ZType_SRA.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_SRA_Diner,   "gfx/VLine_ZType_SRA.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_SRA_Rear,   "gfx/VLine_ZType_SRA.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_SRA_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_SRA_Diner;
  spriteset_VLine_ZType_SRA;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_SRA_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_SRA_Lead;
    return sw_VLine_ZType_SRA_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_SRA_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_SRA_Rear;
    return sw_VLine_ZType_SRA_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_SRA, 41004) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_SRA_rearcheck;
    purchase:                            spriteset_VLine_ZType_SRA_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_SRA
spriteset(spriteset_Mail_VLine_ZType_SRA_Purchase,   "gfx/VLine_ZType_SRA.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_SRA,   "gfx/VLine_ZType_SRA.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_SRA_Rear,   "gfx/VLine_ZType_SRA.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_SRA_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_SRA_Rear;
    return spriteset_Mail_VLine_ZType_SRA;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_SRA, 41054) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_SRA_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_SRA_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_VR
spriteset(spriteset_VLine_ZType_VR_Purchase,   "gfx/VLine_ZType_VR.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_VR,   "gfx/VLine_ZType_VR.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_VR_Lead,   "gfx/VLine_ZType_VR.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_VR_Diner,   "gfx/VLine_ZType_VR.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_VR_Rear,   "gfx/VLine_ZType_VR.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VR_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_VR_Diner;
  spriteset_VLine_ZType_VR;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VR_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_VR_Lead;
    return sw_VLine_ZType_VR_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VR_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_VR_Rear;
    return sw_VLine_ZType_VR_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_VR, 41005) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_VR_rearcheck;
    purchase:                            spriteset_VLine_ZType_VR_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_VR
spriteset(spriteset_Mail_VLine_ZType_VR_Purchase,   "gfx/VLine_ZType_VR.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_VR,   "gfx/VLine_ZType_VR.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_VR_Rear,   "gfx/VLine_ZType_VR.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_VR_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_VR_Rear;
    return spriteset_Mail_VLine_ZType_VR;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_VR, 41055) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_VR_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_VR_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_VLine1
spriteset(spriteset_VLine_ZType_VLine1_Purchase,   "gfx/VLine_ZType_VLine1.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_VLine1,   "gfx/VLine_ZType_VLine1.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_VLine1_Lead,   "gfx/VLine_ZType_VLine1.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_VLine1_Diner,   "gfx/VLine_ZType_VLine1.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_VLine1_Rear,   "gfx/VLine_ZType_VLine1.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_VLine1_Diner;
  spriteset_VLine_ZType_VLine1;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine1_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_VLine1_Lead;
    return sw_VLine_ZType_VLine1_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine1_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_VLine1_Rear;
    return sw_VLine_ZType_VLine1_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_VLine1, 41006) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_VLine1_rearcheck;
    purchase:                            spriteset_VLine_ZType_VLine1_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_VLine1
spriteset(spriteset_Mail_VLine_ZType_VLine1_Purchase,   "gfx/VLine_ZType_VLine1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_VLine1,   "gfx/VLine_ZType_VLine1.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_VLine1_Rear,   "gfx/VLine_ZType_VLine1.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_VLine1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_VLine1_Rear;
    return spriteset_Mail_VLine_ZType_VLine1;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_VLine1, 41056) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_VLine1_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_VLine1_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_VLine2
spriteset(spriteset_VLine_ZType_VLine2_Purchase,   "gfx/VLine_ZType_VLine2.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_VLine2,   "gfx/VLine_ZType_VLine2.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_VLine2_Lead,   "gfx/VLine_ZType_VLine2.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_VLine2_Diner,   "gfx/VLine_ZType_VLine2.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_VLine2_Rear,   "gfx/VLine_ZType_VLine2.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_VLine2_Diner;
  spriteset_VLine_ZType_VLine2;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine2_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_VLine2_Lead;
    return sw_VLine_ZType_VLine2_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine2_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_VLine2_Rear;
    return sw_VLine_ZType_VLine2_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_VLine2, 41007) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_VLine2_rearcheck;
    purchase:                            spriteset_VLine_ZType_VLine2_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_VLine2
spriteset(spriteset_Mail_VLine_ZType_VLine2_Purchase,   "gfx/VLine_ZType_VLine2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_VLine2,   "gfx/VLine_ZType_VLine2.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_VLine2_Rear,   "gfx/VLine_ZType_VLine2.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_VLine2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_VLine2_Rear;
    return spriteset_Mail_VLine_ZType_VLine2;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_VLine2, 41057) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_VLine2_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_VLine2_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_VLine3
spriteset(spriteset_VLine_ZType_VLine3_Purchase,   "gfx/VLine_ZType_VLine3.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_VLine3,   "gfx/VLine_ZType_VLine3.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_VLine3_Lead,   "gfx/VLine_ZType_VLine3.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_VLine3_Diner,   "gfx/VLine_ZType_VLine3.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_VLine3_Rear,   "gfx/VLine_ZType_VLine3.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_VLine3_Diner;
  spriteset_VLine_ZType_VLine3;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine3_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_VLine3_Lead;
    return sw_VLine_ZType_VLine3_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine3_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_VLine3_Rear;
    return sw_VLine_ZType_VLine3_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_VLine3, 41008) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_VLine3_rearcheck;
    purchase:                            spriteset_VLine_ZType_VLine3_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_VLine3
spriteset(spriteset_Mail_VLine_ZType_VLine3_Purchase,   "gfx/VLine_ZType_VLine3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_VLine3,   "gfx/VLine_ZType_VLine3.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_VLine3_Rear,   "gfx/VLine_ZType_VLine3.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_VLine3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_VLine3_Rear;
    return spriteset_Mail_VLine_ZType_VLine3;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_VLine3, 41058) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_VLine3_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_VLine3_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_VLine4
spriteset(spriteset_VLine_ZType_VLine4_Purchase,   "gfx/VLine_ZType_VLine4.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_VLine4,   "gfx/VLine_ZType_VLine4.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_VLine4_Lead,   "gfx/VLine_ZType_VLine4.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_VLine4_Diner,   "gfx/VLine_ZType_VLine4.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_VLine4_Rear,   "gfx/VLine_ZType_VLine4.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine4_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_VLine4_Diner;
  spriteset_VLine_ZType_VLine4;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine4_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_VLine4_Lead;
    return sw_VLine_ZType_VLine4_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_VLine4_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_VLine4_Rear;
    return sw_VLine_ZType_VLine4_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_VLine4, 41009) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_VLine4_rearcheck;
    purchase:                            spriteset_VLine_ZType_VLine4_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_VLine4
spriteset(spriteset_Mail_VLine_ZType_VLine4_Purchase,   "gfx/VLine_ZType_VLine4.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_VLine4,   "gfx/VLine_ZType_VLine4.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_VLine4_Rear,   "gfx/VLine_ZType_VLine4.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_VLine4_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_VLine4_Rear;
    return spriteset_Mail_VLine_ZType_VLine4;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_VLine4, 41059) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_VLine4_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_VLine4_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//VLine_ZType_PTV
spriteset(spriteset_VLine_ZType_PTV_Purchase,   "gfx/VLine_ZType_PTV.png") {template_purchase(7, 21)}
spriteset(spriteset_VLine_ZType_PTV,   "gfx/VLine_ZType_PTV.png") {template_old_8(7, 89)}
spriteset(spriteset_VLine_ZType_PTV_Lead,   "gfx/VLine_ZType_PTV.png") {template_old_8(7, 39)}
spriteset(spriteset_VLine_ZType_PTV_Diner,   "gfx/VLine_ZType_PTV.png") {template_old_8(7, 64)}
spriteset(spriteset_VLine_ZType_PTV_Rear,   "gfx/VLine_ZType_PTV.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_PTV_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_VLine_ZType_PTV_Diner;
  spriteset_VLine_ZType_PTV;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_PTV_leadcheck, position_in_vehid_chain){
    0 : spriteset_VLine_ZType_PTV_Lead;
    return sw_VLine_ZType_PTV_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_VLine_ZType_PTV_rearcheck, position_in_consist_from_end){
    0 : spriteset_VLine_ZType_PTV_Rear;
    return sw_VLine_ZType_PTV_leadcheck;
}

item (FEAT_TRAINS, Item_VLine_ZType_PTV, 41010) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            3;
        loading_speed:                    10;

        variant_group: Item_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_VLine_ZType_PTV_rearcheck;
    purchase:                            spriteset_VLine_ZType_PTV_Purchase;
    additional_text: string(STR_INFO_VLINE_ZTYPE);
}
}

//Mail_VLine_ZType_PTV
spriteset(spriteset_Mail_VLine_ZType_PTV_Purchase,   "gfx/VLine_ZType_PTV.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_VLine_ZType_PTV,   "gfx/VLine_ZType_PTV.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_VLine_ZType_PTV_Rear,   "gfx/VLine_ZType_PTV.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_VLine_ZType_PTV_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_VLine_ZType_PTV_Rear;
    return spriteset_Mail_VLine_ZType_PTV;
}

item (FEAT_TRAINS, Item_Mail_VLine_ZType_PTV, 41060) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_VLine_ZType;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_VLINE_ZTYPE);
        introduction_date:                date(1957, 1, 1);

        speed:                            115 km/h;
        weight:                            44 ton;
        cargo_capacity:                    88/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_VLine_ZType_PTV_rearcheck;
    purchase:                            spriteset_Mail_VLine_ZType_PTV_Purchase;
    additional_text: string(STR_INFO_MAIL_VLINE_ZTYPE);
}
}

//ComengAuroraCoach_Liv1
spriteset(spriteset_ComengAuroraCoach_Liv1_Purchase,   "gfx/ComengAuroraCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengAuroraCoach_Liv1,   "gfx/ComengAuroraCoach_Liv1.png") {template_8(7, 39)}
spriteset(spriteset_ComengAuroraCoach_Liv1_Diner,   "gfx/ComengAuroraCoach_Liv1.png") {template_8(7, 69)}
spriteset(spriteset_ComengAuroraCoach_Liv1_Lounge,   "gfx/ComengAuroraCoach_Liv1.png") {template_8(7, 99)}
spriteset(spriteset_ComengAuroraCoach_Liv1_Rear,   "gfx/ComengAuroraCoach_Liv1.png") {template_8(7, 129)}

switch(FEAT_TRAINS, SELF, sw_ComengAuroraCoach_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengAuroraCoach_Liv1_Diner;
 2..3: spriteset_ComengAuroraCoach_Liv1_Lounge;
  spriteset_ComengAuroraCoach_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_ComengAuroraCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_ComengAuroraCoach_Liv1_Rear;
    return sw_ComengAuroraCoach_Liv1_dinerposition;
}

item (FEAT_TRAINS, Item_ComengAuroraCoach_Liv1, 41100) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    115;
        running_cost_factor:            4;
        loading_speed:                    5;

        variant_group: Item_ComengAuroraCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENGAURORACOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            130 km/h;
        weight:                            42 ton;
        cargo_capacity:                    80/param_capacity_mod;
    }
    graphics {
    default:                             sw_ComengAuroraCoach_Liv1_rearcheck;
    purchase:                            spriteset_ComengAuroraCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_COMENGAURORACOACH);
}
}

//Mail_ComengAuroraCoach_Liv1
spriteset(spriteset_Mail_ComengAuroraCoach_Liv1_Purchase,   "gfx/ComengAuroraCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_ComengAuroraCoach_Liv1,   "gfx/ComengAuroraCoach_Liv1.png") {template_8(187, 39)}
spriteset(spriteset_Mail_ComengAuroraCoach_Liv1_Rear,   "gfx/ComengAuroraCoach_Liv1.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_ComengAuroraCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_ComengAuroraCoach_Liv1_Rear;
    return spriteset_Mail_ComengAuroraCoach_Liv1;
}

item (FEAT_TRAINS, Item_Mail_ComengAuroraCoach_Liv1, 41110) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_ComengAuroraCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENGAURORACOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            130 km/h;
        weight:                            42 ton;
        cargo_capacity:                    80/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_ComengAuroraCoach_Liv1_rearcheck;
    purchase:                            spriteset_Mail_ComengAuroraCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENGAURORACOACH);
}
}

//ComengAuroraCoach_Liv2
spriteset(spriteset_ComengAuroraCoach_Liv2_Purchase,   "gfx/ComengAuroraCoach_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengAuroraCoach_Liv2,   "gfx/ComengAuroraCoach_Liv2.png") {template_8(7, 39)}
spriteset(spriteset_ComengAuroraCoach_Liv2_Diner,   "gfx/ComengAuroraCoach_Liv2.png") {template_8(7, 69)}
spriteset(spriteset_ComengAuroraCoach_Liv2_Lounge,   "gfx/ComengAuroraCoach_Liv2.png") {template_8(7, 99)}
spriteset(spriteset_ComengAuroraCoach_Liv2_Rear,   "gfx/ComengAuroraCoach_Liv2.png") {template_8(7, 129)}

switch(FEAT_TRAINS, SELF, sw_ComengAuroraCoach_Liv2_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengAuroraCoach_Liv2_Diner;
 2..3: spriteset_ComengAuroraCoach_Liv2_Lounge;
  spriteset_ComengAuroraCoach_Liv2;
}

switch(FEAT_TRAINS, SELF, sw_ComengAuroraCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_ComengAuroraCoach_Liv2_Rear;
    return sw_ComengAuroraCoach_Liv2_dinerposition;
}

item (FEAT_TRAINS, Item_ComengAuroraCoach_Liv2, 41101) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    115;
        running_cost_factor:            4;
        loading_speed:                    5;

        variant_group: Item_ComengAuroraCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENGAURORACOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            130 km/h;
        weight:                            42 ton;
        cargo_capacity:                    80/param_capacity_mod;
    }
    graphics {
    default:                             sw_ComengAuroraCoach_Liv2_rearcheck;
    purchase:                            spriteset_ComengAuroraCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_COMENGAURORACOACH);
}
}

//Mail_ComengAuroraCoach_Liv2
spriteset(spriteset_Mail_ComengAuroraCoach_Liv2_Purchase,   "gfx/ComengAuroraCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_ComengAuroraCoach_Liv2,   "gfx/ComengAuroraCoach_Liv2.png") {template_8(187, 39)}
spriteset(spriteset_Mail_ComengAuroraCoach_Liv2_Rear,   "gfx/ComengAuroraCoach_Liv2.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_ComengAuroraCoach_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_ComengAuroraCoach_Liv2_Rear;
    return spriteset_Mail_ComengAuroraCoach_Liv2;
}

item (FEAT_TRAINS, Item_Mail_ComengAuroraCoach_Liv2, 41111) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_ComengAuroraCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENGAURORACOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            130 km/h;
        weight:                            42 ton;
        cargo_capacity:                    80/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_ComengAuroraCoach_Liv2_rearcheck;
    purchase:                            spriteset_Mail_ComengAuroraCoach_Liv2_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENGAURORACOACH);
}
}

//ComengAuroraCoach_Liv3
spriteset(spriteset_ComengAuroraCoach_Liv3_Purchase,   "gfx/ComengAuroraCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_ComengAuroraCoach_Liv3,   "gfx/ComengAuroraCoach_Liv3.png") {template_8(7, 39)}
spriteset(spriteset_ComengAuroraCoach_Liv3_Diner,   "gfx/ComengAuroraCoach_Liv3.png") {template_8(7, 69)}
spriteset(spriteset_ComengAuroraCoach_Liv3_Lounge,   "gfx/ComengAuroraCoach_Liv3.png") {template_8(7, 99)}
spriteset(spriteset_ComengAuroraCoach_Liv3_Rear,   "gfx/ComengAuroraCoach_Liv3.png") {template_8(7, 129)}

switch(FEAT_TRAINS, SELF, sw_ComengAuroraCoach_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_ComengAuroraCoach_Liv3_Diner;
 2..3: spriteset_ComengAuroraCoach_Liv3_Lounge;
  spriteset_ComengAuroraCoach_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_ComengAuroraCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_ComengAuroraCoach_Liv3_Rear;
    return sw_ComengAuroraCoach_Liv3_dinerposition;
}

item (FEAT_TRAINS, Item_ComengAuroraCoach_Liv3, 41102) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    115;
        running_cost_factor:            4;
        loading_speed:                    5;

        variant_group: Item_ComengAuroraCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENGAURORACOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            130 km/h;
        weight:                            42 ton;
        cargo_capacity:                    80/param_capacity_mod;
    }
    graphics {
    default:                             sw_ComengAuroraCoach_Liv3_rearcheck;
    purchase:                            spriteset_ComengAuroraCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_COMENGAURORACOACH);
}
}

//Mail_ComengAuroraCoach_Liv3
spriteset(spriteset_Mail_ComengAuroraCoach_Liv3_Purchase,   "gfx/ComengAuroraCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_ComengAuroraCoach_Liv3,   "gfx/ComengAuroraCoach_Liv3.png") {template_8(187, 39)}
spriteset(spriteset_Mail_ComengAuroraCoach_Liv3_Rear,   "gfx/ComengAuroraCoach_Liv3.png") {template_8(187, 69)}


switch(FEAT_TRAINS, SELF, sw_Mail_ComengAuroraCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_ComengAuroraCoach_Liv3_Rear;
    return spriteset_Mail_ComengAuroraCoach_Liv3;
}

item (FEAT_TRAINS, Item_Mail_ComengAuroraCoach_Liv3, 41112) {
    property {
        climates_available: (param_RealDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    95;
        running_cost_factor:            2;
        loading_speed:                    20;

        variant_group: Item_Mail_ComengAuroraCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENGAURORACOACH);
        introduction_date:                date(1961, 1, 1);

        speed:                            130 km/h;
        weight:                            42 ton;
        cargo_capacity:                    80/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_ComengAuroraCoach_Liv3_rearcheck;
    purchase:                            spriteset_Mail_ComengAuroraCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENGAURORACOACH);
}
}

//Comeng_InterstateCoach_Silver
spriteset(spriteset_Comeng_InterstateCoach_Silver_Purchase,   "gfx/Comeng_InterstateCoach_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_InterstateCoach_Silver,   "gfx/Comeng_InterstateCoach_Silver.png") {template_old_8(7, 89)}
spriteset(spriteset_Comeng_InterstateCoach_Silver_Lead,   "gfx/Comeng_InterstateCoach_Silver.png") {template_old_8(7, 39)}
spriteset(spriteset_Comeng_InterstateCoach_Silver_Diner,   "gfx/Comeng_InterstateCoach_Silver.png") {template_old_8(7, 64)}
spriteset(spriteset_Comeng_InterstateCoach_Silver_Rear,   "gfx/Comeng_InterstateCoach_Silver.png") {template_old_8(7, 114)}

switch(FEAT_TRAINS, SELF, sw_Comeng_InterstateCoach_Silver_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_Comeng_InterstateCoach_Silver_Diner;
  spriteset_Comeng_InterstateCoach_Silver;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_InterstateCoach_Silver_leadcheck, position_in_vehid_chain){
    0 : spriteset_Comeng_InterstateCoach_Silver_Lead;
    return sw_Comeng_InterstateCoach_Silver_dinerposition;
}

switch(FEAT_TRAINS, SELF, sw_Comeng_InterstateCoach_Silver_rearcheck, position_in_consist_from_end){
    0 : spriteset_Comeng_InterstateCoach_Silver_Rear;
    return sw_Comeng_InterstateCoach_Silver_leadcheck;
}

item (FEAT_TRAINS, Item_Comeng_InterstateCoach_Silver, 41221) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    120;
        running_cost_factor:            6;
        loading_speed:                    10;

        variant_group: Item_Comeng_InterstateCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENG_INTERSTATECOACH);
        introduction_date:                date(1979, 1, 1);

        speed:                            130 km/h;
        weight:                            44 ton;
        cargo_capacity:                    78/param_capacity_mod;
    }
    graphics {
    default:                             sw_Comeng_InterstateCoach_Silver_rearcheck;
    purchase:                            spriteset_Comeng_InterstateCoach_Silver_Purchase;
    additional_text: string(STR_INFO_COMENG_INTERSTATECOACH);
}
}

//Mail_Comeng_InterstateCoach_Silver
spriteset(spriteset_Mail_Comeng_InterstateCoach_Silver_Purchase,   "gfx/Comeng_InterstateCoach_Silver.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_Comeng_InterstateCoach_Silver,   "gfx/Comeng_InterstateCoach_Silver.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_Comeng_InterstateCoach_Silver_Rear,   "gfx/Comeng_InterstateCoach_Silver.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_Comeng_InterstateCoach_Silver_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_Comeng_InterstateCoach_Silver_Rear;
    return spriteset_Mail_Comeng_InterstateCoach_Silver;
}

item (FEAT_TRAINS, Item_Mail_Comeng_InterstateCoach_Silver, 41231) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    100;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_Mail_Comeng_InterstateCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENG_INTERSTATECOACH);
        introduction_date:                date(1979, 1, 1);

        speed:                            130 km/h;
        weight:                            41 ton;
        cargo_capacity:                    78/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_Comeng_InterstateCoach_Silver_rearcheck;
    purchase:                            spriteset_Mail_Comeng_InterstateCoach_Silver_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENG_INTERSTATECOACH);
}
}

//Comeng_HighSpeedCoach_Silver
spriteset(spriteset_Comeng_HighSpeedCoach_Silver_Purchase,   "gfx/Comeng_HighSpeedCoach_Silver.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_HighSpeedCoach_Silver,   "gfx/Comeng_HighSpeedCoach_Silver.png") {template_old_8(7, 39)}
spriteset(spriteset_Comeng_HighSpeedCoach_Silver_Rear,   "gfx/Comeng_HighSpeedCoach_Silver.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_Comeng_HighSpeedCoach_Silver_rearcheck, position_in_consist_from_end){
    0 : spriteset_Comeng_HighSpeedCoach_Silver_Rear;
    return spriteset_Comeng_HighSpeedCoach_Silver;
}

item (FEAT_TRAINS, Item_Comeng_HighSpeedCoach_Silver, 41321) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    130;
        running_cost_factor:            7;
        loading_speed:                    10;

        variant_group: Item_Comeng_HighSpeedCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENG_HIGHSPEEDCOACH);
        introduction_date:                date(1983, 1, 1);

        speed:                            160 km/h;
        weight:                            35 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Comeng_HighSpeedCoach_Silver_rearcheck;
    purchase:                            spriteset_Comeng_HighSpeedCoach_Silver_Purchase;
    additional_text: string(STR_INFO_COMENG_HIGHSPEEDCOACH);
}
}

//Mail_Comeng_HighSpeedCoach_Silver
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_Silver_Purchase,   "gfx/Comeng_HighSpeedCoach_Silver.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_Silver,   "gfx/Comeng_HighSpeedCoach_Silver.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_Silver_Rear,   "gfx/Comeng_HighSpeedCoach_Silver.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_Comeng_HighSpeedCoach_Silver_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_Comeng_HighSpeedCoach_Silver_Rear;
    return spriteset_Mail_Comeng_HighSpeedCoach_Silver;
}

item (FEAT_TRAINS, Item_Mail_Comeng_HighSpeedCoach_Silver, 41331) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    115;
        running_cost_factor:            4;
        loading_speed:                    20;

        variant_group: Item_Mail_Comeng_HighSpeedCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENG_HIGHSPEEDCOACH);
        introduction_date:                date(1983, 1, 1);

        speed:                            160 km/h;
        weight:                            32 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_Comeng_HighSpeedCoach_Silver_rearcheck;
    purchase:                            spriteset_Mail_Comeng_HighSpeedCoach_Silver_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENG_HIGHSPEEDCOACH);
}
}

//Comeng_HighSpeedCoach_VLine1
spriteset(spriteset_Comeng_HighSpeedCoach_VLine1_Purchase,   "gfx/Comeng_HighSpeedCoach_VLine1.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_HighSpeedCoach_VLine1,   "gfx/Comeng_HighSpeedCoach_VLine1.png") {template_old_8(7, 39)}
spriteset(spriteset_Comeng_HighSpeedCoach_VLine1_Rear,   "gfx/Comeng_HighSpeedCoach_VLine1.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_Comeng_HighSpeedCoach_VLine1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Comeng_HighSpeedCoach_VLine1_Rear;
    return spriteset_Comeng_HighSpeedCoach_VLine1;
}

item (FEAT_TRAINS, Item_Comeng_HighSpeedCoach_VLine1, 41322) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    130;
        running_cost_factor:            7;
        loading_speed:                    10;

        variant_group: Item_Comeng_HighSpeedCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENG_HIGHSPEEDCOACH);
        introduction_date:                date(1983, 1, 1);

        speed:                            160 km/h;
        weight:                            35 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Comeng_HighSpeedCoach_VLine1_rearcheck;
    purchase:                            spriteset_Comeng_HighSpeedCoach_VLine1_Purchase;
    additional_text: string(STR_INFO_COMENG_HIGHSPEEDCOACH);
}
}

//Mail_Comeng_HighSpeedCoach_VLine1
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_VLine1_Purchase,   "gfx/Comeng_HighSpeedCoach_VLine1.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_VLine1,   "gfx/Comeng_HighSpeedCoach_VLine1.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_VLine1_Rear,   "gfx/Comeng_HighSpeedCoach_VLine1.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_Comeng_HighSpeedCoach_VLine1_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_Comeng_HighSpeedCoach_VLine1_Rear;
    return spriteset_Mail_Comeng_HighSpeedCoach_VLine1;
}

item (FEAT_TRAINS, Item_Mail_Comeng_HighSpeedCoach_VLine1, 41332) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    115;
        running_cost_factor:            4;
        loading_speed:                    20;

        variant_group: Item_Mail_Comeng_HighSpeedCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENG_HIGHSPEEDCOACH);
        introduction_date:                date(1983, 1, 1);

        speed:                            160 km/h;
        weight:                            32 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_Comeng_HighSpeedCoach_VLine1_rearcheck;
    purchase:                            spriteset_Mail_Comeng_HighSpeedCoach_VLine1_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENG_HIGHSPEEDCOACH);
}
}

//Comeng_HighSpeedCoach_VLine2
spriteset(spriteset_Comeng_HighSpeedCoach_VLine2_Purchase,   "gfx/Comeng_HighSpeedCoach_VLine2.png") {template_purchase(7, 21)}
spriteset(spriteset_Comeng_HighSpeedCoach_VLine2,   "gfx/Comeng_HighSpeedCoach_VLine2.png") {template_old_8(7, 39)}
spriteset(spriteset_Comeng_HighSpeedCoach_VLine2_Rear,   "gfx/Comeng_HighSpeedCoach_VLine2.png") {template_old_8(7, 64)}

switch(FEAT_TRAINS, SELF, sw_Comeng_HighSpeedCoach_VLine2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Comeng_HighSpeedCoach_VLine2_Rear;
    return spriteset_Comeng_HighSpeedCoach_VLine2;
}

item (FEAT_TRAINS, Item_Comeng_HighSpeedCoach_VLine2, 41323) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    130;
        running_cost_factor:            7;
        loading_speed:                    10;

        variant_group: Item_Comeng_HighSpeedCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_COMENG_HIGHSPEEDCOACH);
        introduction_date:                date(1983, 1, 1);

        speed:                            160 km/h;
        weight:                            35 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Comeng_HighSpeedCoach_VLine2_rearcheck;
    purchase:                            spriteset_Comeng_HighSpeedCoach_VLine2_Purchase;
    additional_text: string(STR_INFO_COMENG_HIGHSPEEDCOACH);
}
}

//Mail_Comeng_HighSpeedCoach_VLine2
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_VLine2_Purchase,   "gfx/Comeng_HighSpeedCoach_VLine2.png") {template_purchase(187, 21)}
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_VLine2,   "gfx/Comeng_HighSpeedCoach_VLine2.png") {template_old_8(187, 39)}
spriteset(spriteset_Mail_Comeng_HighSpeedCoach_VLine2_Rear,   "gfx/Comeng_HighSpeedCoach_VLine2.png") {template_old_8(187, 64)}


switch(FEAT_TRAINS, SELF, sw_Mail_Comeng_HighSpeedCoach_VLine2_rearcheck, position_in_consist_from_end){
    0 : spriteset_Mail_Comeng_HighSpeedCoach_VLine2_Rear;
    return spriteset_Mail_Comeng_HighSpeedCoach_VLine2;
}

item (FEAT_TRAINS, Item_Mail_Comeng_HighSpeedCoach_VLine2, 41333) {
    property {
        climates_available: (param_ProposalDisable == 0 && param_IntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    115;
        running_cost_factor:            4;
        loading_speed:                    20;

        variant_group: Item_Mail_Comeng_HighSpeedCoach_Silver;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_MAIL_COMENG_HIGHSPEEDCOACH);
        introduction_date:                date(1983, 1, 1);

        speed:                            160 km/h;
        weight:                            32 ton;
        cargo_capacity:                    72/param_capacity_mod;
    }
    graphics {
    default:                             sw_Mail_Comeng_HighSpeedCoach_VLine2_rearcheck;
    purchase:                            spriteset_Mail_Comeng_HighSpeedCoach_VLine2_Purchase;
    additional_text: string(STR_INFO_MAIL_COMENG_HIGHSPEEDCOACH);
}
}

//DDInterurbanCoach_Liv1
spriteset(spriteset_DDInterurbanCoach_Liv1_Purchase,   "gfx/DDInterurbanCoach_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv1,   "gfx/DDInterurbanCoach_Liv1.png") {template_old_8(7, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv1_Diner,   "gfx/DDInterurbanCoach_Liv1.png") {template_old_8(7, 64)}
spriteset(spriteset_DDInterurbanCoach_Liv1_Rear,   "gfx/DDInterurbanCoach_Liv1.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv1_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_DDInterurbanCoach_Liv1_Diner;
  spriteset_DDInterurbanCoach_Liv1;
}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv1_Rear;
    return sw_DDInterurbanCoach_Liv1_dinerposition;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv1, 45000) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    110;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH);
        introduction_date:                date(1975, 1, 1);

        speed:                            145 km/h;
        weight:                            40 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv1_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv1_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv1_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv1.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv1_Cab,   "gfx/DDInterurbanCoach_Liv1.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv1_Cab_Rear,   "gfx/DDInterurbanCoach_Liv1.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv1_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv1_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv1_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv1_Cab, 45010) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv1_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv1_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv2_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv2.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv2_Cab,   "gfx/DDInterurbanCoach_Liv2.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv2_Cab_Rear,   "gfx/DDInterurbanCoach_Liv2.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv2_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv2_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv2_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv2_Cab, 45011) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv2_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv2_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

//DDInterurbanCoach_Liv3
spriteset(spriteset_DDInterurbanCoach_Liv3_Purchase,   "gfx/DDInterurbanCoach_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv3,   "gfx/DDInterurbanCoach_Liv3.png") {template_old_8(7, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv3_Diner,   "gfx/DDInterurbanCoach_Liv3.png") {template_old_8(7, 64)}
spriteset(spriteset_DDInterurbanCoach_Liv3_Rear,   "gfx/DDInterurbanCoach_Liv3.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv3_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_DDInterurbanCoach_Liv3_Diner;
  spriteset_DDInterurbanCoach_Liv3;
}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv3_Rear;
    return sw_DDInterurbanCoach_Liv3_dinerposition;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv3, 45002) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    110;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH);
        introduction_date:                date(1975, 1, 1);

        speed:                            145 km/h;
        weight:                            40 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv3_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv3_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv3_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv3.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv3_Cab,   "gfx/DDInterurbanCoach_Liv3.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv3_Cab_Rear,   "gfx/DDInterurbanCoach_Liv3.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv3_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv3_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv3_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv3_Cab, 45012) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv3_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv3_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

//DDInterurbanCoach_Liv4
spriteset(spriteset_DDInterurbanCoach_Liv4_Purchase,   "gfx/DDInterurbanCoach_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv4,   "gfx/DDInterurbanCoach_Liv4.png") {template_old_8(7, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv4_Diner,   "gfx/DDInterurbanCoach_Liv4.png") {template_old_8(7, 64)}
spriteset(spriteset_DDInterurbanCoach_Liv4_Rear,   "gfx/DDInterurbanCoach_Liv4.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv4_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_DDInterurbanCoach_Liv4_Diner;
  spriteset_DDInterurbanCoach_Liv4;
}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv4_Rear;
    return sw_DDInterurbanCoach_Liv4_dinerposition;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv4, 45003) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    110;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH);
        introduction_date:                date(1975, 1, 1);

        speed:                            145 km/h;
        weight:                            40 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv4_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv4_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv4_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv4.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv4_Cab,   "gfx/DDInterurbanCoach_Liv4.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv4_Cab_Rear,   "gfx/DDInterurbanCoach_Liv4.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv4_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv4_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv4_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv4_Cab, 45013) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv4_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv4_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

//DDInterurbanCoach_Liv5
spriteset(spriteset_DDInterurbanCoach_Liv5_Purchase,   "gfx/DDInterurbanCoach_Liv5.png") {template_purchase(7, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv5,   "gfx/DDInterurbanCoach_Liv5.png") {template_old_8(7, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv5_Diner,   "gfx/DDInterurbanCoach_Liv5.png") {template_old_8(7, 64)}
spriteset(spriteset_DDInterurbanCoach_Liv5_Rear,   "gfx/DDInterurbanCoach_Liv5.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv5_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_DDInterurbanCoach_Liv5_Diner;
  spriteset_DDInterurbanCoach_Liv5;
}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv5_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv5_Rear;
    return sw_DDInterurbanCoach_Liv5_dinerposition;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv5, 45004) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    110;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH);
        introduction_date:                date(1975, 1, 1);

        speed:                            145 km/h;
        weight:                            40 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv5_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv5_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv5_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv5.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv5_Cab,   "gfx/DDInterurbanCoach_Liv5.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv5_Cab_Rear,   "gfx/DDInterurbanCoach_Liv5.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv5_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv5_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv5_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv5_Cab, 45014) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv5_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv5_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

//DDInterurbanCoach_Liv6
spriteset(spriteset_DDInterurbanCoach_Liv6_Purchase,   "gfx/DDInterurbanCoach_Liv6.png") {template_purchase(7, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv6,   "gfx/DDInterurbanCoach_Liv6.png") {template_old_8(7, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv6_Diner,   "gfx/DDInterurbanCoach_Liv6.png") {template_old_8(7, 64)}
spriteset(spriteset_DDInterurbanCoach_Liv6_Rear,   "gfx/DDInterurbanCoach_Liv6.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv6_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_DDInterurbanCoach_Liv6_Diner;
  spriteset_DDInterurbanCoach_Liv6;
}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv6_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv6_Rear;
    return sw_DDInterurbanCoach_Liv6_dinerposition;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv6, 45005) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    110;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH);
        introduction_date:                date(1975, 1, 1);

        speed:                            145 km/h;
        weight:                            40 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv6_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv6_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv6_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv6.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv6_Cab,   "gfx/DDInterurbanCoach_Liv6.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv6_Cab_Rear,   "gfx/DDInterurbanCoach_Liv6.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv6_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv6_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv6_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv6_Cab, 45015) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv6_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv6_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

//DDInterurbanCoach_Liv7
spriteset(spriteset_DDInterurbanCoach_Liv7_Purchase,   "gfx/DDInterurbanCoach_Liv7.png") {template_purchase(7, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv7,   "gfx/DDInterurbanCoach_Liv7.png") {template_old_8(7, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv7_Diner,   "gfx/DDInterurbanCoach_Liv7.png") {template_old_8(7, 64)}
spriteset(spriteset_DDInterurbanCoach_Liv7_Rear,   "gfx/DDInterurbanCoach_Liv7.png") {template_old_8(7, 89)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv7_dinerposition, position_in_consist - position_in_consist_from_end) {
 0..1: spriteset_DDInterurbanCoach_Liv7_Diner;
  spriteset_DDInterurbanCoach_Liv7;
}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv7_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv7_Rear;
    return sw_DDInterurbanCoach_Liv7_dinerposition;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv7, 45006) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            8;
        cost_factor:                    110;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH);
        introduction_date:                date(1975, 1, 1);

        speed:                            145 km/h;
        weight:                            40 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv7_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv7_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv7_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv7.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv7_Cab,   "gfx/DDInterurbanCoach_Liv7.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv7_Cab_Rear,   "gfx/DDInterurbanCoach_Liv7.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv7_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv7_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv7_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv7_Cab, 45016) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv7_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv7_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

spriteset(spriteset_DDInterurbanCoach_Liv8_Cab_Purchase,   "gfx/DDInterurbanCoach_Liv8.png") {template_purchase(187, 21)}
spriteset(spriteset_DDInterurbanCoach_Liv8_Cab,   "gfx/DDInterurbanCoach_Liv8.png") {template_old_8(187, 39)}
spriteset(spriteset_DDInterurbanCoach_Liv8_Cab_Rear,   "gfx/DDInterurbanCoach_Liv8.png") {template_old_8(187, 64)}

switch(FEAT_TRAINS, SELF, sw_DDInterurbanCoach_Liv8_Cab_rearcheck, position_in_consist_from_end){
    0 : spriteset_DDInterurbanCoach_Liv8_Cab_Rear;
    return spriteset_DDInterurbanCoach_Liv8_Cab;
}

item (FEAT_TRAINS, Item_DDInterurbanCoach_Liv8_Cab, 45017) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_DrivingTrailerDisable == 0 &&  param_DDIntercityPassDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        CC_PASSENGERS;
        cargo_allow_refit:                [PASS, TOUR];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        engine_class:                     ENGINE_CLASS_DIESEL;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        visual_effect_and_powered: VISUAL_EFFECT_DISABLE;

        model_life:                        30;

        length:                            8;
        cost_factor:                    4;
        running_cost_factor:            5;
        loading_speed:                    20;

        variant_group: Item_DDInterurbanCoach_Liv1_Cab;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_DDINTERURBANCOACH_CAB);
        introduction_date:                date(1975, 1, 1);
        vehicle_life:                     50;
        model_life:                        30;

        speed:                            145 km/h;
        power:                            1 hp;
        weight:                            42 ton;
        cargo_capacity:                    112/param_capacity_mod;
    }
    graphics {
    default:                             sw_DDInterurbanCoach_Liv8_Cab_rearcheck;
    purchase:                            spriteset_DDInterurbanCoach_Liv8_Cab_Purchase;
    additional_text: string(STR_INFO_DDINTERURBANCOACH_CAB);
}
}

//VictorianInterstateParcelVan_Liv1
spriteset(spriteset_VictorianInterstateParcelVan_Liv1_Purchase,   "gfx/VictorianInterstateParcelVan_Liv1.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv1,   "gfx/VictorianInterstateParcelVan_Liv1.png") {template_7(7, 39)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv1_Rear,   "gfx/VictorianInterstateParcelVan_Liv1.png") {template_7(7, 69)}


switch(FEAT_TRAINS, SELF, sw_VictorianInterstateParcelVan_Liv1_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateParcelVan_Liv1_Rear;
    return spriteset_VictorianInterstateParcelVan_Liv1;
}

item (FEAT_TRAINS, Item_VictorianInterstateParcelVan_Liv1, 47500) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_ParcelVanDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_VictorianInterstateParcelVan_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATEPARCELVAN);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    60/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateParcelVan_Liv1_rearcheck;
    purchase:                            spriteset_VictorianInterstateParcelVan_Liv1_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATEPARCELVAN);
}
}

//VictorianInterstateParcelVan_Liv2
spriteset(spriteset_VictorianInterstateParcelVan_Liv2_Purchase,   "gfx/VictorianInterstateParcelVan_Liv2.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv2,   "gfx/VictorianInterstateParcelVan_Liv2.png") {template_7(7, 39)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv2_Rear,   "gfx/VictorianInterstateParcelVan_Liv2.png") {template_7(7, 69)}


switch(FEAT_TRAINS, SELF, sw_VictorianInterstateParcelVan_Liv2_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateParcelVan_Liv2_Rear;
    return spriteset_VictorianInterstateParcelVan_Liv2;
}

item (FEAT_TRAINS, Item_VictorianInterstateParcelVan_Liv2, 47501) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_ParcelVanDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_VictorianInterstateParcelVan_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATEPARCELVAN);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    60/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateParcelVan_Liv2_rearcheck;
    purchase:                            spriteset_VictorianInterstateParcelVan_Liv2_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATEPARCELVAN);
}
}

//VictorianInterstateParcelVan_Liv3
spriteset(spriteset_VictorianInterstateParcelVan_Liv3_Purchase,   "gfx/VictorianInterstateParcelVan_Liv3.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv3,   "gfx/VictorianInterstateParcelVan_Liv3.png") {template_7(7, 39)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv3_Rear,   "gfx/VictorianInterstateParcelVan_Liv3.png") {template_7(7, 69)}


switch(FEAT_TRAINS, SELF, sw_VictorianInterstateParcelVan_Liv3_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateParcelVan_Liv3_Rear;
    return spriteset_VictorianInterstateParcelVan_Liv3;
}

item (FEAT_TRAINS, Item_VictorianInterstateParcelVan_Liv3, 47502) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_ParcelVanDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_VictorianInterstateParcelVan_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATEPARCELVAN);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    60/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateParcelVan_Liv3_rearcheck;
    purchase:                            spriteset_VictorianInterstateParcelVan_Liv3_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATEPARCELVAN);
}
}

//VictorianInterstateParcelVan_Liv4
spriteset(spriteset_VictorianInterstateParcelVan_Liv4_Purchase,   "gfx/VictorianInterstateParcelVan_Liv4.png") {template_purchase(7, 21)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv4,   "gfx/VictorianInterstateParcelVan_Liv4.png") {template_7(7, 39)}
spriteset(spriteset_VictorianInterstateParcelVan_Liv4_Rear,   "gfx/VictorianInterstateParcelVan_Liv4.png") {template_7(7, 69)}


switch(FEAT_TRAINS, SELF, sw_VictorianInterstateParcelVan_Liv4_rearcheck, position_in_consist_from_end){
    0 : spriteset_VictorianInterstateParcelVan_Liv4_Rear;
    return spriteset_VictorianInterstateParcelVan_Liv4;
}

item (FEAT_TRAINS, Item_VictorianInterstateParcelVan_Liv4, 47503) {
    property {
        climates_available: (param_FictionalDisable == 0 && param_ParcelVanDisable == 0) ? ALL_CLIMATES : NO_CLIMATE;
        refittable_cargo_classes:        bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_ARMOURED);
        cargo_allow_refit:               [ MAIL, GOOD, FOOD, BEER, FRUT, FISH, VALU, GOLD, DIAM, DYES, ENSP, FERT, MILK, MNSP, FMSP];
		cargo_disallow_refit: [PASS, TOUR, COAL, OIL_, LVST, GRAI, WOOD, IORE, STEL, PAPR, WHEA, RUBR, MAIZ, CORE, WATR, SUGR, TOYS, BATT, SWET, TOFF, COLA, CTCD, BUBL, PLST, FZDR, AORE, BDMT, BRCK, CERA, CERE, CLAY, CMNT, COPR, FICR, GLAS, GRVL, JAVA, LIME, OLSD, PETR, PLAS, POTA, RCYC, RFPR, SAND, SCMT, SGBT, SGCN, SULP, VEHI, VPTS, WDPR, WOOL, URAN, YETI, YETY];
        sprite_id:                        SPRITE_ID_NEW_TRAIN;
        misc_flags:                        bitmask(TRAIN_FLAG_2CC, TRAIN_FLAG_SPRITE_STACK);
        refit_cost:                        0;
        track_type:                        RAIL;
        ai_special_flag:                AI_FLAG_PASSENGER;
        power:                            0 hp;
        dual_headed:                    0;
        default_cargo_type:                PASS;
        air_drag_coefficient:            0.08;
        bitmask_vehicle_info:            0;

        running_cost_base:                RUNNING_COST_DIESEL;

        model_life:                        30;

        length:                            7;
        cost_factor:                    50;
        running_cost_factor:            3;
        loading_speed:                    20;

        variant_group: Item_VictorianInterstateParcelVan_Liv1;
        extra_flags:  bitmask (VEHICLE_FLAG_DISABLE_NEW_VEHICLE_MESSAGE, VEHICLE_FLAG_DISABLE_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_EXCLUSIVE_PREVIEW, VEHICLE_FLAG_SYNC_VARIANT_RELIABILITY);

        name:                             string(STR_NAME_VICTORIANINTERSTATEPARCELVAN);
        introduction_date:                date(1906, 1, 1);

        speed:                            115 km/h;
        weight:                            35 ton;
        cargo_capacity:                    60/param_capacity_mod;
    }
    graphics {
    default:                             sw_VictorianInterstateParcelVan_Liv4_rearcheck;
    purchase:                            spriteset_VictorianInterstateParcelVan_Liv4_Purchase;
    additional_text: string(STR_INFO_VICTORIANINTERSTATEPARCELVAN);
}
}